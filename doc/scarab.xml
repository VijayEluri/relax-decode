<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="struct">
    <name>__pyx_obj_7svector_KeyIterator</name>
    <filename>struct____pyx__obj__7svector__KeyIterator.html</filename>
    <member kind="variable">
      <type>PyObject_HEAD svector_iterator&lt; int, double &gt; *</type>
      <name>thisptr</name>
      <anchorfile>struct____pyx__obj__7svector__KeyIterator.html</anchorfile>
      <anchor>a7f1d6bf6d4e702577dbc5c7e047aa40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct __pyx_obj_7svector_Vector *</type>
      <name>v</name>
      <anchorfile>struct____pyx__obj__7svector__KeyIterator.html</anchorfile>
      <anchor>a1d0872a1d18cd2a5d70153aa8d8faacd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__pyx_obj_7svector_KeyValueIterator</name>
    <filename>struct____pyx__obj__7svector__KeyValueIterator.html</filename>
    <member kind="variable">
      <type>PyObject_HEAD svector_iterator&lt; int, double &gt; *</type>
      <name>thisptr</name>
      <anchorfile>struct____pyx__obj__7svector__KeyValueIterator.html</anchorfile>
      <anchor>a18a0d0cb652073d34d4e2025e858c0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct __pyx_obj_7svector_Vector *</type>
      <name>v</name>
      <anchorfile>struct____pyx__obj__7svector__KeyValueIterator.html</anchorfile>
      <anchor>a4886fcd2aaaecde593025b1d4490ea4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__pyx_obj_7svector_ValueIterator</name>
    <filename>struct____pyx__obj__7svector__ValueIterator.html</filename>
    <member kind="variable">
      <type>PyObject_HEAD svector_iterator&lt; int, double &gt; *</type>
      <name>thisptr</name>
      <anchorfile>struct____pyx__obj__7svector__ValueIterator.html</anchorfile>
      <anchor>a84c4b6a57426d1026bc9fee500e1f0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct __pyx_obj_7svector_Vector *</type>
      <name>v</name>
      <anchorfile>struct____pyx__obj__7svector__ValueIterator.html</anchorfile>
      <anchor>ade8a9afa5e7ac991c03aa06401601931</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__pyx_obj_7svector_Vector</name>
    <filename>struct____pyx__obj__7svector__Vector.html</filename>
    <member kind="variable">
      <type>PyObject_HEAD svector&lt; int, double &gt; *</type>
      <name>thisptr</name>
      <anchorfile>struct____pyx__obj__7svector__Vector.html</anchorfile>
      <anchor>af079a183d80d335744c531c224658a16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>__Pyx_StringTabEntry</name>
    <filename>struct____Pyx__StringTabEntry.html</filename>
    <member kind="variable">
      <type>PyObject **</type>
      <name>p</name>
      <anchorfile>struct____Pyx__StringTabEntry.html</anchorfile>
      <anchor>a6ef4e6bdee8502fd357740c43c26da03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>s</name>
      <anchorfile>struct____Pyx__StringTabEntry.html</anchorfile>
      <anchor>a8d43171a59c47fad0559862692aa8a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>n</name>
      <anchorfile>struct____Pyx__StringTabEntry.html</anchorfile>
      <anchor>a38ade39847ba03badabd559e78911c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>is_unicode</name>
      <anchorfile>struct____Pyx__StringTabEntry.html</anchorfile>
      <anchor>ad3dd0dc735b64c37ab30c8c7ac5a7c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>intern</name>
      <anchorfile>struct____Pyx__StringTabEntry.html</anchorfile>
      <anchor>ae874dc013ae7e2f4dc493c96066b1cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>is_identifier</name>
      <anchorfile>struct____Pyx__StringTabEntry.html</anchorfile>
      <anchor>ac4207479c5f1620aedca6d4fa885891d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Bigram</name>
    <filename>structBigram.html</filename>
    <member kind="function">
      <type></type>
      <name>Bigram</name>
      <anchorfile>structBigram.html</anchorfile>
      <anchor>a020c686282bd0fb8d36bb1599c6b1a14</anchor>
      <arglist>(int word1, int word2)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>w1</name>
      <anchorfile>structBigram.html</anchorfile>
      <anchor>a27e17775db4f1239992f52ca5946c42b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>w2</name>
      <anchorfile>structBigram.html</anchorfile>
      <anchor>a0dfa6c244c9d3a4730c1338e94b1723b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BigramRescore</name>
    <filename>classBigramRescore.html</filename>
    <member kind="function">
      <type></type>
      <name>BigramRescore</name>
      <anchorfile>classBigramRescore.html</anchorfile>
      <anchor>ac1fc6a3f7ac90cbf158e6bcd2f6518f8</anchor>
      <arglist>(const ForestLattice *graph_in, const GraphDecompose *gd_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_weights</name>
      <anchorfile>classBigramRescore.html</anchorfile>
      <anchor>a2d3ec18a2decf6adbb92c2a044505041</anchor>
      <arglist>(vector&lt; int &gt; u_pos, vector&lt; float &gt; u_values, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recompute_bigram_weights</name>
      <anchorfile>classBigramRescore.html</anchorfile>
      <anchor>a25b5c1d281493c722ae1c0a02171d5ec</anchor>
      <arglist>(bool init)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; int &gt;</type>
      <name>get_bigram_path</name>
      <anchorfile>classBigramRescore.html</anchorfile>
      <anchor>a726d2e7088c39e26d924038e223e297c</anchor>
      <arglist>(int w1, int w2)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_bigram_weight</name>
      <anchorfile>classBigramRescore.html</anchorfile>
      <anchor>a4ddc874583100444b08e97c44038f743</anchor>
      <arglist>(int w1, int w2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlankNonLocal</name>
    <filename>classBlankNonLocal.html</filename>
    <base>NonLocal</base>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classBlankNonLocal.html</anchorfile>
      <anchor>ab48fb9f176d5b929aaa724e3f5b32a6a</anchor>
      <arglist>(const Hyperedge &amp;edge, const vector&lt; vector&lt; int &gt; &gt; &amp;subder, double &amp;score, vector&lt; int &gt; &amp;full_derivation, Sig &amp;sig) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Hyp</type>
      <name>initialize</name>
      <anchorfile>classBlankNonLocal.html</anchorfile>
      <anchor>a61e2ac11c599d217cacfa5c54bd191b8</anchor>
      <arglist>(const Hypernode &amp;node) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Cache</name>
    <filename>classCache.html</filename>
    <templarg>C</templarg>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>Cache</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>ace98594381db6cd76b3228a73b18190a</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>ad0a38f45b45b59a772d1e1fd92e59973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>get</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a8d126a64723abe79878befff1c622145</anchor>
      <arglist>(const C &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>get_no_check</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a2616bfc563def72da44f91977552ca62</anchor>
      <arglist>(const C &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>get</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a9256aebb417928fbea6090f820d0652d</anchor>
      <arglist>(const C &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>get_value</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a509df0fde9598a4df9879b5ddb9d93d9</anchor>
      <arglist>(const C &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>aeb9ab922add6cf79e2bef1b714f57e8a</anchor>
      <arglist>(const C &amp;edge, V val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a0864be6a32d0840a4c3009f9ae417902</anchor>
      <arglist>(const C &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a213273226c6bb403d33e10e2bc769fe1</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; V &gt;</type>
      <name>store</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a4de9009630d4bdc7e78b9db7ea734411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>has_value</name>
      <anchorfile>classCache.html</anchorfile>
      <anchor>a30fcdd51d6ff0cd602cc23d4a12b5348</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Candidate</name>
    <filename>structCandidate.html</filename>
    <member kind="function">
      <type></type>
      <name>Candidate</name>
      <anchorfile>structCandidate.html</anchorfile>
      <anchor>ac13c7ec637d37b63fc4d6bf3361fd449</anchor>
      <arglist>(Hyp h, const Hyperedge &amp;e, const vector&lt; int &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structCandidate.html</anchorfile>
      <anchor>a5644a3a3d2d92498923ecc443bb4583c</anchor>
      <arglist>(const Candidate &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Hyp</type>
      <name>hyp</name>
      <anchorfile>structCandidate.html</anchorfile>
      <anchor>a22db5a9c75fdebb31827505d6bc7d274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Hyperedge &amp;</type>
      <name>edge</name>
      <anchorfile>structCandidate.html</anchorfile>
      <anchor>acdb6d12cbf33f6e78b97fed5013a181b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>vec</name>
      <anchorfile>structCandidate.html</anchorfile>
      <anchor>afe2daf1c20513a5489d8407492ca7597</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>candidate_compare</name>
    <filename>structcandidate__compare.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structcandidate__compare.html</anchorfile>
      <anchor>ad142d42876f8dd88301ee5f1b3aed03b</anchor>
      <arglist>(const Candidate *a, const Candidate *b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Clock</name>
    <filename>classClock.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>diffclock</name>
      <anchorfile>classClock.html</anchorfile>
      <anchor>af45b8db844300755b8c4244a65f60833</anchor>
      <arglist>(clock_t clock1, clock_t clock2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstrainerDual</name>
    <filename>classConstrainerDual.html</filename>
    <base>DualDecompositionSubproblem</base>
    <member kind="function">
      <type></type>
      <name>ConstrainerDual</name>
      <anchorfile>classConstrainerDual.html</anchorfile>
      <anchor>ae74adbb392415eec3451dd5a20820b6b</anchor>
      <arglist>(const TagConstraints &amp;cons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classConstrainerDual.html</anchorfile>
      <anchor>a8cd72c1288fc93a0fec014095ac7252b</anchor>
      <arglist>(double &amp;primal, double &amp;dual, wvector &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_weights</name>
      <anchorfile>classConstrainerDual.html</anchorfile>
      <anchor>a622b99f704a3324133f08521eb4924f5</anchor>
      <arglist>(const wvector &amp;updates, wvector *weights, double mult)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TagConstraints &amp;</type>
      <name>_tag_constraints</name>
      <anchorfile>classConstrainerDual.html</anchorfile>
      <anchor>abda18ff85d425d3748f49709534ec9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wvector *</type>
      <name>_cur_weights</name>
      <anchorfile>classConstrainerDual.html</anchorfile>
      <anchor>a4dd6e580712c0b35da77e42e137c7274</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstraintGroup</name>
    <filename>classConstraintGroup.html</filename>
    <member kind="function">
      <type>wvector</type>
      <name>solve_hard</name>
      <anchorfile>classConstraintGroup.html</anchorfile>
      <anchor>a4f37823a56e405c16148c0ba6ae7f114</anchor>
      <arglist>(wvector &amp;weights) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PossibleTag &gt;</type>
      <name>group</name>
      <anchorfile>classConstraintGroup.html</anchorfile>
      <anchor>ac96c45d3b2c4c1a6e1068837bc024d9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CubePruning</name>
    <filename>classCubePruning.html</filename>
    <member kind="function">
      <type></type>
      <name>CubePruning</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>af17d9dda17f79a2c44b47501b9d99870</anchor>
      <arglist>(const HGraph &amp;forest, const Cache&lt; Hyperedge, double &gt; &amp;weights, const NonLocal &amp;non_local, int k, int ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_derivation</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>a0e8d07fc09d695095be5b70780db95d6</anchor>
      <arglist>(vector&lt; int &gt; &amp;der)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parse</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>adf80c0c689d075765f250649433833e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>ab949710c0d8e552cbadbe837b1b62d47</anchor>
      <arglist>(const Hypernode &amp;cur_node, vector&lt; Hyp &gt; &amp;kbest_hyps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_cube</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>a14a4e797c638d07744dc328cf2ce568e</anchor>
      <arglist>(const Hypernode &amp;cur_node, Candidates &amp;cands)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kbest</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>abe8c53bd14fe4ad98ff6388f38a849cb</anchor>
      <arglist>(Candidates &amp;cands, vector&lt; Hyp &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>a5d3ab59862953b9000154e9c07c69634</anchor>
      <arglist>(const Hyperedge &amp;cedge, const vector&lt; int &gt; &amp;cvecj, Candidates &amp;cands)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gethyp</name>
      <anchorfile>classCubePruning.html</anchorfile>
      <anchor>aa7d26357be4241b594f9eb24ac52da22</anchor>
      <arglist>(const Hyperedge &amp;cedge, const vector&lt; int &gt; &amp;vecj, Hyp &amp;item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Decode</name>
    <filename>classDecode.html</filename>
    <base>SubgradientProducer</base>
    <member kind="function">
      <type></type>
      <name>Decode</name>
      <anchorfile>classDecode.html</anchorfile>
      <anchor>a57bd53ddaf49e2fe4b86a7aad782110f</anchor>
      <arglist>(const Forest &amp;forest, const ForestLattice &amp;lattice, const wvector &amp;weight, NgramCache &amp;lm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classDecode.html</anchorfile>
      <anchor>a6d86f91ee2c591c54ce2bb97c1dd6888</anchor>
      <arglist>(double &amp;primal, double &amp;dual, wvector &amp;, int, bool, bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_weights</name>
      <anchorfile>classDecode.html</anchorfile>
      <anchor>a9beca60221318f111b7f4d5acca8e329</anchor>
      <arglist>(const wvector &amp;updates, wvector *weights)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dep</name>
    <filename>classDep.html</filename>
    <member kind="function">
      <type></type>
      <name>Dep</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a80362e936565b55abb269a18fde4dc59</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Dep &amp;</type>
      <name>operator=</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a87fdb64571ed9949e3fa5acdb9b367f9</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a03cf321c0a637f65d4775ee8b63e2438</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>af6070821655e8abd2054d0248896ed71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a89fd3d7654cbf49a112ee30ebe30a8f4</anchor>
      <arglist>(Dep *other)</arglist>
    </member>
    <member kind="function">
      <type>Dep *</type>
      <name>New</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a27a82cb1d879df26d1cc89f5e10eacc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a26c81c96d8bc499af3e3190127ae4f14</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a8521cee2d2c20cc3374caee792879d24</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a9c5e702a5cafd5a8bdf72ef36d754d27</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>ad104b852e4e4e46eaa50d376b19fe83d</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a1713906a00ff37953c363bdbc07cbd54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>ae39f86aae19b958824fd94b0092e07c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>af27fc8c7ab40a5ad63e3908db600fc5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a2080b72b2b01ff368d85506bfc311e28</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a1c5ffae565cd93485ba1b7de07678efc</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a7085fcc2588e12bc51d92f37682bba3b</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a0574f835da4e18501475c30e0b38ba20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a4385e73adda64a977bae6d3304cd2a66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a7c31851d796bf8cb968b420fd07548cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a32575258e5019204e6f4f53822181528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>aebc1840c3493408ef316d45dec47e1a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a43e73a016a5444b2e9f310eb0e2b671b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a81b4aebd91b63196e503f80b3f1cb5d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a286ffa524525424af7af0c509282b22c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a8b9785a6c223f1dcce0c1a0403bbb1dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a3aa1f026840c0ec1631e4383399309f8</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dep</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a80362e936565b55abb269a18fde4dc59</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Dep &amp;</type>
      <name>operator=</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a87fdb64571ed9949e3fa5acdb9b367f9</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a03cf321c0a637f65d4775ee8b63e2438</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>af6070821655e8abd2054d0248896ed71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a89fd3d7654cbf49a112ee30ebe30a8f4</anchor>
      <arglist>(Dep *other)</arglist>
    </member>
    <member kind="function">
      <type>Dep *</type>
      <name>New</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>add63de81fa6478b899aff7ae37b8dff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a26c81c96d8bc499af3e3190127ae4f14</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a8521cee2d2c20cc3374caee792879d24</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a9c5e702a5cafd5a8bdf72ef36d754d27</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>ad104b852e4e4e46eaa50d376b19fe83d</anchor>
      <arglist>(const Dep &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a1713906a00ff37953c363bdbc07cbd54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>ae39f86aae19b958824fd94b0092e07c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>af27fc8c7ab40a5ad63e3908db600fc5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a2080b72b2b01ff368d85506bfc311e28</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a1c5ffae565cd93485ba1b7de07678efc</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a302a9df44af045d0f56ef4e14ee97816</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a0574f835da4e18501475c30e0b38ba20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>acadc4712c5930d210c03df3d288358a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a7c31851d796bf8cb968b420fd07548cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a32575258e5019204e6f4f53822181528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>aedebdf8b34a2f8f2705c3846e8ea78ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_head</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a43e73a016a5444b2e9f310eb0e2b671b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a81b4aebd91b63196e503f80b3f1cb5d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a286ffa524525424af7af0c509282b22c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a53412c9bbc37fb2f0bbe124f8a131c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mod</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a3aa1f026840c0ec1631e4383399309f8</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>af6a909e7ccf42b8c3b81cd01755a6f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Dep &amp;</type>
      <name>default_instance</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>adb231b00d2868737d7eed4a97c085c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a29bfc132af3268c281ed5b2bfb7e09b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Dep &amp;</type>
      <name>default_instance</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a81ccd4891740b599546e7e52c04ca516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kHeadFieldNumber</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a30b9f1997de8bc996e1b0e1d5220dd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kModFieldNumber</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>acb384371c72fcc36536bdb88a88cd05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_dep_2eproto</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a2e2e426fb93c4aaa0e5b3d0a15899d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_dep_2eproto</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>ae60899dfa8b3c6020f8e19070804c43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_dep_2eproto</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>aab3c3b65c9043a8a41dcb95f310b49e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_dep_2eproto</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>a2e2e426fb93c4aaa0e5b3d0a15899d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_dep_2eproto</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>ae60899dfa8b3c6020f8e19070804c43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_dep_2eproto</name>
      <anchorfile>classDep.html</anchorfile>
      <anchor>aab3c3b65c9043a8a41dcb95f310b49e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dependency</name>
    <filename>structDependency.html</filename>
    <member kind="function">
      <type></type>
      <name>Dependency</name>
      <anchorfile>structDependency.html</anchorfile>
      <anchor>a92ebdf715c4c81e556bc274f86027400</anchor>
      <arglist>(int l, int h, int m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structDependency.html</anchorfile>
      <anchor>a38ba361a116c72f4e41298b6320a6540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>head</name>
      <anchorfile>structDependency.html</anchorfile>
      <anchor>ae50c91ea1c7f2a16a29e7ecf9cf0a6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mod</name>
      <anchorfile>structDependency.html</anchorfile>
      <anchor>a45e806cfc00a3bcce4d5ebaab52c1f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>structDependency.html</anchorfile>
      <anchor>a95f049533781d9ae8fea8f447e4739fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DepParser</name>
    <filename>classDepParser.html</filename>
    <base>Scarab::HG::HypergraphImpl</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>a9aebbbde821bad423b6c01cc12f02a2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_up</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>a6131e95a8ec7b07f7a4d68dae224d52f</anchor>
      <arglist>(const Hypergraph &amp;hgraph)</arglist>
    </member>
    <member kind="function">
      <type>const Hypergraph &amp;</type>
      <name>hypergraph</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>aaec31758432c2d3336d2164996571688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Dependency &gt;</type>
      <name>dependencies</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>aa64f67830bf4c3bf9936ba6056dfdff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_deps</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>aaff55cf38fd9b1fbfb22090ddeb72ba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>sent_length</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>a86b99d09d76b7d6f8733b208e9f32822</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dependency</type>
      <name>make_dep</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>a49afcb1a83a3c924869faf34cd9e968e</anchor>
      <arglist>(int head, int mod) const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; const Hyperedge * &gt; &amp;</type>
      <name>dep_to_edge</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>a9fa2f0bf24cd870404f0a99b5926c558</anchor>
      <arglist>(const Dependency &amp;dep) const </arglist>
    </member>
    <member kind="function">
      <type>const Dependency &amp;</type>
      <name>edge_to_dep</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>aa5ff87f99326c60633fb8e26d1737776</anchor>
      <arglist>(const Hyperedge &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edge_has_dep</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>abd0b9171e59c1c40cdb58807a46a5449</anchor>
      <arglist>(const Hyperedge &amp;edge) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>make_edge</name>
      <anchorfile>classDepParser.html</anchorfile>
      <anchor>a04d313d931d1e8b0bac3a36ca7be469b</anchor>
      <arglist>(const Hypergraph_Edge &amp;edge, const Scarab::HG::Hyperedge *our_edge)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DualDecomposition</name>
    <filename>classDualDecomposition.html</filename>
    <member kind="function">
      <type></type>
      <name>DualDecomposition</name>
      <anchorfile>classDualDecomposition.html</anchorfile>
      <anchor>a652c2229bad83ce7b135aa06ef1283a5</anchor>
      <arglist>(DualDecompositionSubproblem &amp;s1, DualDecompositionSubproblem &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classDualDecomposition.html</anchorfile>
      <anchor>a0013544261cba254dc2ca2c68cbb1679</anchor>
      <arglist>(int example)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DualDecompositionRunner</name>
    <filename>classDualDecompositionRunner.html</filename>
    <base>SubgradientProducer</base>
    <member kind="function">
      <type></type>
      <name>DualDecompositionRunner</name>
      <anchorfile>classDualDecompositionRunner.html</anchorfile>
      <anchor>ad0af4c8b1a73612770d329cf560af9d1</anchor>
      <arglist>(DualDecompositionSubproblem &amp;s1, DualDecompositionSubproblem &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classDualDecompositionRunner.html</anchorfile>
      <anchor>a4bcec895359acf32000d42155c4593ef</anchor>
      <arglist>(double &amp;primal, double &amp;dual, wvector &amp;subgrad, int round, bool is_stuck, bool &amp;bump_rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_weights</name>
      <anchorfile>classDualDecompositionRunner.html</anchorfile>
      <anchor>a3cdf7ce33f6454f9fee9fb9c3287c5ac</anchor>
      <arglist>(const wvector &amp;updates, wvector *weights)</arglist>
    </member>
    <member kind="variable">
      <type>DualDecompositionSubproblem &amp;</type>
      <name>_sub_producer1</name>
      <anchorfile>classDualDecompositionRunner.html</anchorfile>
      <anchor>a13371fbf1e5109e8a9d920d2ed0b7bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DualDecompositionSubproblem &amp;</type>
      <name>_sub_producer2</name>
      <anchorfile>classDualDecompositionRunner.html</anchorfile>
      <anchor>a988b68df84c131bc47d142ae8638fbd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DualDecompositionSubproblem</name>
    <filename>classDualDecompositionSubproblem.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classDualDecompositionSubproblem.html</anchorfile>
      <anchor>aac234786c13091898be348dc0056a036</anchor>
      <arglist>(double &amp;primal, double &amp;dual, wvector &amp;, int)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update_weights</name>
      <anchorfile>classDualDecompositionSubproblem.html</anchorfile>
      <anchor>a6d26fcb23023d5b03d54b3d191531b02</anchor>
      <arglist>(const wvector &amp;updates, wvector *weights, double mult)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EisnerNode</name>
    <filename>structEisnerNode.html</filename>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>structEisnerNode.html</anchorfile>
      <anchor>a38fe91d99e35e7d8a6bda3c1bb45f3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EisnerNode</name>
      <anchorfile>structEisnerNode.html</anchorfile>
      <anchor>a16b4c3b130c5cacf4639fb8fc01d1894</anchor>
      <arglist>(Span ns, Direction d_in, Shape s_in)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structEisnerNode.html</anchorfile>
      <anchor>a8ede91dac02b136ef673afbb68566623</anchor>
      <arglist>(const EisnerNode &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Span</type>
      <name>node_span</name>
      <anchorfile>structEisnerNode.html</anchorfile>
      <anchor>a1e3b0f200089af99ca744d6d0a9c7f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Direction</type>
      <name>d</name>
      <anchorfile>structEisnerNode.html</anchorfile>
      <anchor>a0013abe4607fb7979aa1d915a58868a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Shape</type>
      <name>s</name>
      <anchorfile>structEisnerNode.html</anchorfile>
      <anchor>a682edd0712304525c84939b820a141d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EisnerToHypergraph</name>
    <filename>classEisnerToHypergraph.html</filename>
    <member kind="function">
      <type></type>
      <name>EisnerToHypergraph</name>
      <anchorfile>classEisnerToHypergraph.html</anchorfile>
      <anchor>ac4c11a966298244ad74965dd35596c4c</anchor>
      <arglist>(const vector&lt; int &gt; &amp;sent, vector&lt; vector&lt; vector&lt; double &gt; &gt; &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convert</name>
      <anchorfile>classEisnerToHypergraph.html</anchorfile>
      <anchor>a8344d534c1b3d5f2795578c771fe4d31</anchor>
      <arglist>(Hypergraph &amp;_forest)</arglist>
    </member>
    <member kind="variable">
      <type>Hypergraph</type>
      <name>hgraph</name>
      <anchorfile>classEisnerToHypergraph.html</anchorfile>
      <anchor>a47df02a8804876cc0e33b55681b9a2f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Forest</name>
    <filename>classForest.html</filename>
    <base>Scarab::HG::HypergraphImpl</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classForest.html</anchorfile>
      <anchor>a621a1a65d0f877bb33b15c79f9e24c4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_end_nodes</name>
      <anchorfile>classForest.html</anchorfile>
      <anchor>a4cc0cf94c18913eadd0b36f3dcf68cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Forest</type>
      <name>from_file</name>
      <anchorfile>classForest.html</anchorfile>
      <anchor>a1b9ddc0e03c1ccfcc73987fe9378fa84</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scarab::HG::Hypernode *</type>
      <name>make_node</name>
      <anchorfile>classForest.html</anchorfile>
      <anchor>ab40070ea9e3885d252fb7848c11f27ef</anchor>
      <arglist>(const Hypergraph_Node &amp;node, wvector *features)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForestLattice</name>
    <filename>classForestLattice.html</filename>
    <member kind="function">
      <type>string</type>
      <name>get_word</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>ad14bc799ac36b716c292f410e1609462</anchor>
      <arglist>(int word_num) const </arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>get_graph</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a8303ce943210d4a62132f1e4054b7191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graphnode &amp;</type>
      <name>node</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a744558d8489b4428c44275f0966d587e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_phrase_node</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a8afba92a7fb437a93db30b2336ad3824</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_word</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a9d82493dff97186334923b582999f63c</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForestLattice</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a9ecaabd3e59148b28b3fad096806f9e9</anchor>
      <arglist>(const Lattice &amp;lattice)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_edge</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a981af70e7207ece0e3454251b64fb6fa</anchor>
      <arglist>(int n1, int edge_num) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_edges</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a142184cf6e8d4275923774edbca97f5d</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup_word</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a3921d0378a94ef040246dc87e60df1c7</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_edge_label</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a92e37fd15cd36ae5c9d0e3fe309d876e</anchor>
      <arglist>(int n1, int n2) const </arglist>
    </member>
    <member kind="function">
      <type>Bigram</type>
      <name>get_nodes_by_labels</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a2474198bedc98ef2e3c8a02ebae14f00</anchor>
      <arglist>(int orig_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_first_words</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a6fe3508e7fd7d62b44c423dcc113881b</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_last_words</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>ae6c29306adee71cca87bb2dc2c1047df</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>num_last_bigrams</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a7fcb5b75caf3d4e17b782849fc847ec9</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>first_words</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a3b8e0f2d304ad0d9b10d9efb79d7905c</anchor>
      <arglist>(int n, int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>last_words</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a9af5d9ea84e0638599d13c5f78868d92</anchor>
      <arglist>(int n, int i) const </arglist>
    </member>
    <member kind="function">
      <type>Bigram</type>
      <name>last_bigrams</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a3332ad66005be68e6ac38d7daa40bb9d</anchor>
      <arglist>(int n, int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_same</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a4da765944fa6d5892786ca592ef8c859</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hypergraph_node_from_word</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a01fa72075f1de8421dd21e15540ce5c0</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_word_from_hypergraph_node</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a226887bedd13a3f3dc5cbe91242bd17a</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_proper_graph</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a8f474062475f4d272a8d8b676cdd0118</anchor>
      <arglist>(const Lattice &amp;lat)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_nodes</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a3c194341d2a88457604e0042534358fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_word_nodes</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>af7ac8b02750f52523a49b5b810e36601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>final</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>ab0e2ec92e11ab7d77e33c109f2451d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a95785401e57ddbcc516116f59391a7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; int &gt; &gt;</type>
      <name>original_edges</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a2a0ccc16eaa3f83ae395c825c8bcf583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; int &gt; &gt;</type>
      <name>edges_original</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>af55e45f3503fafeb79ef53d25abfc78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; Bigram &gt; &gt;</type>
      <name>bigrams_at_node</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>ac38a1f457fae9f29fab0b922dd8b5b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; string &gt;</type>
      <name>_edge_label_by_nodes</name>
      <anchorfile>classForestLattice.html</anchorfile>
      <anchor>a80b60a05f3f81f4291b1989baf240cf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForestNode</name>
    <filename>classForestNode.html</filename>
    <base>Scarab::HG::HypernodeImpl</base>
    <member kind="function">
      <type></type>
      <name>ForestNode</name>
      <anchorfile>classForestNode.html</anchorfile>
      <anchor>aeeb649eef15a82d283ae728b0a44d183</anchor>
      <arglist>(const string &amp;label, int id, str_vector *features, string word, bool is_word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_word</name>
      <anchorfile>classForestNode.html</anchorfile>
      <anchor>ab44af8003df7af0ce93b9b904301fb92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>word</name>
      <anchorfile>classForestNode.html</anchorfile>
      <anchor>a18c00f9aae93bc963358e488f2cce308</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphDecompose</name>
    <filename>classGraphDecompose.html</filename>
    <member kind="function">
      <type>void</type>
      <name>decompose</name>
      <anchorfile>classGraphDecompose.html</anchorfile>
      <anchor>a671b195e2a0eff48eeefcee64d40fcb1</anchor>
      <arglist>(const ForestLattice *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_exists</name>
      <anchorfile>classGraphDecompose.html</anchorfile>
      <anchor>a8e85b51d78e6bd961bbff6d121399ba7</anchor>
      <arglist>(int w1, int w2) const </arglist>
    </member>
    <member kind="function">
      <type>vector&lt; int &gt; *</type>
      <name>get_path</name>
      <anchorfile>classGraphDecompose.html</anchorfile>
      <anchor>a48e47d62512330c280ed8a89bafe3e10</anchor>
      <arglist>(int w1, int w2) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Bigram &gt;</type>
      <name>valid_bigrams</name>
      <anchorfile>classGraphDecompose.html</anchorfile>
      <anchor>afbeb52935da971f4bc27f0e80ed48d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; int &gt; &gt;</type>
      <name>forward_bigrams</name>
      <anchorfile>classGraphDecompose.html</anchorfile>
      <anchor>aca254d25cf0f2d2ad0d58a5775a297a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; int &gt; &gt;</type>
      <name>backward_bigrams</name>
      <anchorfile>classGraphDecompose.html</anchorfile>
      <anchor>a2b5c495d7725ccd63c0c3d2590ebd1e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GraphProtoInterface</name>
    <filename>classGraphProtoInterface.html</filename>
    <member kind="function">
      <type>void</type>
      <name>build_from_file</name>
      <anchorfile>classGraphProtoInterface.html</anchorfile>
      <anchor>a4845501ec86ea627ce484cd78162c84c</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>process_node</name>
      <anchorfile>classGraphProtoInterface.html</anchorfile>
      <anchor>a0dbd0905dbab167b9293d0ef32409af3</anchor>
      <arglist>(graph::Graph_Node, Graphnode *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>process_edge</name>
      <anchorfile>classGraphProtoInterface.html</anchorfile>
      <anchor>a3178c5f1eff8ed61d2512af8522cc550</anchor>
      <arglist>(graph::Graph_Edge, Graphedge *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_up</name>
      <anchorfile>classGraphProtoInterface.html</anchorfile>
      <anchor>a8b3125379c7b2bbf832b6b955496b76e</anchor>
      <arglist>(graph::Graph, int, int)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>graph</name>
      <anchorfile>classGraphProtoInterface.html</anchorfile>
      <anchor>a920e88785192db805206c875a8a3feed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Graph *</type>
      <name>_graph</name>
      <anchorfile>classGraphProtoInterface.html</anchorfile>
      <anchor>a8e262de0a3f65eaa20e5c528363bbb2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HardConstraints</name>
    <filename>classHardConstraints.html</filename>
    <member kind="function">
      <type>void</type>
      <name>read_from_file</name>
      <anchorfile>classHardConstraints.html</anchorfile>
      <anchor>ad457a78e966e6ce3d71bfb3401b0300b</anchor>
      <arglist>(string file_name)</arglist>
    </member>
    <member kind="function">
      <type>GRBLinExpr</type>
      <name>make_lin_expr</name>
      <anchorfile>classHardConstraints.html</anchorfile>
      <anchor>a923f4ddd8b164d924147c22f054a9c7e</anchor>
      <arglist>(const vector&lt; DepParserLP * &gt; &amp;lp_vars, const PossibleDep &amp;dep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_results</name>
      <anchorfile>classHardConstraints.html</anchorfile>
      <anchor>a0945fb67209be1cc95b31522d96e51cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_lp</name>
      <anchorfile>classHardConstraints.html</anchorfile>
      <anchor>a71ae98e67f5e5d3035aff1c2ef941a92</anchor>
      <arglist>(const vector&lt; DepParserLP * &gt; &amp;lp_vars, GRBModel &amp;model)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; PossibleDep &gt; &gt;</type>
      <name>_constraint_struct</name>
      <anchorfile>classHardConstraints.html</anchorfile>
      <anchor>ae0305e95d8065eb186ccae220b8e16f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; GRBVar &gt;</type>
      <name>group_used</name>
      <anchorfile>classHardConstraints.html</anchorfile>
      <anchor>a6b370ae5376bf283115092ab4bd33743</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HardPosConstraintsLP</name>
    <filename>classHardPosConstraintsLP.html</filename>
    <member kind="function">
      <type></type>
      <name>HardPosConstraintsLP</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>a2979e37eb163b00f48a38ee8fccd1a64</anchor>
      <arglist>(const TagConstraints &amp;constraints, double penalty)</arglist>
    </member>
    <member kind="function">
      <type>GRBLinExpr</type>
      <name>make_lin_expr</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>aa841ffcec001c0ee31714d0d39027c26</anchor>
      <arglist>(const vector&lt; TagLP * &gt; &amp;lp_vars, const PossibleTag &amp;tag, POS restricted_to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_lp</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>a7a7bb0c41351c9de3130045f0013c67b</anchor>
      <arglist>(const vector&lt; TagLP * &gt; &amp;lp_vars, GRBModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_results</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>a4307bcde1a701018736de348a718262b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; GRBVar &gt; &gt;</type>
      <name>group_used</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>a16ba65107e587a8cb43cc10949b0ebcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt;</type>
      <name>slacks_pos</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>ad3b98e9e78140b02098420c674fcbaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt;</type>
      <name>slacks_neg</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>ac758c0971f82ef892f7f708db15bf472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set&lt; int &gt;</type>
      <name>groups</name>
      <anchorfile>classHardPosConstraintsLP.html</anchorfile>
      <anchor>aa5c46efababe8dd5282a71ceb233c548</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Hyp</name>
    <filename>structHyp.html</filename>
    <member kind="function">
      <type></type>
      <name>Hyp</name>
      <anchorfile>structHyp.html</anchorfile>
      <anchor>a5fba7860265cf935133e4c0c73fec090</anchor>
      <arglist>(double score_in, Sig sig_in, vector&lt; int &gt; full_der)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structHyp.html</anchorfile>
      <anchor>a547883a1aa9a7573d328d0f6b385dca8</anchor>
      <arglist>(const Hyp &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>structHyp.html</anchorfile>
      <anchor>a7d24c5a317140b8050dc57255bb7922a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Sig</type>
      <name>sig</name>
      <anchorfile>structHyp.html</anchorfile>
      <anchor>a4aa96a03dc6b82416074985e0ecd39c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>full_derivation</name>
      <anchorfile>structHyp.html</anchorfile>
      <anchor>a076825f81d94a1f2b20bb5141eb9f4c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hypergraph</name>
    <filename>classHypergraph.html</filename>
    <member kind="typedef">
      <type>Hypergraph_Node</type>
      <name>Node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a36c26b747a86e20cc9e7b0ce733fe38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Hypergraph_Edge</type>
      <name>Edge</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a8161caf487c105fff5e3ffd589ed176f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Hypergraph_Node</type>
      <name>Node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a36c26b747a86e20cc9e7b0ce733fe38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Hypergraph_Edge</type>
      <name>Edge</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a8161caf487c105fff5e3ffd589ed176f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hypergraph</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aa5b69fea3073cbbc6230c403aba60a13</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a6fa4366f554df3ffd7aa3694a3612006</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a20ec2be2fda0e1db366f26c95817cd89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a423987a46404cd3221a5c4035050b4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ac4a85460aabebe97e0411a30d80f720d</anchor>
      <arglist>(Hypergraph *other)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph *</type>
      <name>New</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aed1ca8c3f4626f4313cd7e1b1ebf2676</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a344289a1a02daaa7e9bb2284507bc25b</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a4aafea60a0bf75fe2c2f66172101110b</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a4715ac922c373c335985c25f9766a526</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a5e48c533c90271a6e018a26ac8a70538</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a3377b5de90d222621cc41c2c41b7865d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a5327b9372e5dd8dd4e435b160e5f16df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ab4aa8a83cd1da71a9f31bdad594ffaf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a30583bfba242ae1439903bc24d069e24</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a7e8e7f4fe037cbfeb1f0a46e7616fc78</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a4d695da7efbbcc2444fb1836e88d8849</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a34d579551c68eb5e039062269f875522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a5e8ebd56fb4cdfcaa19b9aa43cf25fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ab92016742525abd273fb96859b586bed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a2404b1cf118c4511b17748d23a51f9c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ac8ba37cfa01a25ccd5f67b82122c359d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aa3a2d6876af145d4ccf600dbcfb2446d</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_size</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ac07666e8012c320a265bb25842fa7238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a85cd3d3e06c7cb448d1a1059f09f1b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::Hypergraph_Node &amp;</type>
      <name>node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ad2bd2578cecd21f60bf6592318a2770f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Node *</type>
      <name>mutable_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ae434b3b5045260dd0c085fd7bbf17469</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Node *</type>
      <name>add_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a919f27df68d64f067227cbeacc863a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Node &gt; &amp;</type>
      <name>node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aec184e2ac51df4d3fe07b75eb401a7fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Node &gt; *</type>
      <name>mutable_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a837f81cd9e9f3e5832e166ba2520b445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hypergraph</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aa5b69fea3073cbbc6230c403aba60a13</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph &amp;</type>
      <name>operator=</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a6fa4366f554df3ffd7aa3694a3612006</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a20ec2be2fda0e1db366f26c95817cd89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a423987a46404cd3221a5c4035050b4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ac4a85460aabebe97e0411a30d80f720d</anchor>
      <arglist>(Hypergraph *other)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph *</type>
      <name>New</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a9b21d571070e88fe8ed3f6751e495b04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a344289a1a02daaa7e9bb2284507bc25b</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a4aafea60a0bf75fe2c2f66172101110b</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a4715ac922c373c335985c25f9766a526</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a5e48c533c90271a6e018a26ac8a70538</anchor>
      <arglist>(const Hypergraph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a3377b5de90d222621cc41c2c41b7865d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a5327b9372e5dd8dd4e435b160e5f16df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ab4aa8a83cd1da71a9f31bdad594ffaf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a30583bfba242ae1439903bc24d069e24</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a7e8e7f4fe037cbfeb1f0a46e7616fc78</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a86e069313a6ce786d6578d4fa416dd39</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a34d579551c68eb5e039062269f875522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>af2886402d4f2114b650696ce2e53f860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ab92016742525abd273fb96859b586bed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a2404b1cf118c4511b17748d23a51f9c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>af86203cfb1b5ddbbd58cab35cc02b8c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_root</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aa3a2d6876af145d4ccf600dbcfb2446d</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_size</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ac07666e8012c320a265bb25842fa7238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a85cd3d3e06c7cb448d1a1059f09f1b5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::Hypergraph_Node &amp;</type>
      <name>node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a72db8343ef7ab67b8cfbfffd7c83d472</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Node *</type>
      <name>mutable_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a6b45e9545d78b8cf17637b6ef71baa60</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Node *</type>
      <name>add_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>abdaf30271c29d8d61c7e2fe77a392b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Node &gt; &amp;</type>
      <name>node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a07d32ac4f217954bc033d6a304445408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Node &gt; *</type>
      <name>mutable_node</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a4ea0dbf6904be58bd8afc24ee7acb57d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aa234b49896c08a611c8088504cd0db60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Hypergraph &amp;</type>
      <name>default_instance</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a370708c0a37cbf8e847a34880519e872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ab26f2bbcbb6ce99b3bbb1a210cdfcd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Hypergraph &amp;</type>
      <name>default_instance</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>ad44f1245d88fb5a3c542f7c1d7081390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kRootFieldNumber</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a2e8f834b9b2c946dc1c7bdaded177a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNodeFieldNumber</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a2d9dea1733d42814b38878cd7e93195f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aed4781a70bb54c95ce4bb1aa4f20b05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a3cbaa41d7f7b73db437c4e7d1edcb4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_hypergraph_2eproto</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a424acd7e96228bbed0dba9436582d3c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>aed4781a70bb54c95ce4bb1aa4f20b05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a3cbaa41d7f7b73db437c4e7d1edcb4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_hypergraph_2eproto</name>
      <anchorfile>classHypergraph.html</anchorfile>
      <anchor>a424acd7e96228bbed0dba9436582d3c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hypergraph_Edge</name>
    <filename>classHypergraph__Edge.html</filename>
    <member kind="function">
      <type></type>
      <name>Hypergraph_Edge</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab108838f9bbf8f03991f762393082d85</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Edge &amp;</type>
      <name>operator=</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a16e449f104fcdc9762db9654f7b4ccc2</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a423eb7f720ca17f4d8f061cdeb4bff1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab421c0d9bbba2cb1f190e7f2c9e13390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a6042bf2bb2b6a7446926d17ea1b8fe1f</anchor>
      <arglist>(Hypergraph_Edge *other)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Edge *</type>
      <name>New</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a72031ccebc2408f95003ccbc9aa0dce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a0f781d1a4bdef9ac8d60e93a5f7c2ec3</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a10b898c3321b1dc37977b452ac8e6f0e</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a63ed56813c060988bc61a35ea30d216e</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a193be9b1c77ac3c955bedfd14581b88a</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a111b4c380a219239ea99a0803b1160b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a635fda95ae632d07889b53588d4352bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a98114bd535825d90c7e28499f957c0f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aef6ab2097154d0ac22d50d0159f5610a</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ac3aba45b607957f38bc9cc9eab5ef614</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ae571e4f1004a66a0f3cb54a0fbf04608</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a12e12d0b2dd6cdef346503d296212b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a89afc8510b3b7036f60ee5be4097d3bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab61c31eb6cebfa93563cb56d9ed9ff2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ac71a7453a09a1a58c8af5610262ea3c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a011d98e82e8e79d67dbb7c25c7820ac7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aca975a3bf171d59750fd4b98093ca103</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>adb9a524ad44cc07404897580e031bee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a1f557b9a07d90c3c327b4df5e648a77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ae23b73d3c1452cce5b98d3e83bf8d2cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aa2bf7284766e49962c3a6cba6d8495cc</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>abd03f3020632e7d2fedae16116853e55</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>adb4ad80e1805c7355ad9aad07bdddff7</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a2906f358190374e1fe8c2eef1bfe99a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a9fc2fad1c4d62a579bf3b149fe4312d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tail_node_ids_size</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab4a326ca4b060c3a3b96356875615274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a7bca4b7aa0ddb3c3db383cf4f9ae4010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a89405905c2031e169625ffcd7f61d46f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aff9ace3fb27f13d171ae18139cd01784</anchor>
      <arglist>(int index,::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ad94f1a04bf6815d17ca4121ff6770bee</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a28559493dc288cd24e970ab2ff43906a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a80b009f10f4dd634d437ae740ed6971d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hypergraph_Edge</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab108838f9bbf8f03991f762393082d85</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Edge &amp;</type>
      <name>operator=</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a16e449f104fcdc9762db9654f7b4ccc2</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a423eb7f720ca17f4d8f061cdeb4bff1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab421c0d9bbba2cb1f190e7f2c9e13390</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a6042bf2bb2b6a7446926d17ea1b8fe1f</anchor>
      <arglist>(Hypergraph_Edge *other)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Edge *</type>
      <name>New</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a262998f991bd7d5e69fe7b249995e321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a0f781d1a4bdef9ac8d60e93a5f7c2ec3</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a10b898c3321b1dc37977b452ac8e6f0e</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a63ed56813c060988bc61a35ea30d216e</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a193be9b1c77ac3c955bedfd14581b88a</anchor>
      <arglist>(const Hypergraph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a111b4c380a219239ea99a0803b1160b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a635fda95ae632d07889b53588d4352bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a98114bd535825d90c7e28499f957c0f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aef6ab2097154d0ac22d50d0159f5610a</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ac3aba45b607957f38bc9cc9eab5ef614</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a3ff2b66a692e1e8cdab7b39a9f484580</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a12e12d0b2dd6cdef346503d296212b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a63a77d17052b9e5b41fda81799d65727</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab61c31eb6cebfa93563cb56d9ed9ff2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ac71a7453a09a1a58c8af5610262ea3c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>acb1ff802d04e580c3f35967b99226df4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aca975a3bf171d59750fd4b98093ca103</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>adb9a524ad44cc07404897580e031bee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a1f557b9a07d90c3c327b4df5e648a77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ac9af681c7620d1c810047b4d7ee9012e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aa2bf7284766e49962c3a6cba6d8495cc</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>abd03f3020632e7d2fedae16116853e55</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>adb4ad80e1805c7355ad9aad07bdddff7</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a12f6b0a4404d8e64abc0ae29f0145db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a3a32715f4a9f4eaf3f15b7fabe45df69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tail_node_ids_size</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab4a326ca4b060c3a3b96356875615274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a7bca4b7aa0ddb3c3db383cf4f9ae4010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aa6efe64d446630db07b2536a0366c92f</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aff9ace3fb27f13d171ae18139cd01784</anchor>
      <arglist>(int index,::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ad94f1a04bf6815d17ca4121ff6770bee</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab2aed597bf14531310d8b8a7383d54cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_tail_node_ids</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a561c8d91a2f2456595236252a966cf54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ab49ca70a823b9f46cc00824eb4b33010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Hypergraph_Edge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a1895c8b4750047a016232c5c9cf8ad09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a4f7ad83705462267c157231c62ca4e9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Hypergraph_Edge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>af42a82988e991869b1b6e7831eeea7a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a3ef9526f4e83b7d3b6e84b53869823ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>ae0a899443488a0d046a4ccdef8f86443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTailNodeIdsFieldNumber</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a93fa914d403a510e5b9e14fa529e5b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aed4781a70bb54c95ce4bb1aa4f20b05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a3cbaa41d7f7b73db437c4e7d1edcb4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a424acd7e96228bbed0dba9436582d3c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>aed4781a70bb54c95ce4bb1aa4f20b05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a3cbaa41d7f7b73db437c4e7d1edcb4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Edge.html</anchorfile>
      <anchor>a424acd7e96228bbed0dba9436582d3c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hypergraph_Node</name>
    <filename>classHypergraph__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Hypergraph_Node</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a8ff695bda4b12b720c6e45120843afa8</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1c63124309d4c21c6f504de32472e6f4</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a5b1f1c8523851547fc23b811b9b3c983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ad121adb128167ce797c6dd576956cdc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a2436a5b49db8259590088f9a8024d77b</anchor>
      <arglist>(Hypergraph_Node *other)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Node *</type>
      <name>New</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a93539f0390f6e4c4014b096d5dcf9226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aca80a723aabad833f58bce2e69cfa1fc</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a86b37cd7bd563958a5854440ecacfd78</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a7cbc530171a8036783952f6dc56c5c67</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a459f2e561a40bd7fd3222b73dda89d8d</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>acc9fbbcc5ad55e598d95757849bf02d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ade66b64dfb3992afdb22a539e093480a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a7b0650e4259ade4af4f4199339084c9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1a8a82dd55ff8a347d315b1656a56c3f</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aef948b6f1a9433485edd286239868600</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a0aadc6849d483bd27ede9c9af7606660</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a14df9df1b19f6ed7206b1dfebc26275c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>afc2a4dbb510625e5cfeebea3bc24241f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a03948ce16292afc79b22e9cef19450dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1dd46c4a058b9bfacb9ce67d2a11cc2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ad9c9a16e55b9bacf926fa8327ccf23ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a5158aef822156d683336b2bd6518f8bc</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a3cd57640052ed3ccb7bd7eab8f91f72e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a27e0932d383a3918d07c0a720e9a707e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ad24290b7055eb41f6f4c9c3fc3f3525f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a0b3e0c5f812f166f00ea615b5ba9ce54</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a7b48964a1cf2a5d8964873751733b217</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a9838f053ff36a98ce5050537c5c5ff1b</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a0b775852c7e02969bc6b738a16651a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a583e023c7c478a1cab101fed2489c1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_size</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a444e336785528842df37d3279b61e646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a8148d16453c80519f253274f3a6a5cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::Hypergraph_Edge &amp;</type>
      <name>edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aacc6c349a490d2d7c6c5ce9e23dac2d7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Edge *</type>
      <name>mutable_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ab246b20946afc1d6f06b10dfd24e32f1</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Edge *</type>
      <name>add_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a5ef0cdc2d70ca1da672a6301641b5452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Edge &gt; &amp;</type>
      <name>edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a9b9a2557260be3ff3b47f04d8777ed80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Edge &gt; *</type>
      <name>mutable_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>abf50623da78a6e34227f129f89c1ecbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hypergraph_Node</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a8ff695bda4b12b720c6e45120843afa8</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1c63124309d4c21c6f504de32472e6f4</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a5b1f1c8523851547fc23b811b9b3c983</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ad121adb128167ce797c6dd576956cdc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a2436a5b49db8259590088f9a8024d77b</anchor>
      <arglist>(Hypergraph_Node *other)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph_Node *</type>
      <name>New</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ac5023f5fe7642cd4919282002101b69e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aca80a723aabad833f58bce2e69cfa1fc</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a86b37cd7bd563958a5854440ecacfd78</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a7cbc530171a8036783952f6dc56c5c67</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a459f2e561a40bd7fd3222b73dda89d8d</anchor>
      <arglist>(const Hypergraph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>acc9fbbcc5ad55e598d95757849bf02d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ade66b64dfb3992afdb22a539e093480a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a7b0650e4259ade4af4f4199339084c9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1a8a82dd55ff8a347d315b1656a56c3f</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aef948b6f1a9433485edd286239868600</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a4b377b386242677d120b4845aa6561ef</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a14df9df1b19f6ed7206b1dfebc26275c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1b43ba0525cd31c2f33c902f978a7ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a03948ce16292afc79b22e9cef19450dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a1dd46c4a058b9bfacb9ce67d2a11cc2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a3e7018a35f99c2865d95322b0ec7ac4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a5158aef822156d683336b2bd6518f8bc</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a3cd57640052ed3ccb7bd7eab8f91f72e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a27e0932d383a3918d07c0a720e9a707e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ae055ea4c0fa2d178c58969d36846850a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a0b3e0c5f812f166f00ea615b5ba9ce54</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a7b48964a1cf2a5d8964873751733b217</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a9838f053ff36a98ce5050537c5c5ff1b</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a4f18ad8fd086fe65568514a0ad2d2bda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a64844aa6ea220f1bc99a66236171ca85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_size</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a444e336785528842df37d3279b61e646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a8148d16453c80519f253274f3a6a5cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::Hypergraph_Edge &amp;</type>
      <name>edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ad1977037e1e9dbf52400a43db4617814</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Edge *</type>
      <name>mutable_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a83374115326fc7d5161bd7b785e93aa7</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::Hypergraph_Edge *</type>
      <name>add_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a9091d554b8ffa84279859974220c1e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Edge &gt; &amp;</type>
      <name>edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a8bcc9f22da4f01c9b231e46c5fe18345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::Hypergraph_Edge &gt; *</type>
      <name>mutable_edge</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aade5e0d2caa34c230b34dc4a1af468bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ade18e8c34270334ea2efbdb51c98f8ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Hypergraph_Node &amp;</type>
      <name>default_instance</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aadf2ad399be5fa4ac268a46e73a2fe0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>af8c74ba69c3a67dc7ef5f1ba816a7f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Hypergraph_Node &amp;</type>
      <name>default_instance</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a938861e0ccae279a5df0c0eb7364c423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a02f37c3292bd8fabd0ba4a19361af78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ad231ad3931e876829c3cf9d3c139d862</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEdgeFieldNumber</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>ab2407c760d8d8d60fa85583555b6f652</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aed4781a70bb54c95ce4bb1aa4f20b05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a3cbaa41d7f7b73db437c4e7d1edcb4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a424acd7e96228bbed0dba9436582d3c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>aed4781a70bb54c95ce4bb1aa4f20b05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a3cbaa41d7f7b73db437c4e7d1edcb4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_hypergraph_2eproto</name>
      <anchorfile>classHypergraph__Node.html</anchorfile>
      <anchor>a424acd7e96228bbed0dba9436582d3c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HypergraphTools</name>
    <filename>classHypergraphTools.html</filename>
    <member kind="function">
      <type>void</type>
      <name>viterbi</name>
      <anchorfile>classHypergraphTools.html</anchorfile>
      <anchor>a188643770705ed9482616956e22ebfd4</anchor>
      <arglist>(HGraph g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LMNonLocal</name>
    <filename>classLMNonLocal.html</filename>
    <base>NonLocal</base>
    <member kind="function">
      <type></type>
      <name>LMNonLocal</name>
      <anchorfile>classLMNonLocal.html</anchorfile>
      <anchor>a7a6000f6118f1c8df727fac29c849b58</anchor>
      <arglist>(const HGraph &amp;forest, Ngram &amp;lm, const Cache&lt; Hypernode, int &gt; &amp;word_cache)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classLMNonLocal.html</anchorfile>
      <anchor>a2d14ca694dc6d49ce6e2b80622aafd51</anchor>
      <arglist>(const Hyperedge &amp;edge, const vector&lt; vector&lt; int &gt; &gt; &amp;subder, double &amp;score, vector&lt; int &gt; &amp;full_derivation, vector&lt; int &gt; &amp;sig) const </arglist>
    </member>
    <member kind="function">
      <type>Hyp</type>
      <name>initialize</name>
      <anchorfile>classLMNonLocal.html</anchorfile>
      <anchor>a93334d873bfe91d5357cbec933ec3ae9</anchor>
      <arglist>(const Hypernode &amp;node) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LocalHyperedge</name>
    <filename>structLocalHyperedge.html</filename>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>tail_node_ids</name>
      <anchorfile>structLocalHyperedge.html</anchorfile>
      <anchor>a94cbc62434996702ca1d0e28b6dde622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>head</name>
      <anchorfile>structLocalHyperedge.html</anchorfile>
      <anchor>a71c8831cc00fefbfb29575856a22fc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weight</name>
      <anchorfile>structLocalHyperedge.html</anchorfile>
      <anchor>a875e26d7749b13e387b7f0978a4f97a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>label</name>
      <anchorfile>structLocalHyperedge.html</anchorfile>
      <anchor>ae1b43e113b237128ed95691034ec715e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalTestSuite</name>
    <filename>classLocalTestSuite.html</filename>
  </compound>
  <compound kind="class">
    <name>MRF</name>
    <filename>classMRF.html</filename>
    <base>GraphProtoInterface</base>
    <member kind="function">
      <type>void</type>
      <name>process_node</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a3a2f7eb349a7345abfba2c5869f85b1f</anchor>
      <arglist>(graph::Graph_Node, Graphnode *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>process_edge</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>aed7b8a7a2e3af7c14b501040630e9589</anchor>
      <arglist>(graph::Graph_Edge, Graphedge *)</arglist>
    </member>
    <member kind="function">
      <type>Hypergraph *</type>
      <name>build_hypergraph</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a34f0d586337501d668a62726eb0046d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_up</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a928f19f948fa97796462fd9542a985fd</anchor>
      <arglist>(graph::Graph graph, int nodes, int edges)</arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>node_pot</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a3a7f11091d96ab8b2f830deb343fc3a6</anchor>
      <arglist>(const Graphnode &amp;node, const State &amp;s1) const </arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>has_edge_pot</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>ab73d5f7b51c206754bee9eea9405c0fb</anchor>
      <arglist>(const Graphedge &amp;edge, const State &amp;s1, const State &amp;s2) const </arglist>
    </member>
    <member kind="function">
      <type>const double</type>
      <name>edge_pot</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a9f98956295352e9bfc9917328999c1b2</anchor>
      <arglist>(const Graphedge &amp;edge, const State &amp;s1, const State &amp;s2) const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; State &gt; &amp;</type>
      <name>states</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a7c01a68384b81d1ba7d24508f767d216</anchor>
      <arglist>(const Graphnode &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>const int</type>
      <name>assignments</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>aaf17c4a671ea4f06553c33fca90bfa35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeAssignment</type>
      <name>make_assignment</name>
      <anchorfile>classMRF.html</anchorfile>
      <anchor>a9326b3fd5aea915a1bb8a1ad2ac50f3f</anchor>
      <arglist>(const Graphnode &amp;n, const State &amp;my_s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MRFBuilderLP</name>
    <filename>classMRFBuilderLP.html</filename>
    <member kind="function" static="yes">
      <type>static MRFLP *</type>
      <name>add_mrf</name>
      <anchorfile>classMRFBuilderLP.html</anchorfile>
      <anchor>aaace30ed1c0dfb1b0c5c89a22b503e10</anchor>
      <arglist>(const MRF &amp;mrf, string prefix, GRBModel &amp;model, int var_type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MRFHypergraph</name>
    <filename>classMRFHypergraph.html</filename>
    <base>Scarab::HG::HypergraphImpl</base>
    <member kind="function">
      <type>NodeAssignment</type>
      <name>assignment_from_node</name>
      <anchorfile>classMRFHypergraph.html</anchorfile>
      <anchor>a5c717b35842c25c6be9e827f0aa31708</anchor>
      <arglist>(Hypernode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classMRFHypergraph.html</anchorfile>
      <anchor>aaac6b68c3ece41ddd1f8107e961879bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HNode</type>
      <name>assignment_from_node</name>
      <anchorfile>classMRFHypergraph.html</anchorfile>
      <anchor>a34f14a3a9cf0d01c7fbfc11e1caa20ba</anchor>
      <arglist>(NodeAssignment &amp;node_assign)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MRFHypergraph</type>
      <name>from_mrf</name>
      <anchorfile>classMRFHypergraph.html</anchorfile>
      <anchor>af8808e644c7ff0c938f4fbd9e473dfba</anchor>
      <arglist>(const MRF &amp;mrf)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MrfIndex</name>
    <filename>structMrfIndex.html</filename>
    <member kind="function">
      <type></type>
      <name>MrfIndex</name>
      <anchorfile>structMrfIndex.html</anchorfile>
      <anchor>adc62126e39eeccb67aed83b8d33514e9</anchor>
      <arglist>(int group_, int node_, int state_)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>group</name>
      <anchorfile>structMrfIndex.html</anchorfile>
      <anchor>a10be38457b3798cfdf70f224814ce8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>node</name>
      <anchorfile>structMrfIndex.html</anchorfile>
      <anchor>a9c765fbc8576d8d6541a072eb75c2c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>state</name>
      <anchorfile>structMrfIndex.html</anchorfile>
      <anchor>a2cea032a5c169945c3c0e8d96fbc1477</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MRFLP</name>
    <filename>structMRFLP.html</filename>
    <member kind="function">
      <type></type>
      <name>MRFLP</name>
      <anchorfile>structMRFLP.html</anchorfile>
      <anchor>a868a64efdbf8d42682c7953361af4c31</anchor>
      <arglist>(const MRF &amp;p)</arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Graphnode, Cache&lt; State, GRBVar &gt; * &gt;</type>
      <name>node_vars</name>
      <anchorfile>structMRFLP.html</anchorfile>
      <anchor>a1ddb2cc0eb980dc0d9d94bf731e3f4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Graphedge, Cache&lt; State, Cache&lt; State, GRBVar &gt; * &gt; * &gt;</type>
      <name>edge_vars</name>
      <anchorfile>structMRFLP.html</anchorfile>
      <anchor>a7f977d31ba7f70b5913279466a46e2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Graphedge, Cache&lt; State, GRBVar &gt; * &gt;</type>
      <name>from_state_blank_vars</name>
      <anchorfile>structMRFLP.html</anchorfile>
      <anchor>a46a1042ee20d632ca11afee0a1965fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Graphedge, Cache&lt; State, GRBVar &gt; * &gt;</type>
      <name>to_state_blank_vars</name>
      <anchorfile>structMRFLP.html</anchorfile>
      <anchor>ae1b4c653d4a3b3c6759a160f8f1c4fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MRF &amp;</type>
      <name>mrf</name>
      <anchorfile>structMRFLP.html</anchorfile>
      <anchor>a546b7ee8de350e2a882e9ae9beb6af6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NgramCache</name>
    <filename>classNgramCache.html</filename>
    <member kind="function">
      <type></type>
      <name>NgramCache</name>
      <anchorfile>classNgramCache.html</anchorfile>
      <anchor>a1d8b66016081c1e0d15b2199e48c4df9</anchor>
      <arglist>(Vocab &amp;v, int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNext</name>
      <anchorfile>classNgramCache.html</anchorfile>
      <anchor>aaf831fb4e48aa1a8f8d46287adb7c419</anchor>
      <arglist>(const VocabIndex next)</arglist>
    </member>
    <member kind="function">
      <type>LogP</type>
      <name>wordProbPrimeCache</name>
      <anchorfile>classNgramCache.html</anchorfile>
      <anchor>a3444ab6a1b5a140edb089efb51b071c1</anchor>
      <arglist>(VocabIndex word, const VocabIndex *context)</arglist>
    </member>
    <member kind="function">
      <type>LogP</type>
      <name>wordProbFromCache</name>
      <anchorfile>classNgramCache.html</anchorfile>
      <anchor>a7806b0a2832644fcde66aa928a58caa9</anchor>
      <arglist>(VocabIndex word, const VocabIndex *context)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>NodeAssignment</name>
    <filename>structNodeAssignment.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeAssignment</name>
      <anchorfile>structNodeAssignment.html</anchorfile>
      <anchor>afb4f063136a9da957865d42faa2a3943</anchor>
      <arglist>(int node_id_, const State state_, int length_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structNodeAssignment.html</anchorfile>
      <anchor>aea41536d91eba4d9c6440065953aa4e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>node_id</name>
      <anchorfile>structNodeAssignment.html</anchorfile>
      <anchor>a595045041aa245ed3108284223ce766d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>s</name>
      <anchorfile>structNodeAssignment.html</anchorfile>
      <anchor>affe9bfbc195ba56f34dcdbd4fb10411e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>structNodeAssignment.html</anchorfile>
      <anchor>ac3b88ac2cbd270733ee835e00279a4ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NonLocal</name>
    <filename>classNonLocal.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>classNonLocal.html</anchorfile>
      <anchor>acd66e7882a5bb3415d3fd658d03ec8fc</anchor>
      <arglist>(const Hyperedge &amp;, const vector&lt; vector&lt; int &gt; &gt; &amp;, double &amp;score, vector&lt; int &gt; &amp;full_derivation, Sig &amp;sig) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Hyp</type>
      <name>initialize</name>
      <anchorfile>classNonLocal.html</anchorfile>
      <anchor>a90f2d399853f5c689a0abdc5c12a8370</anchor>
      <arglist>(const Hypernode &amp;) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>numberizer</name>
    <filename>classnumberizer.html</filename>
    <templarg>K</templarg>
    <member kind="typedef">
      <type>int</type>
      <name>index_type</name>
      <anchorfile>classnumberizer.html</anchorfile>
      <anchor>abe7a6870680c2d0e1ce7310f9b384bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>word_to_index</name>
      <anchorfile>classnumberizer.html</anchorfile>
      <anchor>a1fe363ee20421460304c1c09655ca972</anchor>
      <arglist>(K const &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>index_to_word</name>
      <anchorfile>classnumberizer.html</anchorfile>
      <anchor>a5805e2159cfb86b532f4f65a478b632f</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>begin_index</name>
      <anchorfile>classnumberizer.html</anchorfile>
      <anchor>aab4df02a31746f6afca10c6dbd881321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>index_type</type>
      <name>end_index</name>
      <anchorfile>classnumberizer.html</anchorfile>
      <anchor>a42d4a600fe262be7d13e324bf5afae22</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PhraseBased</name>
    <filename>classPhraseBased.html</filename>
    <base>Scarab::HG::HypergraphImpl</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classPhraseBased.html</anchorfile>
      <anchor>aafc2997b58b3698fed7cb5a1f6f269c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_up</name>
      <anchorfile>classPhraseBased.html</anchorfile>
      <anchor>a3883660c72be6ce8daab08f368317853</anchor>
      <arglist>(const Hypergraph &amp;hgraph)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PossibleDep</name>
    <filename>structPossibleDep.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>ind</name>
      <anchorfile>structPossibleDep.html</anchorfile>
      <anchor>a2f693c6bb47703c1a989f8971e06d561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>group</name>
      <anchorfile>structPossibleDep.html</anchorfile>
      <anchor>ad2c0887a242af14d7bdd6bc7a3528bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>group_name</name>
      <anchorfile>structPossibleDep.html</anchorfile>
      <anchor>a2f685f514a785a8365c9a1682fce4d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>head_inds</name>
      <anchorfile>structPossibleDep.html</anchorfile>
      <anchor>a4b4536449d9c17e05b7f5454b0d922f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sent_num</name>
      <anchorfile>structPossibleDep.html</anchorfile>
      <anchor>acec0859157184e3f1fe962236fe6303b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PossibleTag</name>
    <filename>structPossibleTag.html</filename>
    <member kind="function">
      <type>int</type>
      <name>weight_id</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>a63f51fa07de58355955633c1fc5ec5c7</anchor>
      <arglist>(POS tag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>a83442edca34aefb4376d36dee744a28b</anchor>
      <arglist>(const PossibleTag &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>a8c69b59e1e75a5f80623cce26baacabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ind</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>a822aff1087d9f91882bf45da7f129e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sent_num</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>a26244f2c445f233652e4c3ffebafa894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>group</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>a25eb72efa84dc8e030a928c091391609</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>group_name</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>afcfa2ffd67a92a564d5c16aa3945b8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>training_count</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>adc65412fc67deda1ac5554fdbb0264d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>test_count</name>
      <anchorfile>structPossibleTag.html</anchorfile>
      <anchor>ae933b21144c99f1197a5254e8ceb1c7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PottsModelBuilderLP</name>
    <filename>classPottsModelBuilderLP.html</filename>
    <member kind="function" static="yes">
      <type>static PottsModelLP *</type>
      <name>add_potts</name>
      <anchorfile>classPottsModelBuilderLP.html</anchorfile>
      <anchor>af62f78dc2bdeb5b4d39444c47f8ad341</anchor>
      <arglist>(const PottsModel &amp;potts, GRBModel &amp;model, int var_type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PottsModelLP</name>
    <filename>structPottsModelLP.html</filename>
    <member kind="function">
      <type></type>
      <name>PottsModelLP</name>
      <anchorfile>structPottsModelLP.html</anchorfile>
      <anchor>af041b236eacf847879e1a2ba53b6e987</anchor>
      <arglist>(const PottsModel &amp;p)</arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Graphnode, Cache&lt; State, GRBVar &gt; * &gt;</type>
      <name>node_vars</name>
      <anchorfile>structPottsModelLP.html</anchorfile>
      <anchor>ac572d15bc61963f636a39e752951cf31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Graphedge, Cache&lt; State, Cache&lt; State, GRBVar &gt; * &gt; * &gt;</type>
      <name>edge_vars</name>
      <anchorfile>structPottsModelLP.html</anchorfile>
      <anchor>a00e3418b717ea5c1a0334dc30dafcdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PottsModel &amp;</type>
      <name>potts</name>
      <anchorfile>structPottsModelLP.html</anchorfile>
      <anchor>ad829fe7b19ca64ae117303082784d110</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Py_buffer</name>
    <filename>structPy__buffer.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>buf</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>acd4c7f597aa4da25b29a0a48320c3dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PyObject *</type>
      <name>obj</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>a82a6200c943129aef733d7accfe4746f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Py_ssize_t</type>
      <name>len</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>a483ee64f1491c16b2e35b840b9531892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Py_ssize_t</type>
      <name>itemsize</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>a2c4ef3bf1e26c5bd4b968303aca61817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>readonly</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>a7504670b8c7dc73da34303ccaa1647e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ndim</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>abe900245be1dff2d90436cf0b17b7f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>format</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>a63bf89be88ff017e20923a8c6a12444c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Py_ssize_t *</type>
      <name>shape</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>a50031628382988cfdb9effad8138f063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Py_ssize_t *</type>
      <name>strides</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>af50c4e247d4839c684c1262bc05c8ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Py_ssize_t *</type>
      <name>suboffsets</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>ac6428a25e5d17a3f0d34f894571ab973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>internal</name>
      <anchorfile>structPy__buffer.html</anchorfile>
      <anchor>ac2e81f1fd8ef763e4f05572d4499139e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Span</name>
    <filename>structSpan.html</filename>
    <member kind="function">
      <type></type>
      <name>Span</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>aa5fb6e25d5c38cd540cc82ca179c82f2</anchor>
      <arglist>(int s, int e)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>name</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>af6e7cf8f52e52996cf52bd7d702e9744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>acebe6ab7baeb922c9c69aac317bbcb7a</anchor>
      <arglist>(const Span &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>a413ed85231167a494dafeaea71fb4ae0</anchor>
      <arglist>(const Span &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>a383594a5e203891204e7fa5849b48e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>end</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>ab1d7ba41653ccb2e46cf061c4a476f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>structSpan.html</anchorfile>
      <anchor>a8637010e702d0acf63cdf790ad49c83e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplitController</name>
    <filename>classSplitController.html</filename>
    <base>Scarab::HG::Controller</base>
    <member kind="function">
      <type></type>
      <name>SplitController</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>a511e733b586a24c2cad5ba16a6cb381b</anchor>
      <arglist>(const Subproblem &amp;s, const ForestLattice &amp;l, bool two_classes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>project_word</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>ac01bf4220c60c35f6862160dc7fcacc7</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>a272757bbbfaa9af9d2ee2262b03ef131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dim</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>ad2aeeafdc31d48526be15a1b1a2e9931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_hypotheses</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>a6ac91d8fd5fef735c6572c420a05bda4</anchor>
      <arglist>(const Hypernode &amp;node, vector&lt; Hypothesis * &gt; &amp;hyps, vector&lt; double &gt; &amp;scores) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_out_root</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>a58e535837326d733c98a193f2c7584c6</anchor>
      <arglist>(vector&lt; Hypothesis * &gt; &amp;hyps, vector&lt; double &gt; &amp;scores) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>find_best</name>
      <anchorfile>classSplitController.html</anchorfile>
      <anchor>a2138b9bac43d19896f2bff71a619e9af</anchor>
      <arglist>(vector&lt; Hypothesis * &gt; &amp;root_hyps, vector&lt; double &gt; &amp;scores, Hypothesis &amp;best_hyp) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SplitHeuristic</name>
    <filename>classSplitHeuristic.html</filename>
    <base>Scarab::HG::Heuristic</base>
    <member kind="function">
      <type></type>
      <name>SplitHeuristic</name>
      <anchorfile>classSplitHeuristic.html</anchorfile>
      <anchor>a8f58e4a4833f73460e2b2fb9c38448f1</anchor>
      <arglist>(const Cache&lt; Hypernode, BestHyp &gt; &amp;outside_scores, Cache&lt; Hyperedge, vector&lt; BestHyp &gt; &gt; &amp;outside_edge_scores)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lower_id</name>
      <anchorfile>classSplitHeuristic.html</anchorfile>
      <anchor>a0080cc4428de2635263f31d7931c3066</anchor>
      <arglist>(const Hypothesis &amp;hyp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_value</name>
      <anchorfile>classSplitHeuristic.html</anchorfile>
      <anchor>a7117c99ce380835ed38aa02f82f8a04e</anchor>
      <arglist>(const Location &amp;l, const Hypothesis &amp;hyp) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_value</name>
      <anchorfile>classSplitHeuristic.html</anchorfile>
      <anchor>ab64ec7cde28b49828bcde1ad97862cc2</anchor>
      <arglist>(const Location &amp;l, const Hypothesis &amp;hyp) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>State</name>
    <filename>structState.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>aa536880320a9aff707fb1e6aab3f58d4</anchor>
      <arglist>(int id_, string label_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>aea25c6702974d1ac86358b4ba96d7891</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>label</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a2809d0a34cd576cc5daaa7a6d0ffb2b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a6687a56382a022034927ba43aad39524</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_id</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>ae0482e3d4b3db023647833efd344831a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>_label</name>
      <anchorfile>structState.html</anchorfile>
      <anchor>a1bf6100c59d50bc94ba781230a85a2e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StaticDescriptorInitializer_dep_2eproto</name>
    <filename>structStaticDescriptorInitializer__dep__2eproto.html</filename>
  </compound>
  <compound kind="struct">
    <name>StaticDescriptorInitializer_features_2eproto</name>
    <filename>structStaticDescriptorInitializer__features__2eproto.html</filename>
  </compound>
  <compound kind="struct">
    <name>StaticDescriptorInitializer_hypergraph_2eproto</name>
    <filename>structStaticDescriptorInitializer__hypergraph__2eproto.html</filename>
  </compound>
  <compound kind="struct">
    <name>StaticDescriptorInitializer_lexical_2eproto</name>
    <filename>structStaticDescriptorInitializer__lexical__2eproto.html</filename>
  </compound>
  <compound kind="struct">
    <name>StaticDescriptorInitializer_tag_2eproto</name>
    <filename>structStaticDescriptorInitializer__tag__2eproto.html</filename>
  </compound>
  <compound kind="struct">
    <name>StaticDescriptorInitializer_translation_2eproto</name>
    <filename>structStaticDescriptorInitializer__translation__2eproto.html</filename>
  </compound>
  <compound kind="class">
    <name>StoreCache</name>
    <filename>classStoreCache.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>StoreCache</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>adeb02113caf8141430705ec5bab08a54</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>a5aaafba803337cf3547159a6ac70a0ab</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>aa4673d48544458b6b05770fe5970d961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>get_value</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>a455dbf75e40300745b354fdcc039279a</anchor>
      <arglist>(const C &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>a23309f685f0ba18912dcc2e8643de932</anchor>
      <arglist>(const C &amp;edge, V val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>aa1289fedb472667dfa926c1e00f22b95</anchor>
      <arglist>(const C &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>ad358ce23080bb52db50a55db583f1bba</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; V &gt;</type>
      <name>store</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>a99393733357e04fe79cf703d3f4d8f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; C &gt;</type>
      <name>full_keys</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>a0df08d5576ce34c4a8fd4f7428fd9ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>has_value</name>
      <anchorfile>classStoreCache.html</anchorfile>
      <anchor>acdfad2c43fd63e37fbb818ce282f6493</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Subgradient</name>
    <filename>classSubgradient.html</filename>
    <member kind="function">
      <type></type>
      <name>Subgradient</name>
      <anchorfile>classSubgradient.html</anchorfile>
      <anchor>a2509e39964e1280532fd4994b3d747ce</anchor>
      <arglist>(SubgradientProducer &amp;subgrad_producer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSubgradient.html</anchorfile>
      <anchor>a183205851cdb362195baf914fb8d3ae0</anchor>
      <arglist>(int example)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_stuck</name>
      <anchorfile>classSubgradient.html</anchorfile>
      <anchor>a54907389766b702c467cf2ab20f8d051</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubgradientProducer</name>
    <filename>classSubgradientProducer.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>classSubgradientProducer.html</anchorfile>
      <anchor>acea0e6ef35f9f3fd2f14872740471628</anchor>
      <arglist>(double &amp;primal, double &amp;dual, wvector &amp;, int, bool, bool &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update_weights</name>
      <anchorfile>classSubgradientProducer.html</anchorfile>
      <anchor>a5b471526b337913722f56221b2461d89</anchor>
      <arglist>(const wvector &amp;updates, wvector *weights)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Subproblem</name>
    <filename>classSubproblem.html</filename>
    <member kind="function">
      <type>int</type>
      <name>overridden_by</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a1f76e6e7b079168299046c42e484c9cf</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>aba36ea76049a46e9ba1f0ac3ccec540a</anchor>
      <arglist>(int proj_dim, vector&lt; int &gt; projection)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>project_word</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a7c86b92cc388505602707376e52a0804</anchor>
      <arglist>(int w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separate</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a3f6d78f4567e70c35785d27a53a55490</anchor>
      <arglist>(int w1, int w2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projection_with_constraints</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a503126c48810484433fd6c3e428f6537</anchor>
      <arglist>(int limit, int &amp;k, map&lt; int, set&lt; int &gt; &gt; &amp;constraints, vector&lt; int &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>best_one</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a4c12e798de9d3e96d6935bd755f92a97</anchor>
      <arglist>(int w1, int w2, int w3) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>best_two</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>abf452bcac2a8a28adbdbffe402e64dde</anchor>
      <arglist>(int w1, int w2, int w3) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_score_dim</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a80e4996ec87d5c3501ef10abdd953260</anchor>
      <arglist>(int w1, int d, int d2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_score_dim_min</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a2e2a665cfdb9208f753eef143147d66c</anchor>
      <arglist>(int w1, vector&lt; int &gt; ds, vector&lt; int &gt; ds2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_new_dim</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a2b43a2a68724d8eb624f6d81a7745b70</anchor>
      <arglist>(int w1, int d, int d2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_score</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a8359ae9db4d8a830d390312bc57eef6f</anchor>
      <arglist>(int w1, int w2, int w3) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Subproblem</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>ae6b6a16e00079ebd5b56acbdfdaf3aab</anchor>
      <arglist>(const ForestLattice *g, NgramCache *lm_in, const GraphDecompose *gd_in, const Cache&lt; Graphnode, int &gt; &amp;word_node_cache_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_weights</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>adf6eb478907ed5c7c9f08a3cfcdfec76</anchor>
      <arglist>(vector&lt; int &gt; u_pos, vector&lt; float &gt; u_values, bool first)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a27c807a807f154ea28e7da7692466638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_caches</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a8220595977ed219234d36dfadd0dde82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; int &gt;</type>
      <name>get_best_nodes_between</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a9c57f3bd41e2788d9f393db8bbbe26ef</anchor>
      <arglist>(int w1, int w2, bool first)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_best_bigram_weight</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a3c426fd46fcacefc561b68f0fc111795</anchor>
      <arglist>(int w1, int w2, bool first)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>primal_score</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>adfba5511e1f004b989f7b2e03d998c4e</anchor>
      <arglist>(int word[], int l)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>word_prob</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>ab5e3b5e167561a79da1d815af120b6bd</anchor>
      <arglist>(int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>word_backoff</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>acc456e9852f19058da2d884feec15679</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>word_backoff_two</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>afd0b98fea6ebb39ae5ad46d1010cb6a3</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>word_prob_reverse</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a32718cd109a52be59a7eecd3dc5f4c8a</anchor>
      <arglist>(int, int, int)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>word_prob_bigram_reverse</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>ab612e729dd11b5ac27ce9f67e0135c0a</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>word_bow_reverse</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a522f5f38fddff38424fe3958104a9612</anchor>
      <arglist>(int i, int j, int k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>word_bow_bigram_reverse</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>a1bce1ad18ee9c123677f39cccda7feb5</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; bool &gt;</type>
      <name>overridden</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>ab162552f8af9ee111227f6ec30b7a4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>projection_dims</name>
      <anchorfile>classSubproblem.html</anchorfile>
      <anchor>aa981fb8aa661221937b3cd021d72c396</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>svector</name>
    <filename>classsvector.html</filename>
    <templarg>F</templarg>
    <templarg>V</templarg>
    <class kind="struct">svector::divide_op</class>
    <class kind="struct">svector::dot_op</class>
    <class kind="struct">svector::multiply_op</class>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a781cf3071f4c7e8ed3b9247c34c783c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a6ad53776885c70adeb9fb67c7a4d6f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a49425052f4c63a771edf0c09ad52bb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a12c0ac4d5d48eb68f0024b4a1ebe597b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a781cf3071f4c7e8ed3b9247c34c783c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a6ad53776885c70adeb9fb67c7a4d6f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a49425052f4c63a771edf0c09ad52bb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; F, V &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a12c0ac4d5d48eb68f0024b4a1ebe597b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>svector</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>af80c78063c502c408ce9de9e29802c4e</anchor>
      <arglist>(const F &amp;f, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a7f6261a28ccf2e7e38b8921716a35e3b</anchor>
      <arglist>(svector&lt; F, V &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ad6df678466732e7a17ea1b1223ff7747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>aa7a575ad6a3a810adf89785b4a5d49b3</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>operator[]</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ae1a20b7ecc6899bc36f6c74c09b80f21</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a8654fa07ce4f88f6f1f781ddd4968da9</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ab57caec3eab9d57eaec2ad1c436fc3d6</anchor>
      <arglist>(const F &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a8a296d1d27c0242a6d8c89d4fdf67388</anchor>
      <arglist>(const value_type &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ad62a2162f09c4d4ea2b9ab9a93ebdfdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a24c1e2612bd13a2bf259dc2627675dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a35b2c7f05af13cb957af871cedcc5e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ad40a20f476d65891c06db88f7b43c12e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a6dad0388185b81076751d6dad78e3fbf</anchor>
      <arglist>(const V &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a5cffef009f0233103409edd38d658d11</anchor>
      <arglist>(const V &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>svector</type>
      <name>operator-</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>aea1f3107cc825f39969674dbe609a12a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a5420004342894baf43b5811f8a49dd22</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a141a4f013fb63eb81bf297c048a0e133</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>svector</type>
      <name>operator*</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a71e1ccf9f794dcc7ec2cf749bdcd2e23</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>dot</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a0a5aaef6f64ca6a66e25880b445b3057</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>svector</type>
      <name>operator/</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ac72bf8a1d29510edec5e19220733d708</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>normsquared</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ab2252c92adf6656d0bde5aec708a371f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>svector</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>af80c78063c502c408ce9de9e29802c4e</anchor>
      <arglist>(const F &amp;f, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a7f6261a28ccf2e7e38b8921716a35e3b</anchor>
      <arglist>(svector&lt; F, V &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ad6df678466732e7a17ea1b1223ff7747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>aa7a575ad6a3a810adf89785b4a5d49b3</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>operator[]</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ae1a20b7ecc6899bc36f6c74c09b80f21</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a8654fa07ce4f88f6f1f781ddd4968da9</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ab57caec3eab9d57eaec2ad1c436fc3d6</anchor>
      <arglist>(const F &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a8a296d1d27c0242a6d8c89d4fdf67388</anchor>
      <arglist>(const value_type &amp;fv)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ad62a2162f09c4d4ea2b9ab9a93ebdfdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a24c1e2612bd13a2bf259dc2627675dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a35b2c7f05af13cb957af871cedcc5e00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ad40a20f476d65891c06db88f7b43c12e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a6dad0388185b81076751d6dad78e3fbf</anchor>
      <arglist>(const V &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a5cffef009f0233103409edd38d658d11</anchor>
      <arglist>(const V &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>svector</type>
      <name>operator-</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>aea1f3107cc825f39969674dbe609a12a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a5420004342894baf43b5811f8a49dd22</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>svector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a141a4f013fb63eb81bf297c048a0e133</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>svector</type>
      <name>operator*</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a71e1ccf9f794dcc7ec2cf749bdcd2e23</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>dot</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a0a5aaef6f64ca6a66e25880b445b3057</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>svector</type>
      <name>operator/</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ac72bf8a1d29510edec5e19220733d708</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>normsquared</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>ab2252c92adf6656d0bde5aec708a371f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>svector &amp;</type>
      <name>add</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>aab15a76cc91f699acf5baa85f11439b3</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y, const C &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>intersect</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a90ac317ae34f85b27980004cc0282e9d</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y, Op &amp;op) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>svector &amp;</type>
      <name>add</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>aab15a76cc91f699acf5baa85f11439b3</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y, const C &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>intersect</name>
      <anchorfile>classsvector.html</anchorfile>
      <anchor>a90ac317ae34f85b27980004cc0282e9d</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;y, Op &amp;op) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>svector::divide_op</name>
    <filename>structsvector_1_1divide__op.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsvector_1_1divide__op.html</anchorfile>
      <anchor>a1e6ce70b36862a74b5efaa63208e4b16</anchor>
      <arglist>(F f, V x, V y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsvector_1_1divide__op.html</anchorfile>
      <anchor>a1e6ce70b36862a74b5efaa63208e4b16</anchor>
      <arglist>(F f, V x, V y)</arglist>
    </member>
    <member kind="variable">
      <type>svector&lt; F, V &gt;</type>
      <name>result</name>
      <anchorfile>structsvector_1_1divide__op.html</anchorfile>
      <anchor>a5acd661cb69e5995b87ad9b600871a78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>svector::dot_op</name>
    <filename>structsvector_1_1dot__op.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsvector_1_1dot__op.html</anchorfile>
      <anchor>ad9780aa1774c192931b6a7ff15f96921</anchor>
      <arglist>(F f, V x, V y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsvector_1_1dot__op.html</anchorfile>
      <anchor>ad9780aa1774c192931b6a7ff15f96921</anchor>
      <arglist>(F f, V x, V y)</arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>result</name>
      <anchorfile>structsvector_1_1dot__op.html</anchorfile>
      <anchor>a82d3dfb515ff4973a010c08669a221b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>svector::multiply_op</name>
    <filename>structsvector_1_1multiply__op.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsvector_1_1multiply__op.html</anchorfile>
      <anchor>a710b27605bcc6af3c75098ff13430fc2</anchor>
      <arglist>(F f, V x, V y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsvector_1_1multiply__op.html</anchorfile>
      <anchor>a710b27605bcc6af3c75098ff13430fc2</anchor>
      <arglist>(F f, V x, V y)</arglist>
    </member>
    <member kind="variable">
      <type>svector&lt; F, V &gt;</type>
      <name>result</name>
      <anchorfile>structsvector_1_1multiply__op.html</anchorfile>
      <anchor>a8b726798c1f02706cc6ae5c5aad9674d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>svector_iterator</name>
    <filename>structsvector__iterator.html</filename>
    <templarg>F</templarg>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>svector_iterator</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>a9df4f9b2ba35a3cf8d37b14eb65a7569</anchor>
      <arglist>(const svector&lt; F, V &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_next</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>af9575b53254c6310119fd26c5431d829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>a9f5a8e681ff60bc2927ae23ceae89382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>value</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>a304645ceb8f8cc2787c28eb21361b1df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>a562232829f10632a653d8c236732667d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>svector&lt; F, V &gt;::const_iterator</type>
      <name>cur</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>aec777d24426ae5b31c9bf0d0276c9073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>svector&lt; F, V &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>structsvector__iterator.html</anchorfile>
      <anchor>a7e548db78add9057ecf4178dd1552f2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Tag</name>
    <filename>structTag.html</filename>
    <member kind="function">
      <type></type>
      <name>Tag</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>ab32833339e272705062ac1a5d5f1ca10</anchor>
      <arglist>(uint ind_, POS tag_, int len_)</arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>operator&lt;</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>aed3aabe09176d4a6acbb2cc7b3170228</anchor>
      <arglist>(const Tag &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>a5458e1229013075f4597c1dba313ce83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ind</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>a072cbc6c6ac82c2398ad409a5eb28b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>a7b67562e1a664c9fed9afb74902b0fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>POS</type>
      <name>tag</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>a5f97e5e57a82b467da83f2990a276e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>MAX_TAG</name>
      <anchorfile>structTag.html</anchorfile>
      <anchor>acb96fe3a41181e0e10628ae00fe63878</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TagConstraints</name>
    <filename>classTagConstraints.html</filename>
    <member kind="function">
      <type></type>
      <name>TagConstraints</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>a58a2e5245400d411de24e36534d11945</anchor>
      <arglist>(int num_tags)</arglist>
    </member>
    <member kind="function">
      <type>EdgeCache</type>
      <name>build_tagger_constraint_vector</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>adec1a1de8fb49e79b52c4c93517414a0</anchor>
      <arglist>(int sent_num, const Tagger &amp;tagger, wvector &amp;orig_weights) const </arglist>
    </member>
    <member kind="function">
      <type>wvector</type>
      <name>build_tagger_subgradient</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>acec3818d7505e9147828ab7cb3863001</anchor>
      <arglist>(int sent_num, const Tagger &amp;tagger, const vector&lt; const Hyperedge * &gt; used_edges) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_from_file</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>a8b8df130795f2fbc1ce2aac375dfc00a</anchor>
      <arglist>(string file_name)</arglist>
    </member>
    <member kind="function">
      <type>wvector</type>
      <name>solve_hard</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>a3e490a8d4d335ed4d04803fab0a82871</anchor>
      <arglist>(wvector &amp;model) const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; ConstraintGroup &gt;</type>
      <name>_constraint_struct</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>ad5aae083cb84eff2294ca7fbbd63cb67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set&lt; int &gt;</type>
      <name>groups</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>aba1f64a190bc4144fea14f01fe82ecc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; PossibleTag &gt; &gt;</type>
      <name>_constrained_words</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>a83e2347bf237b00f02dc872c19fd4516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; PossibleTag &gt;</type>
      <name>_all_constraints</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>a29576d5022d4c5d03e6c8723669c3679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>_num_tags</name>
      <anchorfile>classTagConstraints.html</anchorfile>
      <anchor>a8885071b73e699061347d17af6d9aa20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tagger</name>
    <filename>classTagger.html</filename>
    <base>Scarab::HG::HypergraphImpl</base>
    <member kind="function">
      <type></type>
      <name>Tagger</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>a6e812fd7e339a21155f7b30f04292be1</anchor>
      <arglist>(int num_tags_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>a4ebe0aebd7c0392970b401a5a6c6cd72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_up</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>afafa6e435d17467db344ca615f24746f</anchor>
      <arglist>(const Hypergraph &amp;hgraph)</arglist>
    </member>
    <member kind="function">
      <type>const Hypergraph &amp;</type>
      <name>hypergraph</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>ad694ed218149b86c4ef5253328a41c49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Tag &gt;</type>
      <name>tags</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>ae1e3802fb545c3430ca4d52ea5fd95db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_tags</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>a5da221998377bf36c84013ba0d471b36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>sent_length</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>ae762dd21f446b9ec618b0b83204bdc2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Tag</type>
      <name>make_tag</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>af01daf511528271a118a281b8595e0df</anchor>
      <arglist>(int ind, int tag) const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; const Hyperedge * &gt; &amp;</type>
      <name>tag_to_edge</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>a26472c386e7f5eebcb05c9d1843c1975</anchor>
      <arglist>(const Tag &amp;tag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tag_has_edge</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>ae270a5be64b93945c180996aedcf6372</anchor>
      <arglist>(const Tag &amp;tag) const </arglist>
    </member>
    <member kind="function">
      <type>const Tag &amp;</type>
      <name>edge_to_tag</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>ad615c8356f380baab01ae6675a25c409</anchor>
      <arglist>(const Hyperedge &amp;edge) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>edge_has_tag</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>ad7f1dda6082e71cd113a3d77e9c33275</anchor>
      <arglist>(const Hyperedge &amp;edge) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tag</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>a4bf3332c608c078cbb2d5692c4f13b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>make_edge</name>
      <anchorfile>classTagger.html</anchorfile>
      <anchor>a305fd4cf75f2149a57109772e195eb47</anchor>
      <arglist>(const Hypergraph_Edge &amp;edge, const Scarab::HG::Hyperedge *our_edge)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TaggerDual</name>
    <filename>classTaggerDual.html</filename>
    <base>DualDecompositionSubproblem</base>
    <member kind="function">
      <type></type>
      <name>TaggerDual</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a2b16f45c3550e4f4871841c9ee02de4f</anchor>
      <arglist>(vector&lt; const Tagger * &gt; &amp;taggers, const wvector &amp;base_weights, const TagConstraints &amp;cons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a047785058d058492172280e50a8f4c1a</anchor>
      <arglist>(double &amp;primal, double &amp;dual, wvector &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_weights</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a01f7705a69c7cc993268c6e66df57ae0</anchor>
      <arglist>(const wvector &amp;updates, wvector *weights, double mult)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const vector&lt; const Tagger * &gt; &amp;</type>
      <name>_taggers</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a0068b276abb09b34ab08e9cc14947ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const wvector &amp;</type>
      <name>_base_weights</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a0073fa0f694790d365ca959ed8386e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TagConstraints &amp;</type>
      <name>_tag_constraints</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>ab8845276b234c329c967529091f51e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wvector *</type>
      <name>_cur_weights</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a9974a79ebf2547f3e80e9d68d06b49be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; wvector &gt;</type>
      <name>_subgrad_cache</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a57232f5a7702b7715f8517d408086dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; double &gt;</type>
      <name>_primal_cache</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a47cdc599b2c73836f33aa443053e3534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; double &gt;</type>
      <name>_dual_cache</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a4472c903ae391e7cc4912bc473a9eae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; bool &gt;</type>
      <name>_dirty_cache</name>
      <anchorfile>classTaggerDual.html</anchorfile>
      <anchor>a259d5ef5c5020c75a68527950ff41310</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Tagging</name>
    <filename>classTagging.html</filename>
    <member kind="function">
      <type></type>
      <name>Tagging</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a3236d0c0080d7f797f080151e66b756e</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Tagging &amp;</type>
      <name>operator=</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ab21cdd0216e66fb17a8319c5f4b1a4d6</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a1d1cc0a22c9a9f084b64f5fb6545390b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a91d117de804c4646ab9ea9d3103d40d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a6b6767148366f94de9462d02171d19d0</anchor>
      <arglist>(Tagging *other)</arglist>
    </member>
    <member kind="function">
      <type>Tagging *</type>
      <name>New</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a54c4069c679087287ca5926d05c9ec68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a337681fda513929c00d203798c04ad52</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>acaf751b83c2458013c2d12c4bdaea619</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ab2271da80aa840cfa9b2de493b3eeb1f</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a13d8b75c40ac5f295bc61a2f3f94c3b0</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a43f8e265b50703f56a295083d3aa9676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ab5617848ff03416f1ab4d98e2bfdef26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a6c2f74cb255bb4913fd279c6f3254729</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a1c8cf78b674f62c201f31e2b6ad721f2</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>afbd4d173621ed8cfc227dbcceec933d6</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a630b01cebe4512cd199ce76f0e589ca0</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a4661d58542895ed97b5e55ffb7d19f0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a9a38b3cc76fbcae7c96920db44225559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a7e57b22b3a2162e380feae08233ee3a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ad56efb939f57d519f4585a537c3d5266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ae6654e503f1906c0265012e311545c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a34538a14f1727c2c15ddf43f5419f61b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a8ef6eb12fffbe4fbd1b1fc622fc4fb87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a25056abd232cdf45b153cb4b02b82dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>aa65105a209336790f3faf174b6e47813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a44fc9490ab405218c27f13fa056b2ff5</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tagging</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a3236d0c0080d7f797f080151e66b756e</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Tagging &amp;</type>
      <name>operator=</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ab21cdd0216e66fb17a8319c5f4b1a4d6</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a1d1cc0a22c9a9f084b64f5fb6545390b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a91d117de804c4646ab9ea9d3103d40d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a6b6767148366f94de9462d02171d19d0</anchor>
      <arglist>(Tagging *other)</arglist>
    </member>
    <member kind="function">
      <type>Tagging *</type>
      <name>New</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ad46be5a72376294a63988a2662dc74b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a337681fda513929c00d203798c04ad52</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>acaf751b83c2458013c2d12c4bdaea619</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ab2271da80aa840cfa9b2de493b3eeb1f</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a13d8b75c40ac5f295bc61a2f3f94c3b0</anchor>
      <arglist>(const Tagging &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a43f8e265b50703f56a295083d3aa9676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ab5617848ff03416f1ab4d98e2bfdef26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a6c2f74cb255bb4913fd279c6f3254729</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a1c8cf78b674f62c201f31e2b6ad721f2</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>afbd4d173621ed8cfc227dbcceec933d6</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a758bb0408c843056d4c70b917d02509b</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a4661d58542895ed97b5e55ffb7d19f0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a7d324ff2794e15d2c55c7238e173b520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a7e57b22b3a2162e380feae08233ee3a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>ad56efb939f57d519f4585a537c3d5266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a11022a65eecc2f9f771efb51e3414c59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ind</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a34538a14f1727c2c15ddf43f5419f61b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a8ef6eb12fffbe4fbd1b1fc622fc4fb87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a25056abd232cdf45b153cb4b02b82dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a2101441b351719ab45adde574a0e7255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tag_id</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a44fc9490ab405218c27f13fa056b2ff5</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a9f5cc87de44fe1c0fe7e599e7585d133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Tagging &amp;</type>
      <name>default_instance</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a7453824b3d7472a22a1f5fa17db38cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a15430f96418c7b50335efcfe444c841f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Tagging &amp;</type>
      <name>default_instance</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a14f13d5d1d6489912bfc06ca67b484f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIndFieldNumber</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>acd90c8d2f16535b6a8810a911a047274</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kTagIdFieldNumber</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>aee9291b65c5317b5d58c9dfab2d0af6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_tag_2eproto</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a5b6e1d0ac3f12cf6b846b7bc86f7fc96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_tag_2eproto</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a84116f221ec83265dfdeb3bb01f9bd6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_tag_2eproto</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a955ed450e7afd4065ffef15152e72563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_tag_2eproto</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a5b6e1d0ac3f12cf6b846b7bc86f7fc96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_tag_2eproto</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a84116f221ec83265dfdeb3bb01f9bd6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_tag_2eproto</name>
      <anchorfile>classTagging.html</anchorfile>
      <anchor>a955ed450e7afd4065ffef15152e72563</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TagIndex</name>
    <filename>structTagIndex.html</filename>
    <member kind="function">
      <type></type>
      <name>TagIndex</name>
      <anchorfile>structTagIndex.html</anchorfile>
      <anchor>a30a1bf326d593304ac3d950fd2b8be92</anchor>
      <arglist>(int sent_num_, int ind_, int tag_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structTagIndex.html</anchorfile>
      <anchor>a7b858bbf2ed8ed6bb56d87db8d38aaf2</anchor>
      <arglist>(const TagIndex &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sent_num</name>
      <anchorfile>structTagIndex.html</anchorfile>
      <anchor>a9bde045f6de7e99933920b883af894dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ind</name>
      <anchorfile>structTagIndex.html</anchorfile>
      <anchor>ac9cd159e647314e5beaf7af6da56fa6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>POS</type>
      <name>tag</name>
      <anchorfile>structTagIndex.html</anchorfile>
      <anchor>a1182f316658b96f36ecd7689d790f508</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TagMrfAligner</name>
    <filename>classTagMrfAligner.html</filename>
    <member kind="function">
      <type>void</type>
      <name>build_from_constraints</name>
      <anchorfile>classTagMrfAligner.html</anchorfile>
      <anchor>ae2bae21b52efb547b46f2da80f61ec42</anchor>
      <arglist>(string file_name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>align</name>
      <anchorfile>classTagMrfAligner.html</anchorfile>
      <anchor>a5b6ecf59596d656333f8113f6f05eba4</anchor>
      <arglist>(TagIndex tag_ind, MrfIndex &amp;mrf_ind)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; MRF * &gt;</type>
      <name>mrf_models</name>
      <anchorfile>classTagMrfAligner.html</anchorfile>
      <anchor>a8a5d34bcfecdfb8c3901297ad34e301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; TagIndex &gt; &gt;</type>
      <name>tag_constraints</name>
      <anchorfile>classTagMrfAligner.html</anchorfile>
      <anchor>ae20f5a7d1131701986a36b70dca2c26f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TagMrfLP</name>
    <filename>classTagMrfLP.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>align_tag_mrf</name>
      <anchorfile>classTagMrfLP.html</anchorfile>
      <anchor>a7f9f963c533c5c712acca41db36f9a5a</anchor>
      <arglist>(const vector&lt; const MRFLP * &gt; &amp;mrflp, const vector&lt; const TagLP * &gt; &amp;taglp, TagMrfAligner aligner, GRBModel &amp;model, int var_type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>context::Context</name>
    <filename>classcontext_1_1Context.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a45331427ba3068871837515e241bbc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pos</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a614cdfde821d83549eb18b3db26f6160</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>to_tuple</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a0d10b0f9dae71ae73112cdf0f82fc0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>afbcaecfab5c6553ee9f206982556e22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__eq__</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a4bf737305e5d500a374c83e89503d32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>match</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a24a388dcf7c90cbc7f3289b3e237f20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>make_context</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a5939d15112372def8ddea3a67695fbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>word</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a8c912c9591e200226774548b9094b357</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>left</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>a1eba426903021484e92f1dfc388df1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>right</name>
      <anchorfile>classcontext_1_1Context.html</anchorfile>
      <anchor>af51be36ad9fc1d09448873c28a5107a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::CountFeatureIdx</name>
    <filename>classcrf_1_1tagger_1_1CountFeatureIdx.html</filename>
    <member kind="function">
      <type></type>
      <name>CountFeatureIdx</name>
      <anchorfile>classcrf_1_1tagger_1_1CountFeatureIdx.html</anchorfile>
      <anchor>a72b231d16b17a544d4d45a9cefb3a6f0</anchor>
      <arglist>(int count, int fidx)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>classcrf_1_1tagger_1_1CountFeatureIdx.html</anchorfile>
      <anchor>a38d91800d16c564b1ec4ec5a1f39cfbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>fidx</name>
      <anchorfile>classcrf_1_1tagger_1_1CountFeatureIdx.html</anchorfile>
      <anchor>ac6ab69434356959406e3c4564cd47274</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::CRFTagger</name>
    <filename>classcrf_1_1tagger_1_1CRFTagger.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>main</name>
      <anchorfile>classcrf_1_1tagger_1_1CRFTagger.html</anchorfile>
      <anchor>a1ecff1593014efcb8a1c76e5e472b07b</anchor>
      <arglist>(String[] args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boolean</type>
      <name>checkArgs</name>
      <anchorfile>classcrf_1_1tagger_1_1CRFTagger.html</anchorfile>
      <anchor>aa134c7bf2c40906d86a3fb81618661ae</anchor>
      <arglist>(String[] args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>displayCopyright</name>
      <anchorfile>classcrf_1_1tagger_1_1CRFTagger.html</anchorfile>
      <anchor>a111b933bb16e307c9a2e2122a65c6145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>displayHelp</name>
      <anchorfile>classcrf_1_1tagger_1_1CRFTagger.html</anchorfile>
      <anchor>a2281cc9210a5ca73cdf082de604f69ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Dictionary</name>
    <filename>classcrf_1_1tagger_1_1Dictionary.html</filename>
    <member kind="function">
      <type>void</type>
      <name>readDict</name>
      <anchorfile>classcrf_1_1tagger_1_1Dictionary.html</anchorfile>
      <anchor>aef1b48afb99c99512d19027d0d8831f6</anchor>
      <arglist>(BufferedReader fin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcrf_1_1tagger_1_1Dictionary.html</anchorfile>
      <anchor>ae597dd44d2c30b1cce1822941cf27f6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Map</type>
      <name>dict</name>
      <anchorfile>classcrf_1_1tagger_1_1Dictionary.html</anchorfile>
      <anchor>a63e1a01717403bc76845f3d183027c0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::DoubleMatrix</name>
    <filename>classcrf_1_1tagger_1_1DoubleMatrix.html</filename>
    <member kind="function">
      <type></type>
      <name>DoubleMatrix</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>abf1a305bd8dc75ebdda8774ff42547a8</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleMatrix</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>a6a90dff557e1b6b12e9deb0ec0463c1e</anchor>
      <arglist>(int rows, int cols, double[][] mtrx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleMatrix</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>ab4ddc8a79c50d0fc2cc186e4393b28aa</anchor>
      <arglist>(DoubleMatrix dm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>a1d647e31251f6f7beeaed8246d9649ff</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>abfe3dec4c51c7fa65caaeb9fb1c1bdc2</anchor>
      <arglist>(DoubleMatrix dm)</arglist>
    </member>
    <member kind="variable">
      <type>double[][]</type>
      <name>mtrx</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>a991574caee0c1fef50c6b78a3ae2e173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rows</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>ac623f2820a83a4abe6da7d9863b88667</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cols</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleMatrix.html</anchorfile>
      <anchor>a48747b6e20eb0e7ae5251ee6cad4f34d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::DoubleVector</name>
    <filename>classcrf_1_1tagger_1_1DoubleVector.html</filename>
    <member kind="function">
      <type></type>
      <name>DoubleVector</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a9025028d79315e6c92d727f33e5c0388</anchor>
      <arglist>(int len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleVector</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a02b041b0ccfa46d6f4957461532eef2f</anchor>
      <arglist>(int len, double[] vect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleVector</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a724662ed3a79faaa45f6e51926bf1f3d</anchor>
      <arglist>(DoubleVector dv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a9857b20c14dc6a4678448cfa815bcf14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a0404b5662a7be94bc34b56d85c90e23f</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a0403f4274488dabcfa4ee73399282510</anchor>
      <arglist>(DoubleVector dv)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a0ded169ea15a17048ea892ca7e1225b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compMult</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a494906382ea94285ed9cf1c3012f3ca8</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compMult</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a6fc3b3ac5c31dcb43525b79476aa1d27</anchor>
      <arglist>(DoubleVector dv)</arglist>
    </member>
    <member kind="variable">
      <type>double[]</type>
      <name>vect</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a386ccf2941dfcc782fc1aa8f4497d602</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>len</name>
      <anchorfile>classcrf_1_1tagger_1_1DoubleVector.html</anchorfile>
      <anchor>a4661d9fdffd08300cfcc27dc0988f3be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Element</name>
    <filename>classcrf_1_1tagger_1_1Element.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>count</name>
      <anchorfile>classcrf_1_1tagger_1_1Element.html</anchorfile>
      <anchor>a8fd18a0ef1ec990d8a46e6fc9f8ac2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>chosen</name>
      <anchorfile>classcrf_1_1tagger_1_1Element.html</anchorfile>
      <anchor>ab5480d3bf2962fe2310bd27abea0a4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>Map</type>
      <name>lbCntFidxes</name>
      <anchorfile>classcrf_1_1tagger_1_1Element.html</anchorfile>
      <anchor>a256c2371e4960831efb52d4f306ef9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>List</type>
      <name>cpFeatures</name>
      <anchorfile>classcrf_1_1tagger_1_1Element.html</anchorfile>
      <anchor>a49f65ea3cf34a078ebef63ca14f3e775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>boolean</type>
      <name>isScanned</name>
      <anchorfile>classcrf_1_1tagger_1_1Element.html</anchorfile>
      <anchor>a4ec6a7ac5ee139e285dd27dd3acc40ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Feature</name>
    <filename>classcrf_1_1tagger_1_1Feature.html</filename>
    <member kind="function">
      <type>void</type>
      <name>eFeature1Init</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>ae87dff687324fdee61a8ff6a7fac5a99</anchor>
      <arglist>(int y, int yp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eFeature1Init</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>aa0337470c1a23aae3f3456d2ea4a2274</anchor>
      <arglist>(int y, int yp, Map fmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sFeature1Init</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a8d5ada683127a749c4a7b18db09232de</anchor>
      <arglist>(int y, int cp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sFeature1Init</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>ad63a3c9bc363c63ccdf21449799f4400</anchor>
      <arglist>(int y, int yp, Map fmap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Feature</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>ab6fbe9a014d45b5db359ac540d2e7864</anchor>
      <arglist>(String line, Map cpStr2Int, Map lbStr2Int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Feature</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a23b1b0bdf09bca40a3340473f12ab433</anchor>
      <arglist>(String line, Map cpStr2Int, Map lbStr2Int, Map fmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strId2Idx</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>ae96be026372abdcaf076f20ef12485d0</anchor>
      <arglist>(Map fmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>strId2IdxAdd</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a8ad2bd9851af1c7b41c5db45ef51b597</anchor>
      <arglist>(Map fmap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a06f97f9d1d21654d103b3b7cb7b96f3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a231c1bb279947c6b43b1ae83eed65261</anchor>
      <arglist>(Map fmap)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a01e1599d91e436146d8a8e553e516f09</anchor>
      <arglist>(Map cpInt2Str, Map lbInt2Str)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final int</type>
      <name>UNKNOWN_FEATURE</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a948db953a912a8ef6ae742c359e5d428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final int</type>
      <name>EDGE_FEATURE1</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a35c32698c326e2ecf83768cb817cc7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final int</type>
      <name>STAT_FEATURE1</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a5b3b6afef6fa2ec3a8b5542b791c859e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>ftype</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a98102373018fed0e1aad2cedcfa8a33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>idx</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a615412b8630860ad98d65dead7051d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>String</type>
      <name>strId</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a63f7d5d0a30549930c452d2a12eeb4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>y</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>aef748815f6d45baf4e25a16d18c9383e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>yp</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a8533d49367cbb1c002d414681e72e17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>cp</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a7cc8feeafee98fbb4a5202af7e1def51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>float</type>
      <name>val</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>a72628ec698449e837d4533bd09c2c3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>double</type>
      <name>wgt</name>
      <anchorfile>classcrf_1_1tagger_1_1Feature.html</anchorfile>
      <anchor>aadd86b4aaead6fea153fae4ef1d635ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::FeatureGen</name>
    <filename>classcrf_1_1tagger_1_1FeatureGen.html</filename>
    <member kind="function">
      <type></type>
      <name>FeatureGen</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>add9b9d6e5dab177cb0ca7eb9896f9036</anchor>
      <arglist>(Maps maps, Dictionary dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a2febd9f31bb702c68d97cb6dcd6b3dd7</anchor>
      <arglist>(Feature f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numFeatures</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a4180ae5b5b1e5232f726bf35a0bb7889</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFeatures</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>ac0ed01de1545823bca55bd590f476363</anchor>
      <arglist>(BufferedReader fin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startScanFeaturesAt</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>ae6219b21652fb1d6ce972a134c3ef404</anchor>
      <arglist>(List seq, int pos)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>hasNextFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>ad4dc356a92dc96277f4648ff46c05b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Feature</type>
      <name>nextFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a2fef1008442c8a68238d20008b0e4596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>void</type>
      <name>startScanSFeaturesAt</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>ab34e50306c8dbd7d8e5086943fa131a1</anchor>
      <arglist>(List seq, int pos)</arglist>
    </member>
    <member kind="function" protection="package">
      <type>boolean</type>
      <name>hasNextSFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>ae30dfdfae984edb88caddc9355ceac88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>Feature</type>
      <name>nextSFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a747583130d410a3683fd16924c1dbc31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>void</type>
      <name>startScanEFeatures</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a3014b96f33b1c8d076320fed79aa21b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>boolean</type>
      <name>hasNextEFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a3d24e84ed34a30875b26ecca4cac6c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="package">
      <type>Feature</type>
      <name>nextEFeature</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>ad3f359593345feb0d042c092bbb0de32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="package">
      <type>List</type>
      <name>features</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a655214848c9a94e14d5866cb5ab45f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>Map</type>
      <name>fmap</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a1a1b2f6bd2dc8e873818ea8170843dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>Maps</type>
      <name>maps</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>afc98da0afdc7114ef476c21c4a736e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>Dictionary</type>
      <name>dict</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a108e9782815efc7fb9dc8fec970411d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>List</type>
      <name>sFeatures</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a65fcab516e3b5718f4e45c47ff5a8c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>sFeatureIdx</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a9dcfba9e0e9e1b0a3bf60aa86b08ca8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>List</type>
      <name>eFeatures</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>aa37c97cde2210fd228f16f56a1521f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>eFeatureIdx</name>
      <anchorfile>classcrf_1_1tagger_1_1FeatureGen.html</anchorfile>
      <anchor>a1ec33190b09ad68c42b4260fa51047fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Maps</name>
    <filename>classcrf_1_1tagger_1_1Maps.html</filename>
    <member kind="function">
      <type>void</type>
      <name>readCpMaps</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>a42c5e0a56f79f4dd302bba9f2c4bfcd0</anchor>
      <arglist>(BufferedReader fin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLbMaps</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>a6a609374088ae25f855221d18b0e83c8</anchor>
      <arglist>(BufferedReader fin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numCps</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>ada1d1cad73781577aba9f2571c7c42bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numLabels</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>af46341643852a6e8f23152a68839f571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Map</type>
      <name>cpStr2Int</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>aa0cf8f3cefbd211728038c41986b8644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Map</type>
      <name>cpInt2Str</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>a01e525e11561ea5a199a98e7f72abc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Map</type>
      <name>lbStr2Int</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>aed053e308f75664e86a5491bd605aea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Map</type>
      <name>lbInt2Str</name>
      <anchorfile>classcrf_1_1tagger_1_1Maps.html</anchorfile>
      <anchor>ac940ecdd104ad33085844b79d09c725b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Mathlib</name>
    <filename>classcrf_1_1tagger_1_1Mathlib.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mult</name>
      <anchorfile>classcrf_1_1tagger_1_1Mathlib.html</anchorfile>
      <anchor>a7f1ab68ff7ada35bee5b4ffbdc40bb9c</anchor>
      <arglist>(int size, DoubleVector x, DoubleMatrix A, DoubleVector y, boolean isTransposed)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Model</name>
    <filename>classcrf_1_1tagger_1_1Model.html</filename>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a286cb79b69e017f1ff6d9cb911fd7544</anchor>
      <arglist>(Option taggerOpt, Maps taggerMaps, Dictionary taggerDict, FeatureGen taggerFGen, Viterbi taggerVtb)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>init</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>ad78e05479d7b913c0b03d45b12707ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inference</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a6ab9974798073cb6e6878d67ee821bea</anchor>
      <arglist>(List seq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inferenceAll</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a7e3603f3d479f2536b9c8c894323c9d1</anchor>
      <arglist>(List data)</arglist>
    </member>
    <member kind="variable">
      <type>Option</type>
      <name>taggerOpt</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a193ded2e22b52b5a32f9a61b213a03cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Maps</type>
      <name>taggerMaps</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>aa4ffc23c3a0944f730fa341321105404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Dictionary</type>
      <name>taggerDict</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a184ed87dd3ac89f8185cb3ea196eaade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FeatureGen</type>
      <name>taggerFGen</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a4cdc49a163f63dd926d50ce2bd72a881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Viterbi</type>
      <name>taggerVtb</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>ab36b5ac7fa5207f2b07a261b12d44d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>double[]</type>
      <name>lambda</name>
      <anchorfile>classcrf_1_1tagger_1_1Model.html</anchorfile>
      <anchor>a68cbf1a3572dc75aef5300f2afed15b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Observation</name>
    <filename>classcrf_1_1tagger_1_1Observation.html</filename>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a4b9bf438a35b9d72c098b8a7a7502883</anchor>
      <arglist>(Map lbInt2Str)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>originalData</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a6a2fe5ac460451832d40ffd256d15c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>originalPos</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a7b5c1f0e5baf46b88b10eddc8932bb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int[]</type>
      <name>cps</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a244b6d2a74d93e04ba53e687819a0dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>cpsStr</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a9eff4d25166907549a6ec286db6cb716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>modelLabel</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a61219102d93bbeb3495551a0ad82bc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>knownWord</name>
      <anchorfile>classcrf_1_1tagger_1_1Observation.html</anchorfile>
      <anchor>a7a356e6a726b81a4eeb53e25c2b7f6ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Option</name>
    <filename>classcrf_1_1tagger_1_1Option.html</filename>
    <member kind="function">
      <type></type>
      <name>Option</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a9ae663230bea89993782ead9ef620750</anchor>
      <arglist>(String modelDir)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>readOptions</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>abae376c16ff2a958bfd8d19d11c68f27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BufferedReader</type>
      <name>openModelFile</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>abe4bd96f7d799a80be3ec4bfdb5bfa6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>modelDir</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a2f40eb1811239e21cd0306b05240922e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>final String</type>
      <name>modelFile</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a060c453b1239bafaf0d87c7a388affa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>final String</type>
      <name>optionFile</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>ab7b89511a3ef544c6280d912c3c2470e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>order</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a26cae0d5297b5b93ec93b3864a577591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final int</type>
      <name>FIRST_ORDER</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a5cc0e701b07156931d98015bd0477bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final int</type>
      <name>SECOND_ORDER</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a1102021d2be028c2ca92c9cce8e17e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final String</type>
      <name>inputSeparator</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a4f8f284d263cff3ff79b1e07c33ba13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static final String</type>
      <name>outputSeparator</name>
      <anchorfile>classcrf_1_1tagger_1_1Option.html</anchorfile>
      <anchor>a7f3348a23862ec143c6bacf0220509b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::PennTokenizer</name>
    <filename>classcrf_1_1tagger_1_1PennTokenizer.html</filename>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>tokenize</name>
      <anchorfile>classcrf_1_1tagger_1_1PennTokenizer.html</anchorfile>
      <anchor>a963aa9f5f35478cc41f2ff72acb7ae2b</anchor>
      <arglist>(String str)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::TaggingData</name>
    <filename>classcrf_1_1tagger_1_1TaggingData.html</filename>
    <member kind="function">
      <type>void</type>
      <name>readKnownWords</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>a67700b3f5f8e9fc1bccc3d187584401f</anchor>
      <arglist>(String dataFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readData</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>aa3757de4d1f8d98535748294e1c74a74</anchor>
      <arglist>(String dataFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>a958768ab1621accd8c8ea93f99ee6094</anchor>
      <arglist>(Map lbInt2Str, String outputFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTaggedData</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>a084906055eb951fd9280b0ceecac2755</anchor>
      <arglist>(Map cpStr2Int, Map lbInt2Str, String inputFile, String outputFile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpGen</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>a5b20629f598d619be56c4672b123cd7c</anchor>
      <arglist>(Map cpStr2Int, List seq, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpGen</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>a2a334b2a73023173920ec2ee80d7fdf4</anchor>
      <arglist>(Map cpStr2Int, List seq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpGen</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>af76c6a5c7651008736131b6c028809cb</anchor>
      <arglist>(Map cpStr2Int)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type>List</type>
      <name>data</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>aae012823669c6bd7be674b852ab523b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>Set</type>
      <name>unknownWords</name>
      <anchorfile>classcrf_1_1tagger_1_1TaggingData.html</anchorfile>
      <anchor>a70c27f7818ad1c4f913d4467bd2c4ab5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Viterbi</name>
    <filename>classcrf_1_1tagger_1_1Viterbi.html</filename>
    <class kind="class">crf::tagger::Viterbi::PairDblInt</class>
    <class kind="class">crf::tagger::Viterbi::SortBeam</class>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>ae3baad39c4b24c4f3f065bba57167c4b</anchor>
      <arglist>(Model model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateMemory</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a1e42fc249057c161622e23b08b2c1dda</anchor>
      <arglist>(int memorySize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMi</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a0c0a25b634913a82332c30415409f5bc</anchor>
      <arglist>(boolean isExp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVi</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a49955d4139c99c1edfd9451b55b70395</anchor>
      <arglist>(List seq, int pos, DoubleVector Vi, boolean isExp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>af419f94e3b4d329c943cb51fc48b58b2</anchor>
      <arglist>(PairDblInt[] cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a6c40e41ee59945d99c1537ef5108276e</anchor>
      <arglist>(PairDblInt[] cols, double val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findMax</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a0f09bb9fe9a6e23869f2b603faa4b1e2</anchor>
      <arglist>(PairDblInt[] cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>viterbiInference</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>ad605cbfce3f7fbe958e5635cf47f635a</anchor>
      <arglist>(List seq)</arglist>
    </member>
    <member kind="variable">
      <type>Model</type>
      <name>model</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a40a610b979d8587f13bc230ee2d91e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>memorySize</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a4535e69e4d57c2baaac4edb772bf1762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PairDblInt[][]</type>
      <name>memory</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a5d7c4bc568e6501b177ce6263cf8fc7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>numLabels</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a8c9a4848e6405d14d0124cf0686bd457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>DoubleMatrix</type>
      <name>Mi</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a64b50a4ab5e1e0e7ca99010f16a7d8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>DoubleVector</type>
      <name>Vi</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi.html</anchorfile>
      <anchor>a79fdc992402a99918ab4da96b140a145</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Viterbi::PairDblInt</name>
    <filename>classcrf_1_1tagger_1_1Viterbi_1_1PairDblInt.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>first</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi_1_1PairDblInt.html</anchorfile>
      <anchor>ad534732fd2cbe203e1b7055beb652b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>second</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi_1_1PairDblInt.html</anchorfile>
      <anchor>a80e75bb3293901ba3b79cd0a0a5c3c67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>crf::tagger::Viterbi::SortBeam</name>
    <filename>classcrf_1_1tagger_1_1Viterbi_1_1SortBeam.html</filename>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classcrf_1_1tagger_1_1Viterbi_1_1SortBeam.html</anchorfile>
      <anchor>a3f15f74e155e390c1d69a2694fc48aa7</anchor>
      <arglist>(PairDblInt a, PairDblInt b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>experiment::Experiment</name>
    <filename>classexperiment_1_1Experiment.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a489236b1bac38bb491fb41331f5f4d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>constraint_type</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a711153cbf7f9263c3b4ad9401fbdefa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>original_simple_file</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>af1ca6cc18687be81fe454ab69ecbe9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>gold_file</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a44eeb71b713a1b60d998455ce353d04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>train_file</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a38908cb15592fb9fde7a16dc08db7c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unknown_words</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a616ebdc84f377a7a029e5c2945d6d0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>unknown_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a449c90ab5ca829ff11de1fd82db330a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>constraint_old_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a9c772c083078909fc5695e048b27c92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>mrf_link_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a85a13f454ab4084031e747ffac6ff448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>constraint_mrf_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>ac7ed2a0bc696bc6174c11cd41d3bbb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>result_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a8843571e93e2417fb3624649d53a97d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>lattice_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>ada94135c8d128d384d0575a7ddd7caa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>temporary_tags</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a25b529425b454004560c92a118d47add</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>num_sent</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a598317152e2b1a52faa122307127fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>num_constraints</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a466f61b03a465c23087e71bd532d826d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>penalty</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>aa1dd62432da529dde9b70f214b7270c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>desc</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>add351d39019d095acbc5837d42c1a483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>model_type</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>adbdb4aa150e05a4c8322d766bc62feac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>af497697aacea28828b90d6f9606dbf5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>unk_exp_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a86a616c409d1d123b67e15595b36f500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>full_exp_prefix</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a8fefbeec3c4e7e2596a58f308cead9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>train</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a9c3e2ec73c6adcb174f7d182a30ca71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>unk_thres</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>aa43328b8f77bbc848302b13b02ba6bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>num_sentences</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>ad0b7a95c9f9bc79066b39f679d7764a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>num_cons</name>
      <anchorfile>classexperiment_1_1Experiment.html</anchorfile>
      <anchor>a9f480a3647686b912674ca1cb021ed12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>format::conll::ConllWord</name>
    <filename>classformat_1_1conll_1_1ConllWord.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>ad06b3bcfab12767e82c5ae7d8826fe7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>root</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>a8ffcacf4c8fac736f7ebd9a0eca9c40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>aba1e6a4093a27dc968183b65ef983e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_label</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>ac03ffeb2276d80ada75187b8db8a5ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>format</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>a981cd2b5097e89490160bf84fe47be2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>num</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>af30e4fe3d25dbc554344f19a4b885494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>word</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>adadded95ad1ac3f2028b9c22e0bdf3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>pos</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>a5c51b02c86ab39e5f1d38eab2eb4af12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>head</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>a8a15501900b7ad9fcbfde965b50ec055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>label</name>
      <anchorfile>classformat_1_1conll_1_1ConllWord.html</anchorfile>
      <anchor>a64e431b7573fda235d21f7693edc7108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>format::conll::ConllSent</name>
    <filename>classformat_1_1conll_1_1ConllSent.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>ab449fb1d700d587dca632585be5f9142</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>enum_words</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>a219e337408f3ea883becd34f260a28c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__iter__</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>aea5832f2c0924bead6ddc77c73e3351c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>a8b853efaa60d79267082081c26d3c1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_labels</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>ad587ddeb08f8456739731fa7c763a02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>format</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>a84db8c6b68a0fe944db3582729395610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>words</name>
      <anchorfile>classformat_1_1conll_1_1ConllSent.html</anchorfile>
      <anchor>a2946a3f86a90419ea9cff7cb581aa8db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>format::conll_tag::ConllTagWord</name>
    <filename>classformat_1_1conll__tag_1_1ConllTagWord.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagWord.html</anchorfile>
      <anchor>a20aa0c59452062341e173d2c7b7767a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagWord.html</anchorfile>
      <anchor>a1c175a19230cf99cf75b05e17b52ab51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>pos</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagWord.html</anchorfile>
      <anchor>a6471b1d9f811ae6638fe3a4a7e8f8500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>word</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagWord.html</anchorfile>
      <anchor>aa80dd4140490c38f93a4336e6116e111</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>format::conll_tag::ConllTagSent</name>
    <filename>classformat_1_1conll__tag_1_1ConllTagSent.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagSent.html</anchorfile>
      <anchor>a4a3f6486d1726332f04158a7d178ac92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>enum_words</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagSent.html</anchorfile>
      <anchor>afa14cfd57d5ee6dfd90224e852e0c6b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__iter__</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagSent.html</anchorfile>
      <anchor>a0ef1ed7a5126744d3d53b19c07d4b7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagSent.html</anchorfile>
      <anchor>a6055bbcfff581e8c60644e313f5f1a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>from_conll</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagSent.html</anchorfile>
      <anchor>a00c45e00080833078b129e19e0cfa6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>words</name>
      <anchorfile>classformat_1_1conll__tag_1_1ConllTagSent.html</anchorfile>
      <anchor>aecfcc137bc56f86019f099e6187336a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>format::simple::SimpleWord</name>
    <filename>classformat_1_1simple_1_1SimpleWord.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classformat_1_1simple_1_1SimpleWord.html</anchorfile>
      <anchor>a05af4dcd185fcff41b74e8509e302968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>strip_pos</name>
      <anchorfile>classformat_1_1simple_1_1SimpleWord.html</anchorfile>
      <anchor>a8802d7ba16fd5ab0861358966f5d7236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classformat_1_1simple_1_1SimpleWord.html</anchorfile>
      <anchor>ac6f89962d6a259096b0e4d0ad0a356cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>pos</name>
      <anchorfile>classformat_1_1simple_1_1SimpleWord.html</anchorfile>
      <anchor>aa1abf715e954b0daf07046fc8ca9f768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>word</name>
      <anchorfile>classformat_1_1simple_1_1SimpleWord.html</anchorfile>
      <anchor>ae981daca0c0f5e82d6e9e745ac5a09e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>format::simple::SimpleSent</name>
    <filename>classformat_1_1simple_1_1SimpleSent.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classformat_1_1simple_1_1SimpleSent.html</anchorfile>
      <anchor>ae1ae05e6abaf44cc556c923da5699ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>enum_words</name>
      <anchorfile>classformat_1_1simple_1_1SimpleSent.html</anchorfile>
      <anchor>a0ae8d170a77b69c42a6124fe648ab6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>strip_pos</name>
      <anchorfile>classformat_1_1simple_1_1SimpleSent.html</anchorfile>
      <anchor>a37c8c21b77c9e2c10f768271fea57458</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__iter__</name>
      <anchorfile>classformat_1_1simple_1_1SimpleSent.html</anchorfile>
      <anchor>ac028e29fbffbe4b8e41ed85272c05f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classformat_1_1simple_1_1SimpleSent.html</anchorfile>
      <anchor>a030a8fdd326a759a9de9c8ca39cc4396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>words</name>
      <anchorfile>classformat_1_1simple_1_1SimpleSent.html</anchorfile>
      <anchor>a5a89ed7fd128d563585eabc801396623</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>formatting::Converter</name>
    <filename>classformatting_1_1Converter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__call__</name>
      <anchorfile>classformatting_1_1Converter.html</anchorfile>
      <anchor>aa837adfe8b8b6c686cbc7399db8baacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>convert</name>
      <anchorfile>classformatting_1_1Converter.html</anchorfile>
      <anchor>a7dca32288a0528afe44baece7cf74e93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>formatting::SimpleSentConverter</name>
    <filename>classformatting_1_1SimpleSentConverter.html</filename>
    <base>formatting::Converter</base>
    <member kind="function">
      <type>def</type>
      <name>convert</name>
      <anchorfile>classformatting_1_1SimpleSentConverter.html</anchorfile>
      <anchor>a2d86c1c5254342f61e8d6b1bd8230e54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>formatting::SimpleToFlat</name>
    <filename>classformatting_1_1SimpleToFlat.html</filename>
    <base>formatting::SimpleSentConverter</base>
    <member kind="function">
      <type>def</type>
      <name>sent_convert</name>
      <anchorfile>classformatting_1_1SimpleToFlat.html</anchorfile>
      <anchor>abf6445704e25b31ff958ddcaa0ff80f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>graph::StaticDescriptorInitializer_graph_2eproto</name>
    <filename>structgraph_1_1StaticDescriptorInitializer__graph__2eproto.html</filename>
  </compound>
  <compound kind="class">
    <name>graph::Graph_Node</name>
    <filename>classgraph_1_1Graph__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Graph_Node</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3e14dbbb1960cdceb42a22f191851a6b</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1b117f5f955e29ec6e990e50cc2026e0</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1292a0d7a11d6709ee0a3bffd699ddc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a458590dbf61732e966b050e46a5b9ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a7161b02ad669bb3c0eba53b5231467d9</anchor>
      <arglist>(Graph_Node *other)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Node *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a155efedc0707beb8b2b1031acc23fb4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a5f3eca853b1a6ab6d72b95fc63edc476</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4c182ee38bc9ad649a9ae67f9ba5ae18</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ab2ba680d4220f5c206b77aa8dafd5816</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a979ddc18e4e1238cf396311c6622ef43</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4bddb506c7141091ad3989769a535604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a60da720d929b8e8d5aefd410466c3871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ab25a1fde48166c7639063b5750b9887b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3d4ce335c0bc53aa858c0e7a87a257e7</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ac36ab307cedb19991696faea055dc7e1</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1ef9e5c555daa744d1469a0c134a636d</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a6a61a74708a5efef4c4103e70d9f2345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3a34aecc5605ed193bf579d2ef635820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a13671ab38b485b1ca616604da78e0342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a410170becd9a924a4e3d68bc344f8091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a5576e6256d0ace782444007de0ad5c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3855150c0788095990243586449ad2bd</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a9a4e1f3901310d63d085c1320c611732</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a45185f565e515460b8f67aa35e58b0b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a32d2b07f0ec89ac74ae1c27d21f0920d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ac7d3363065ac3e53045612da423e8063</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a15d313094babc84b96727fc0f3c1d8ec</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1919f6fa3da8bfd42a347bf6600ce8b8</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a64ce191c10f7be3108cfe4de3734a24e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a6182277dadee1694a4f934a62b37a0f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_size</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>aa33c2e20c45055a5f5c64fde8f475b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a71d1bf9742cb25c8c902a1e04f9c5117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::Graph_Edge &amp;</type>
      <name>edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>affb8668609150e1076fc749edff09ad9</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Edge *</type>
      <name>mutable_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a9fa2877552b88627c05bd22d418ecd33</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Edge *</type>
      <name>add_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ac7df0608e84959110b7a40b099012416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Edge &gt; &amp;</type>
      <name>edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a8d151fb4b6cf825838b1bcc3c9309935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Edge &gt; *</type>
      <name>mutable_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a7ee0a29b23254291137f2ff6d090fa08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph_Node</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3e14dbbb1960cdceb42a22f191851a6b</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1b117f5f955e29ec6e990e50cc2026e0</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1292a0d7a11d6709ee0a3bffd699ddc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a458590dbf61732e966b050e46a5b9ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a7161b02ad669bb3c0eba53b5231467d9</anchor>
      <arglist>(Graph_Node *other)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Node *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a29347d8834678e64e08cddccc5c0a3dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a5f3eca853b1a6ab6d72b95fc63edc476</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4c182ee38bc9ad649a9ae67f9ba5ae18</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ab2ba680d4220f5c206b77aa8dafd5816</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a979ddc18e4e1238cf396311c6622ef43</anchor>
      <arglist>(const Graph_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4bddb506c7141091ad3989769a535604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a60da720d929b8e8d5aefd410466c3871</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ab25a1fde48166c7639063b5750b9887b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3d4ce335c0bc53aa858c0e7a87a257e7</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ac36ab307cedb19991696faea055dc7e1</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ab38db8ff30a7ec5d376f07cb5e7a329a</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a6a61a74708a5efef4c4103e70d9f2345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>adb976064f2dc0f91f69766e8477e2715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a13671ab38b485b1ca616604da78e0342</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a410170becd9a924a4e3d68bc344f8091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3a33f43632377ce6b0709364b3122a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3855150c0788095990243586449ad2bd</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a9a4e1f3901310d63d085c1320c611732</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a45185f565e515460b8f67aa35e58b0b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a8fb9a4c28287a6568798ca99cf2fcd77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ac7d3363065ac3e53045612da423e8063</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a15d313094babc84b96727fc0f3c1d8ec</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1919f6fa3da8bfd42a347bf6600ce8b8</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a88bb3c0873b401bc7057b829b141ee40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a44b318000f10362c94dd75f2d6dd340f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_size</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>aa33c2e20c45055a5f5c64fde8f475b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a71d1bf9742cb25c8c902a1e04f9c5117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::Graph_Edge &amp;</type>
      <name>edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a22a50a45912b9092b9226607a35c1224</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Edge *</type>
      <name>mutable_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ab67ca8df7129110d5e50550ada39ee48</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Edge *</type>
      <name>add_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a1217ffa590fdd95eab7d8f9d3b464b4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Edge &gt; &amp;</type>
      <name>edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a39199d3d605e718a856c869eed3ba256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Edge &gt; *</type>
      <name>mutable_edge</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3ec630a7375b6c99d6a2808a5f9e430e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a979891540d461fa3c5d04e697a9f404e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Graph_Node &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a205f84598c3087dc21ac328b25f0d7f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a2a1ebf9c3fc400c7d650576338e3fa97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Graph_Node &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a9cd51eafd2aadb24dc3af6ca9fd67051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a64bb5b3869f25b9090ab28bb9a36771c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>ad7acd0364613fb8c7705b73c4501f1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEdgeFieldNumber</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4e420c8292b17a5c36c317485d324025</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3216c708da10839178deebea43d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4c9d7eb8f9e30e490c8bcae70e629de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>aac10332314561225d8ac09b797223f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a3216c708da10839178deebea43d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>a4c9d7eb8f9e30e490c8bcae70e629de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Node.html</anchorfile>
      <anchor>aac10332314561225d8ac09b797223f3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graph::Graph_Edge</name>
    <filename>classgraph_1_1Graph__Edge.html</filename>
    <member kind="function">
      <type></type>
      <name>Graph_Edge</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a1b8cdd9aa0720a4b78149954fb109810</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Edge &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a271827f73c4c315e95210cccb000e8f1</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ad3839379afb5e8a8965bbfa48e6ab52c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab23e809a21f594cc319a0d1f781fa384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aaaf2710e8754faf829d2966551176aac</anchor>
      <arglist>(Graph_Edge *other)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Edge *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a724cb0402b0736d438d0e99c04e83548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ae610eaa471b68f5c8effe5bd28b5cf8c</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a21df881962677b6db77cd0fc6fdb8086</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a70c9bb7cbaad6263cf5b67a61315daaf</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9c6886542c53a31f42ae5ea9afa826c2</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a2bbcc59dbf4e00c8f3007fa89b5470a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9d94dfbfe951e8e834ccf837901c51dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a76a24bfd2a4d0f0f79df2014bb4d184d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aed892b9333d734dde9a338fafa4ea497</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a0f0582860901bfb055dda63c7193e7e3</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ac4f89968c18ff0151c7536e843d5760a</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aeb53e0cc707fcb6d3e329541b293d919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9f96696a40f9f41012fd4bb7883b031d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a0190e8f222646d5e304732d71d28b310</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab04135cf552e93eceb7abb38077140ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a4e73f471d038367947b20597ace18391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9d0281649c61d01a499e9d4a0dcc35bb</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a002aa4e1a3cbb1d3ae04f811ad5499f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a88236828360ba4677de28dcd11a0c892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a30909562219911929f8af6402de78abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ae0b7d66524cdb3c239a4658c6ebe49ed</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a5e28d3ae41aa291b904c97f8086e6599</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab5e92ddc8c7a81e0e7689cb86dac75ce</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a35d039789edd950847ab757c9b0ef07a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab85ac3ad8bb604fa41030a547b2763ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>af80c945f9d34527de487207bc9553776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a10c4766efe37b9ebf33d94e58f5d34d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aedbaf240950d5029ab5c13a1b09c19e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a61b1469e26d71c6b2673a6a3da5a057f</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph_Edge</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a1b8cdd9aa0720a4b78149954fb109810</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Edge &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a271827f73c4c315e95210cccb000e8f1</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ad3839379afb5e8a8965bbfa48e6ab52c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab23e809a21f594cc319a0d1f781fa384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aaaf2710e8754faf829d2966551176aac</anchor>
      <arglist>(Graph_Edge *other)</arglist>
    </member>
    <member kind="function">
      <type>Graph_Edge *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a0758753878823f19c37d391d965a4fc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ae610eaa471b68f5c8effe5bd28b5cf8c</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a21df881962677b6db77cd0fc6fdb8086</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a70c9bb7cbaad6263cf5b67a61315daaf</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9c6886542c53a31f42ae5ea9afa826c2</anchor>
      <arglist>(const Graph_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a2bbcc59dbf4e00c8f3007fa89b5470a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9d94dfbfe951e8e834ccf837901c51dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a76a24bfd2a4d0f0f79df2014bb4d184d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aed892b9333d734dde9a338fafa4ea497</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a0f0582860901bfb055dda63c7193e7e3</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a864e056928fefb48751ba22f97064d3f</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aeb53e0cc707fcb6d3e329541b293d919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a323a96197c86ad300ddf7f63cda021b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a0190e8f222646d5e304732d71d28b310</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab04135cf552e93eceb7abb38077140ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a3cb43575a65d2d2b4b3f10f2f368a6e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a9d0281649c61d01a499e9d4a0dcc35bb</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a002aa4e1a3cbb1d3ae04f811ad5499f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a88236828360ba4677de28dcd11a0c892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a1c2c35183332758b8519875e9a6d9bad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ae0b7d66524cdb3c239a4658c6ebe49ed</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a5e28d3ae41aa291b904c97f8086e6599</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab5e92ddc8c7a81e0e7689cb86dac75ce</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a79e66e701e4f30c74db839df05649037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a932083f61d90db20cf811adaf02503fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>af80c945f9d34527de487207bc9553776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a10c4766efe37b9ebf33d94e58f5d34d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ae2c9acb9f4e76e8228947b44eba690f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_node</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a61b1469e26d71c6b2673a6a3da5a057f</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>ab32bdc6778944caff5d93501c0d8d202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Graph_Edge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aec4df3118608258ce28ce41b217abebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a3123a39b6f9e2e2fac9035944ce1d589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Graph_Edge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a14f42efa9ab2cf6559077dd0fdd05f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a72855929893523a2ab0b28c29e6de404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a6a3f7f24e4560ba96be0534f45781197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kToNodeFieldNumber</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a15d36a93bd22e587021c53b7b3e16e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a3216c708da10839178deebea43d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a4c9d7eb8f9e30e490c8bcae70e629de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aac10332314561225d8ac09b797223f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a3216c708da10839178deebea43d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>a4c9d7eb8f9e30e490c8bcae70e629de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph__Edge.html</anchorfile>
      <anchor>aac10332314561225d8ac09b797223f3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graph::Graph</name>
    <filename>classgraph_1_1Graph.html</filename>
    <member kind="typedef">
      <type>Graph_Node</type>
      <name>Node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2a148e8d341b4850e506e4ca9a10845f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph_Edge</type>
      <name>Edge</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ae7ba626728a03ceb51bccd5ee4ec72ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph_Node</type>
      <name>Node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2a148e8d341b4850e506e4ca9a10845f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph_Edge</type>
      <name>Edge</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ae7ba626728a03ceb51bccd5ee4ec72ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a400fcc675124ef60cbc0d6ee0e25736c</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2bb8b8cdf8632d9a9453b3f67d0eef9c</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a4944a9b85ffdbecf91ec2454f915b411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a93081ad4e0af2767c6f57004f5f59dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a8e3853558c7080802e9362e869206156</anchor>
      <arglist>(Graph *other)</arglist>
    </member>
    <member kind="function">
      <type>Graph *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>acd6092ae47d8f7108ececea2c47bdd06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ad8df9792d5748b48235e04e64abf84fd</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ab52f15c185ebf734246297add1064b4a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>adea321f8fe4c18ea4d2364c8b8dd54df</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a918dc2343415dd9b7d0deb2c307bfb9d</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a13680e6719e42aa3ebedfeb61ff06014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ac91ebe6fc014af3707afd28a01bf30cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ada721f70b6221bd45c0619de513bc138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a3a08a0c8418c6317a890296c25f71b9e</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a69559b8d11a32f5ebe89a0c86b936ed6</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a10d32c2e5773f690ac98879300e5a9fa</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2a609292df58baec63cb473317334301</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a768343926fbd6a32cb08ec9580a46443</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a8a43e784467fb4eda053810d73725508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ae493d41f9b434145be083cbc2044c1d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a7063c43da1905648d2948ce1c13d38ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ab04d4c18c9ab77ee27d5e66b92624bdd</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2e33bd3438f862850c7f2fad8bb3e544</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a829bbd790ed76b6b1729d4c719b413d7</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ab3b46393b1918c6608320f57d9486f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a95233ad394bd217ae7b49bb4498e48f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_size</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a005baadb25b7b9611082a1c3f285cdfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ad4899b84d05fc768fa335047725eaf24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::Graph_Node &amp;</type>
      <name>node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a16c29597fce7e931ed6fa7ff051a722e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Node *</type>
      <name>mutable_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a8c2e072edc54bb1450c7d9753e52e99e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Node *</type>
      <name>add_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a853cde9df8f6492ca9b949c0e82f8eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Node &gt; &amp;</type>
      <name>node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2bd47191520de5c1dc375cea07f61330</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Node &gt; *</type>
      <name>mutable_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2a98be1966ff5f910c8746ffc563a1a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a400fcc675124ef60cbc0d6ee0e25736c</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Graph &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2bb8b8cdf8632d9a9453b3f67d0eef9c</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a4944a9b85ffdbecf91ec2454f915b411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a93081ad4e0af2767c6f57004f5f59dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a8e3853558c7080802e9362e869206156</anchor>
      <arglist>(Graph *other)</arglist>
    </member>
    <member kind="function">
      <type>Graph *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a812a4848569ca342a12b6b7a824b4118</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ad8df9792d5748b48235e04e64abf84fd</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ab52f15c185ebf734246297add1064b4a</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>adea321f8fe4c18ea4d2364c8b8dd54df</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a918dc2343415dd9b7d0deb2c307bfb9d</anchor>
      <arglist>(const Graph &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a13680e6719e42aa3ebedfeb61ff06014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ac91ebe6fc014af3707afd28a01bf30cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ada721f70b6221bd45c0619de513bc138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a3a08a0c8418c6317a890296c25f71b9e</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a69559b8d11a32f5ebe89a0c86b936ed6</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>add26e27feb424b498dc6e7c54250886b</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2a609292df58baec63cb473317334301</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>aeafa7e8b0429a852055f80767941cb38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a8a43e784467fb4eda053810d73725508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ae493d41f9b434145be083cbc2044c1d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>aa6079fefaedc329a72194ed083c37413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ab04d4c18c9ab77ee27d5e66b92624bdd</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2e33bd3438f862850c7f2fad8bb3e544</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a829bbd790ed76b6b1729d4c719b413d7</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>abcd3b4981aab3985879a10d16e296cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a95eb83261e9a9f59cb20b6b850c3561c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_size</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a005baadb25b7b9611082a1c3f285cdfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>ad4899b84d05fc768fa335047725eaf24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::Graph_Node &amp;</type>
      <name>node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a0d740c76c632f0670da81e6b4535d169</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Node *</type>
      <name>mutable_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>aeae06c451a4508a381f20a80322ea341</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::Graph_Node *</type>
      <name>add_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a3c2452c8ed3a663cbfb9bd76acb67dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Node &gt; &amp;</type>
      <name>node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a603d1f721a181ae75db8e79e42aa86e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::Graph_Node &gt; *</type>
      <name>mutable_node</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a54b5cfd7fe26ff67c3d8da6acd69e9b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a8bfea158f8526357050564853da8e82c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Graph &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>afa1437b79a9597004ba39bdc4df16fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a49c810d7ea8428dc769f56d61a24e052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Graph &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a034b07f25ab695cb26a0bd5b307d72e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a2969c2c72eb20aaca51ff8e34e607914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNodeFieldNumber</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a3784b95d1729d17dcaf95adbda08c119</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a3216c708da10839178deebea43d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a4c9d7eb8f9e30e490c8bcae70e629de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>aac10332314561225d8ac09b797223f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a3216c708da10839178deebea43d6f0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>a4c9d7eb8f9e30e490c8bcae70e629de5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_graph_2eproto</name>
      <anchorfile>classgraph_1_1Graph.html</anchorfile>
      <anchor>aac10332314561225d8ac09b797223f3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>graph::StaticDescriptorInitializer_mrf_2eproto</name>
    <filename>structgraph_1_1StaticDescriptorInitializer__mrf__2eproto.html</filename>
  </compound>
  <compound kind="class">
    <name>graph::State</name>
    <filename>classgraph_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a6adb7a9d2cd11d5be8e4f2b66e0a8be9</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ae565f2fef5dc685a53d67b1449672d53</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a6949f7b56f23e1f22f6ffd92cb22a339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a7449bfa3aeb18cae2903328f38734898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a849d6b8710f8f11340460166556af6a4</anchor>
      <arglist>(State *other)</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a86924d60268be8025b78b75764061494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a4d9ab6623e196805d8980da3c86c282e</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a30c21580da4c4a0aabb377ea18faa6ca</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>abfbeda00609f734e2bd45532e3b64869</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ab523b1c4f8d71da48e446e3884d6027a</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a7e43bad443bae237f2d8f3da129c29b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ab4efc2c78ba99b00f8fdab324191dc82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a22390019514703125f352bad7f38e023</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a8d96e8a53c415c86a55186c99f6f09e2</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a33dde93606b7e7e3f68f17fa39c9600c</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a5c2538044c4523a9bdaa9bcdecc66045</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a3c945006c8e96f17c55ad4c6461bf559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a510521753605235c819924fe49a8b7ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a2669d4177d26e3feac6d3dfb58d8c10f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>af5d8971127b8388c60d286a26551bf93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a416aab28308b055a2e54e7fc85af56bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a6c8d8623291ab2af0593785d73a5c52d</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a9ec12f5818b8bf307eaf25cadb81394b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>addbbc517bb046fc9e01888084a0c210d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a0357428ad565c96779a7c48056cd1add</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a47942a01a50058ffe3dc0727905e9716</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a9cd3283f813138b76481ca78732137ce</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a625e53965b650ff0c0ee33af336a95f7</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>aebe2f189ede79c89a46de5c86be0daa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a8548defb5e484193d98b376d116c3d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>adbd7ef24b794167795d267dfbd1d0646</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ae565f2fef5dc685a53d67b1449672d53</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a6949f7b56f23e1f22f6ffd92cb22a339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a7449bfa3aeb18cae2903328f38734898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>affd9e019264a3a2416563d91dbed1f27</anchor>
      <arglist>(State *other)</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a28b26e430542a30cfe3b79a0b86eacb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a9f329c3d5f8b4d2e42c7a7b8e9b2a5e6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a3f0b1f20bac33c7254938c2e4dc44961</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a2e62ade5c5af34b509befbbb2c36afd3</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a696753acbfc23dc59a3a4f47fd99b615</anchor>
      <arglist>(const State &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a20caa4e8b3584fb112bfc2b9a8e082ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a01736d44a021a0bbc28676c35de6339d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a89767644e0b92a1be04e504b35504bbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ae0c84f0786cb0690d7e473a718a3365d</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a8261a94d9575d04e9dde511a2e1e16ce</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a9311fff53a672da2c9709ad5f90ff092</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a3c945006c8e96f17c55ad4c6461bf559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>af6574e950b5691fba98109d1c5a797e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a68a4cdaa1fdd3c9efa19908182efe1d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ae1a090d3c77ac4080062d6397331be4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a7e1ceeb0ab170c31bdc0a723036f5da3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ae08cae292bbbcf35ddc24ae7e7e39eda</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>af5d76492e6f23b161ea418bd0191ea48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>aa20bd8660731de966ba650d14c7ed353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a574d6c801f38a0f41c222cf8f5f5a676</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>aafc8a32bff5a6e4b8702d00b0963e12d</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a501eea62783e326dcabf304efe3776e6</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a429836f891cab177ebbc26b4631c554a</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>aaab551134a99085aae249d9775dd5669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>ac45e9075ffe1302d36974886e4d725f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a84099504e494d0d9ba226d60bd8e5db7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const State &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a3b976f5020643cda46f45404a5838acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a3e8f14326a5b160291b2dc219270d685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const State &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a585b25fdad9a4a8fccbab2d0274ce292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a150e9e7c58dd46aaf1dd05cddf8bbb96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a47c9ea89be631c1a5135c0b2d89a9ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1State.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graph::NodeStatePotential</name>
    <filename>classgraph_1_1NodeStatePotential.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeStatePotential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>abe93f0f8c63b6b1861903c72d29bf718</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>NodeStatePotential &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a004077f286e88ffafc8b40300d44e201</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>add63ea9eec1f3caff6ee19c4525e5972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>abb591e0b424e774040f8109c92413f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a13b774b1f32294830d162db5e80eb3b7</anchor>
      <arglist>(NodeStatePotential *other)</arglist>
    </member>
    <member kind="function">
      <type>NodeStatePotential *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a6f819e5355771389d1e278e8919d25cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>ad843be9e9b83a35fa176832eb1bd5b85</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a866262febdb1454339ec4c5df39a7638</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>ad9279ae8785df8040b597313593a8693</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>afed738d7eb798cfa66f0cd24ef51c19f</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a9f8b12b2fcf2faa5339aa1717a5fb285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a22b76e57f65c4389c74ffc73e25beff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a8a183bdcd7b8a4a0de3d52db9c25c4e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a23e04477a52de0474588352745d87332</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a31c56a9c6685e3ebfccf1b20d6126818</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a97a15dedabb827d070c9866eec649ca3</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aed31dd680aeefcc638f69aed20feaa89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a747619a9004ecad14ccf201304d2bca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a360c4a144fbf3d177d98617b5b680917</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aa742b7c0f5560b3ef8d9a611681cf73f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::State &amp;</type>
      <name>state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>ac914f8afa03faa9de6db823c5f21b7cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::State *</type>
      <name>mutable_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a8f877868f7590b5be5aae6a78279a75f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::State *</type>
      <name>release_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a81e5e07ae88c654ef848a8ddfbec8148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a2ef72c30a1c13aa21170eef7a43bde34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aac3b8f48c1b6320a6381a16d8743073e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a69e4cc64ea70c2153167a1c0f738bfbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a68c6f680cb958390f116dcabb4c0a007</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeStatePotential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>abe93f0f8c63b6b1861903c72d29bf718</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>NodeStatePotential &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a004077f286e88ffafc8b40300d44e201</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>add63ea9eec1f3caff6ee19c4525e5972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>abb591e0b424e774040f8109c92413f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a13b774b1f32294830d162db5e80eb3b7</anchor>
      <arglist>(NodeStatePotential *other)</arglist>
    </member>
    <member kind="function">
      <type>NodeStatePotential *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>af5fd80aeb33df9a2d08e6fe6b2f6b0e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>ad843be9e9b83a35fa176832eb1bd5b85</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a866262febdb1454339ec4c5df39a7638</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>ad9279ae8785df8040b597313593a8693</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>afed738d7eb798cfa66f0cd24ef51c19f</anchor>
      <arglist>(const NodeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a9f8b12b2fcf2faa5339aa1717a5fb285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a22b76e57f65c4389c74ffc73e25beff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a8a183bdcd7b8a4a0de3d52db9c25c4e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a23e04477a52de0474588352745d87332</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a31c56a9c6685e3ebfccf1b20d6126818</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a6ec1fd079d7e4ba59d85aadb77b153a5</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aed31dd680aeefcc638f69aed20feaa89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a9d32e1f4f52612fb611c3cca90461266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a360c4a144fbf3d177d98617b5b680917</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aa742b7c0f5560b3ef8d9a611681cf73f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::State &amp;</type>
      <name>state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aa4662ec90fdc85d9d5eef76b8513ba40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::State *</type>
      <name>mutable_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a70ac4460fc2c550288b8471d9edddd24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::State *</type>
      <name>release_state</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aea68f8c3b4d98f01ac816b5b452ef726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a2ef72c30a1c13aa21170eef7a43bde34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aac3b8f48c1b6320a6381a16d8743073e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a69e4cc64ea70c2153167a1c0f738bfbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_node_potential</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a68c6f680cb958390f116dcabb4c0a007</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a5f6ce554fba782fde014857a38f07872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const NodeStatePotential &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>ac6e718a6724be0f218338af78a5cdb4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a376b2186e41466cbaa8dfdb45d5458b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const NodeStatePotential &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a7a7d219bf423b094346b3fd9effb8658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStateFieldNumber</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a265420a2f3c1e9f0eeda17b43ea4d21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNodePotentialFieldNumber</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a3a181bd7c694d93d54519675fee7218f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1NodeStatePotential.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graph::EdgeStatePotential</name>
    <filename>classgraph_1_1EdgeStatePotential.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeStatePotential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a07c6b74b96e49c9dd58dd6801d331734</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>EdgeStatePotential &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aa84be9ac7930900ea711dd50c61a992c</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aa3d87d59c31b9583a2723bf7d838b7e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ade01e66023e544434ec77933186df507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ae27775781654c45f108db1186e4702a7</anchor>
      <arglist>(EdgeStatePotential *other)</arglist>
    </member>
    <member kind="function">
      <type>EdgeStatePotential *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>abcc4686ae346371daef72453939d9897</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ac83756fba5134e67c234a0d6f647588d</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a66c8261423f9120136fb74142cd47483</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a8f55d319916f544ccef4671d036dac9e</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>abff176deb7b6e4934b2d7cd4d4b1bcf0</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a83c0c837389b1ae8f84bcb894022ae35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a6f9a1a9fb84714dee4bf5b4b24494ead</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a0a60ec89c3fcf88ec83e01bcc5d89279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>adfc707ab77b2d69e5ed5f4770ed3f680</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ad02fa972c66749f49ce34430af59a2b9</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a33c5ffdfb724a6abafecd982ea9d2f1d</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>acd032f41037bb2d600aead1931aba43c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aedd1ff1e5220e39f32e629f39747e22a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a5f9ee1db6bb4e2db964624974a6c506f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a5a02ced96b71190c158d0fb81bf00fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>adcdf4b14113ac0259bafb2bf142d19f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ab23b81819bc6d9dd71d319c49412c8d8</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a1c2e8dc8b84f5aacf08e5c46866f04c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a7f30d4b4ff6eb1c6695799be4eeefea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>acdc19ad89d3da217371556b1d069a971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ad498cc27a96c02d74bc44718f289771c</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a74db33f4d6408cb2f00a4c02d5b8d492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a8962a3e1a075a505dc2b212dd0308791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a841fbeee1c881516d881fb0351f59662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aafc6b6bf33dead5ba6f14120af0c3a1f</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeStatePotential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a07c6b74b96e49c9dd58dd6801d331734</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>EdgeStatePotential &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aa84be9ac7930900ea711dd50c61a992c</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aa3d87d59c31b9583a2723bf7d838b7e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ade01e66023e544434ec77933186df507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ae27775781654c45f108db1186e4702a7</anchor>
      <arglist>(EdgeStatePotential *other)</arglist>
    </member>
    <member kind="function">
      <type>EdgeStatePotential *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a6f0a8292d587a2275ec9ea0d329ff02c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ac83756fba5134e67c234a0d6f647588d</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a66c8261423f9120136fb74142cd47483</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a8f55d319916f544ccef4671d036dac9e</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>abff176deb7b6e4934b2d7cd4d4b1bcf0</anchor>
      <arglist>(const EdgeStatePotential &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a83c0c837389b1ae8f84bcb894022ae35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a6f9a1a9fb84714dee4bf5b4b24494ead</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a0a60ec89c3fcf88ec83e01bcc5d89279</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>adfc707ab77b2d69e5ed5f4770ed3f680</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ad02fa972c66749f49ce34430af59a2b9</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ae394d1b9b82141a8b358a3adbc06c88d</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>acd032f41037bb2d600aead1931aba43c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aae22278c4ce7ca0e25385e9a9212d861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a5f9ee1db6bb4e2db964624974a6c506f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a5a02ced96b71190c158d0fb81bf00fd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ad678b0868680612ca50ef3bedf14b462</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_from_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ab23b81819bc6d9dd71d319c49412c8d8</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a1c2e8dc8b84f5aacf08e5c46866f04c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a7f30d4b4ff6eb1c6695799be4eeefea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a5f8bb1f4044636b27eba6e50e294bcc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_state_id</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>ad498cc27a96c02d74bc44718f289771c</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a74db33f4d6408cb2f00a4c02d5b8d492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a8962a3e1a075a505dc2b212dd0308791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a841fbeee1c881516d881fb0351f59662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_edge_potential</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aafc6b6bf33dead5ba6f14120af0c3a1f</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a3f80b4ecaf2002b2f15ceeacc886b3f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const EdgeStatePotential &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a4e8c1d4812d4419c4304cfb9013ad7ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a2256743e6b7a1cb3df066e83d437dd3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const EdgeStatePotential &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a96e42fc32c65aa17a1482bd1a0d24ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFromStateIdFieldNumber</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a74b8281941c70867a54fa40620a3e571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kToStateIdFieldNumber</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a88d6891e1cf9539078473b830215f721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEdgePotentialFieldNumber</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a25bac96c29c696a2ba0e8a247f07dead</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1EdgeStatePotential.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graph::MRFNode</name>
    <filename>classgraph_1_1MRFNode.html</filename>
    <member kind="function">
      <type></type>
      <name>MRFNode</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a021b05b80147363c7e6712f48d44a0a3</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MRFNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a24e99e7e39879fdb7e5ba3457e05f711</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a8716f067ae2c0b732dbe8e808e58c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>abdd95998aa20cc6e28e69768da470c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a6dbf7084428bf6caece3fb82097f1944</anchor>
      <arglist>(MRFNode *other)</arglist>
    </member>
    <member kind="function">
      <type>MRFNode *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>af2b1e723509a0a3cd88f64d5309dd3d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a9597eb49cdf67bc0fcbdf2fd80df98ee</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a9c35a74300cf3dca0218bcaeab056068</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ab7f56050e7e981a5aea088fc4703a03b</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ac4758815f0eb1ccb68720627100fbeb5</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a610d843b6af3c9943e096adae1c878b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a4ee069fb613a4c42ce0b46a092905989</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ab4cddf5ea1745f095b447d80a7e317b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a7d517e721e300ebe179ef71f53ee2665</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a7d0379969f1c04b3753f3af41fcdcd8d</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a431f40e14bf444513150bf03d8a02863</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a420b833847841bcbcbbe9baf10d42876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a5d30d52a630524b309c9cbdddca21f2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_potentials_size</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>aed75e0bf0b6fa5b3ae987510ad1dd75e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a96a52fa9efd3aa762312bfe27ca05927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::NodeStatePotential &amp;</type>
      <name>node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ac1f7d6be6271459b95b37029f8cd31d5</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::NodeStatePotential *</type>
      <name>mutable_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a9edb6b65ffa1013096b7c47e0efaf0fe</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::NodeStatePotential *</type>
      <name>add_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ae1315322d7c8e26b8a38cc7ba1bb8d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::NodeStatePotential &gt; &amp;</type>
      <name>node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>abbecf76da2911c8aa312b7096175c216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::NodeStatePotential &gt; *</type>
      <name>mutable_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>acb144411ba170fa36398fd55c07b99ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MRFNode</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a021b05b80147363c7e6712f48d44a0a3</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MRFNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a24e99e7e39879fdb7e5ba3457e05f711</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a8716f067ae2c0b732dbe8e808e58c57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>abdd95998aa20cc6e28e69768da470c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a6dbf7084428bf6caece3fb82097f1944</anchor>
      <arglist>(MRFNode *other)</arglist>
    </member>
    <member kind="function">
      <type>MRFNode *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>aae86515fdbc1b37e4e0199213ca28d73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a9597eb49cdf67bc0fcbdf2fd80df98ee</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a9c35a74300cf3dca0218bcaeab056068</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ab7f56050e7e981a5aea088fc4703a03b</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ac4758815f0eb1ccb68720627100fbeb5</anchor>
      <arglist>(const MRFNode &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a610d843b6af3c9943e096adae1c878b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a4ee069fb613a4c42ce0b46a092905989</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ab4cddf5ea1745f095b447d80a7e317b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a7d517e721e300ebe179ef71f53ee2665</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a7d0379969f1c04b3753f3af41fcdcd8d</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a3c686681d6b3afada8c8119bc167946f</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a420b833847841bcbcbbe9baf10d42876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ad18331d6dffc4a9477fdba263cf9f2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_potentials_size</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>aed75e0bf0b6fa5b3ae987510ad1dd75e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a96a52fa9efd3aa762312bfe27ca05927</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::NodeStatePotential &amp;</type>
      <name>node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a0d51d9a14d08b0044d5bfa9c3d2464b4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::NodeStatePotential *</type>
      <name>mutable_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a2592e6dc49b23b2c0cc790cf42921502</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::NodeStatePotential *</type>
      <name>add_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a942b7f41cd43c7a85fc8bfc6a3bb9714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::NodeStatePotential &gt; &amp;</type>
      <name>node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>af5c8f3c616fe0bb78485adb1e5482a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::NodeStatePotential &gt; *</type>
      <name>mutable_node_potentials</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>af9736f5670f2b2f12a56501f1dd47446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a9113f9380142dd1d81da98fe6f4fe39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MRFNode &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a982ba58ef804dc31513eec1d1639e0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>af65ea7eb633a923f3edb6731d87bc3e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MRFNode &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>ae314d61e7dc907091eb1d67d665888b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNodePotentialsFieldNumber</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a8c72fb8318df08ad3774c388ad62296c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFNode.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>graph::MRFEdge</name>
    <filename>classgraph_1_1MRFEdge.html</filename>
    <member kind="function">
      <type></type>
      <name>MRFEdge</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aa09de56220ba0cb66c9fd9228ba4d221</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MRFEdge &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a3b97945487b8335d0a845629dd61aa9a</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a291edbf56dd75cfc07882c224d78f6f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aaf28e2100240ef4b97bff1970da1bbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>afded0d8d16e77ef81e494cbdad220734</anchor>
      <arglist>(MRFEdge *other)</arglist>
    </member>
    <member kind="function">
      <type>MRFEdge *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ae8c0c207131d9c4f8d65d2e6ed0d8257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a65ec5aa99bae52421400d4b456955ce6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a83fe505e1c12d298d726853b09e566ad</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a432538f9cc47eaf753e771a1b6cb9a81</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a861a18199b5be517a96cd5b355a3c668</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ab9d3b2159e6b42fe5fe5f3c4840a151b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a11b542bb15495a1fbee395763ee4e22d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ae857214ec9afbe8246f3027afb231770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>abb481822efd72255228c00617b26a9b8</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a8b119214980a5375a373bf7acf38f841</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ac711eeb7dd9dec6fafde05f93adc7092</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a2b59a32ff130f0764e937f043fd03778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a2f9380861d525a638a503a73461bd185</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_potentials_size</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ae838e1baabe8852d5ec775f0284ba8b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a53d239c44edb18262f0a3c13fd88fb03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::EdgeStatePotential &amp;</type>
      <name>edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a8dfe87119ec061fe429f4613dd23b1ad</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::EdgeStatePotential *</type>
      <name>mutable_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aeff746d072366c703b082307e958d2f0</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::EdgeStatePotential *</type>
      <name>add_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a41a3d93e349503b5d3e24bdc21044810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::EdgeStatePotential &gt; &amp;</type>
      <name>edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a9429ca0ab408685e9d2a955366f50ed6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::EdgeStatePotential &gt; *</type>
      <name>mutable_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a5f8f28def741a8d3476c36eeab872547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MRFEdge</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aa09de56220ba0cb66c9fd9228ba4d221</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>MRFEdge &amp;</type>
      <name>operator=</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a3b97945487b8335d0a845629dd61aa9a</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a291edbf56dd75cfc07882c224d78f6f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aaf28e2100240ef4b97bff1970da1bbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>afded0d8d16e77ef81e494cbdad220734</anchor>
      <arglist>(MRFEdge *other)</arglist>
    </member>
    <member kind="function">
      <type>MRFEdge *</type>
      <name>New</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a21211c0e2ad05324c09d90c86b5ba34e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a65ec5aa99bae52421400d4b456955ce6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a83fe505e1c12d298d726853b09e566ad</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a432538f9cc47eaf753e771a1b6cb9a81</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a861a18199b5be517a96cd5b355a3c668</anchor>
      <arglist>(const MRFEdge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ab9d3b2159e6b42fe5fe5f3c4840a151b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a11b542bb15495a1fbee395763ee4e22d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ae857214ec9afbe8246f3027afb231770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>abb481822efd72255228c00617b26a9b8</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a8b119214980a5375a373bf7acf38f841</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a5b9122af9f678bf164beab47ca09c7e5</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a2b59a32ff130f0764e937f043fd03778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a3bc4a11c7f89dbff2a95e6f58b0782d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_potentials_size</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ae838e1baabe8852d5ec775f0284ba8b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a53d239c44edb18262f0a3c13fd88fb03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::graph::EdgeStatePotential &amp;</type>
      <name>edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a0c7561719b73dd2ef987c7c79382f73a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::graph::EdgeStatePotential *</type>
      <name>mutable_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>af24041a8077b2492fdcbece14538e005</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::graph::EdgeStatePotential *</type>
      <name>add_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a6ae64a2442efe81d52e83b5938820f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::graph::EdgeStatePotential &gt; &amp;</type>
      <name>edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a11ed986256d3adfc206080df3720d146</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::graph::EdgeStatePotential &gt; *</type>
      <name>mutable_edge_potentials</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>ab4e41bd27f096548e580552dbfdb3e35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a55d4c01824eab0261d72a1ea4c4028e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MRFEdge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a20f3bf54fe3438b549e3e39aa4768b8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a9697b3be21e480abdeb24c964934d4cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MRFEdge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a7375f6abdee806d403d0f0c11a8c86d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEdgePotentialsFieldNumber</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a8cbb86df3eb46154971fc4d59b9656f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a7c7daba01236a33140ac99dfb4a21f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>aef3db81db7837e30d95a050165bc180f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_mrf_2eproto</name>
      <anchorfile>classgraph_1_1MRFEdge.html</anchorfile>
      <anchor>a84e801a5b8303ac698fb7040b250e3d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hypergraph_to_lattice::Graph</name>
    <filename>classhypergraph__to__lattice_1_1Graph.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a1a259313b204283afb1dac1823f5a7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_start</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>af79ad1a1e908e784f034c295afa95190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_final</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a2f45654cef23905bc398fa6c411c3b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>register_node</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>afe7cd51883a0a18a0f943a6858dc6c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>register_edge_map</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a0de76e7735e963556a163730da35556a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>size</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>ae740d42a275c42f669603d25282a993d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__iter__</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a53c1c5a0d1e64f1fff5f3e9ac1d09a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>filter</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>ab46ee61af55d7dca0d566a9d7edb581a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>nodes</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a27ba97b60fe59dfcd38dd84ad5771ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>id</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a2f57d378f9cda72a4e375740cc6a4ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>edge_map</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a641408abe14eb2ca59558af8c66a29f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>check</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a55f4552a72c8862e879c4bf1c5c591dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>lattice</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>aa2f03bffcdb31d13b01a0cb2a66fba27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>total_edges</name>
      <anchorfile>classhypergraph__to__lattice_1_1Graph.html</anchorfile>
      <anchor>a1077f3c24b2e35dfcd277eda332e9180</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hypergraph_to_lattice::LatNode</name>
    <filename>classhypergraph__to__lattice_1_1LatNode.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>a7ab7ecd3c4e28aae3399ca31b07ee9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_edge</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>ae89f6b1705c3cae56321ab5ab8143fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>label</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>a36f8416f81cf50bff472fba2a161472d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>edges</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>a46e15397405f9e3ce3d1e73605f0285a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>back_edges</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>a9c9f4406aa0ac3185f04c9859378e45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>lex</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>a7f57c9d4ecaedad8ce3b15dd4584221a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>graph</name>
      <anchorfile>classhypergraph__to__lattice_1_1LatNode.html</anchorfile>
      <anchor>a59dada46e36c28a9b68d30a88fc542ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hypergraph_to_lattice::NonTermNode</name>
    <filename>classhypergraph__to__lattice_1_1NonTermNode.html</filename>
    <base>hypergraph_to_lattice::LatNode</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classhypergraph__to__lattice_1_1NonTermNode.html</anchorfile>
      <anchor>ae51722728313146cbf0744ee89a48eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__str__</name>
      <anchorfile>classhypergraph__to__lattice_1_1NonTermNode.html</anchorfile>
      <anchor>a0390e322adda7d8befa2d78d671f2e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>color</name>
      <anchorfile>classhypergraph__to__lattice_1_1NonTermNode.html</anchorfile>
      <anchor>a22e412fe2db4e6490cea31e56be2dc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>forest_node</name>
      <anchorfile>classhypergraph__to__lattice_1_1NonTermNode.html</anchorfile>
      <anchor>aed769cb6e411164a776daf5aee232b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>dir</name>
      <anchorfile>classhypergraph__to__lattice_1_1NonTermNode.html</anchorfile>
      <anchor>a8674d7004d94aea2133bfb32dbf9da9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hypergraph_to_lattice::LexNode</name>
    <filename>classhypergraph__to__lattice_1_1LexNode.html</filename>
    <base>hypergraph_to_lattice::LatNode</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classhypergraph__to__lattice_1_1LexNode.html</anchorfile>
      <anchor>a4590bd3338438e9a4503139d3b87c8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__str__</name>
      <anchorfile>classhypergraph__to__lattice_1_1LexNode.html</anchorfile>
      <anchor>a8d84f84f121b5dd8c78610da59973e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>color</name>
      <anchorfile>classhypergraph__to__lattice_1_1LexNode.html</anchorfile>
      <anchor>aa77fc7f927aac2f4b4607b51bf1442bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>lex</name>
      <anchorfile>classhypergraph__to__lattice_1_1LexNode.html</anchorfile>
      <anchor>acb431fe2b2339b8752b9e8daaf59d781</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hypergraph_to_lattice::InternalNode</name>
    <filename>classhypergraph__to__lattice_1_1InternalNode.html</filename>
    <base>hypergraph_to_lattice::LatNode</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>a702ef58a215dca7d9daf128d27beb55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__str__</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>acf3fb3d51a4de329b3360ec460c09236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>label</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>ae39bd390cd71113c83ff5851504d85f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>color</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>a0f0f96e543b0940777f6d66dc6d8fec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>name</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>a41a36188327a12cdb33ffb206ee7823f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>rule</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>a67c5d4c549c83619233496bf0c230e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>dir</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>ae5d2c0ddc19817e0d45e2eacb6bd0766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>pos</name>
      <anchorfile>classhypergraph__to__lattice_1_1InternalNode.html</anchorfile>
      <anchor>ab596886460b8c32f441c1f4c999b1ac0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hypergraph_to_lattice::NodeExtractor</name>
    <filename>classhypergraph__to__lattice_1_1NodeExtractor.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a65c0ff2e2fb202dc2b7d996786658733</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_label</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>aebfb872a1dafa22a6dd3c2f8300c07d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>extract</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a1ef5e5e0ec358b1ce7511dae70e63bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>extract_fsa</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a7867888348ccd9044f34f242698c55f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>internal_nodes</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a74420da9e353412aa05c2bd17187a47f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>word_nodes</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a89b13a6e84b8e29e6783bb3bb041db90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>edge_id</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a413da4c636a4ec6d55aebd8de0238a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>original_id</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a3b95feeba90619e24bda406061104f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>total_edges</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a042ce7593f25f0a52b4709ad83809b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>inner_node_labels</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a133d3c9156158f1acad9f62fb821fc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>memo</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a164192af340a81cd82e88450996f0385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>graph</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>af647d8edf905a6ee59b844b8d18a1a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>forest</name>
      <anchorfile>classhypergraph__to__lattice_1_1NodeExtractor.html</anchorfile>
      <anchor>a89d8e66a6557714e84b16065c8d78b11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lattice::StaticDescriptorInitializer_lattice_2eproto</name>
    <filename>structlattice_1_1StaticDescriptorInitializer__lattice__2eproto.html</filename>
  </compound>
  <compound kind="class">
    <name>lattice::Lattice_Node</name>
    <filename>classlattice_1_1Lattice__Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Lattice_Node</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a147424c31f0775202a79ceab4fa2fe8d</anchor>
      <arglist>(const Lattice_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Lattice_Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a27f953898aafca2d9fbd2622c4eeabbd</anchor>
      <arglist>(const Lattice_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a2f70b3b935aef09e0aee93a1e8a15561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a5c846fa08d1f88c39655400947f1c3cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ab39220e03258bb1064634db1f021b0e3</anchor>
      <arglist>(Lattice_Node *other)</arglist>
    </member>
    <member kind="function">
      <type>Lattice_Node *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ae0c20f6b6b29d71d40596d133b52dcfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a380df579ad1735c2126e4eba47e6f5e1</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a2fff3c85762dbffdb5f4db8a0d1f1de2</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a83833df54b108547003ddcd089e11495</anchor>
      <arglist>(const Lattice_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a381edbfaee298b75d2326f7c2722a395</anchor>
      <arglist>(const Lattice_Node &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a883603a4abfa63e055042e72c9a7d771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a66f8bfa1d8df568cd212ecd39fc29e6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a8af617033ad1ddf55c04869bf0eba7c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a3d2d830c5d2004d848eefdb34ce4cd70</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a9ba35eb712235a58d484d2f5d786664a</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a6c9f080819a5382c4863691df6ca97c8</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ad594e10f3cb4b49352ca4a851ef63103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a1b64d1695044a9a0a55c1cf46cf8d381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a527a11e30db84175ad17a4fe1d109434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ab4a8aa29a8acc23ae517b3351466b4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>aa1365843c54d8275ff5ead668abe611e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a64f4cd3b0fe45be92cd60ba160e6961b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ab785cdbb65eebc9069a36cf09f5ab4eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a36a47fee6fb062d874140354e01bb5e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a4baa3c21b2ea94a045439efcae5ed84f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a154cd811d4bc7555f2a5d3ba945be6eb</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a4dea106b2814ec3e429f9d0cff796338</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a6a66a9b418f72c0687cf00ad75abf201</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>aa8755ed4cf007a1c8e781902fdc3a4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a48ddd3b16c87cd84a030e1106d9c44a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>edge_size</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a0e92a26f2f5180cc98f1de7c6917b6d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_edge</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a09e1fc45aba7522fc5949bf7328947b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::lattice::Lattice_Edge &amp;</type>
      <name>edge</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a8c03817565b5fdbeec75b612358e9f9e</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Lattice_Edge *</type>
      <name>mutable_edge</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>acf217e32657e81c9923cbb99e12ce3ac</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Lattice_Edge *</type>
      <name>add_edge</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ac1458c47ea3591c2039a072a1168f76d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::lattice::Lattice_Edge &gt; &amp;</type>
      <name>edge</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a1a529655a726b6444615985888c4fad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::lattice::Lattice_Edge &gt; *</type>
      <name>mutable_edge</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>afc586b8c22db1d283c6757d17d04fa8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>af5da3e85a5d01d0c7a285342e954f5f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Lattice_Node &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>afa42163f206dd384606b8f10dcb8c193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a5f2df3e8557da8697c9bedaf6d7e9e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>ac19a4aa98d9ef4fee4032e4e493d53d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kEdgeFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a76b647ba9708e295b6b4223635dca164</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice__Node.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice::Lattice_Edge</name>
    <filename>classlattice_1_1Lattice__Edge.html</filename>
    <member kind="function">
      <type></type>
      <name>Lattice_Edge</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>acd52c069d2b4ccd5e35415ced12a8de3</anchor>
      <arglist>(const Lattice_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Lattice_Edge &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a7b8481bf7bbecf282e2f938ff35da177</anchor>
      <arglist>(const Lattice_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>af44f15fd53ae86dd482f86e74bf4ce55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aae27de06c0aa0d1cdae07ba720e7eb7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aaaa95dd26cb8b36f35652fba54be5679</anchor>
      <arglist>(Lattice_Edge *other)</arglist>
    </member>
    <member kind="function">
      <type>Lattice_Edge *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a499e153dc35d1496be7a0420c5f848f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a4f12ea2d09f06458eaf599bbd6140d09</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>acb2a52debadf89e32673ed4681a785de</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a6a8426745b646d96dbea6931daaa33f9</anchor>
      <arglist>(const Lattice_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>ad910840c5215e942e5fad4b9119a4094</anchor>
      <arglist>(const Lattice_Edge &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a7780ee7c3441cce937784a92dda3fcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a2a52f5e8c864ae50e31f7e0a5b5ece95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a7342ae6a37ed9b432cdd4bacb58956b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>ab3f9dc6f28a5d5e7356beb27f6cbdf3f</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aa425ac46616eb3cbdc3e17b5536991c0</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>ab3717991484977072e673eaaaf28b9b5</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a6cccad4c342b1d0bf48b9b828f277b56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aba8500dcfc46ede1ae99f43ec1c5909f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a8366be45d3f24bd44724f8ddabd5e3ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aa90e4552c9da9e7c3a62bff5af76540a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a99bb9339bff6dc5dea68711b5ea4739f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a24547494991007daed07e9526fe563a9</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>ad835d581cf9d59feb757d7669b331813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a53d5c95032840aabb15521b04cf4343f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a1bf88081324cb64246bd4b07b60010bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aec8f4c4697ebba26377929c894a2dba4</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>aa5056c3b346d89c79626bd9b76aaeda9</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>afb812d783f60810acaff1f3cd5ede45e</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a422f058978331e9032f8b46f3e7edf19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_label</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a19a5d69b5f49534574ba4228c2eabb00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_to_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a8606af1eb69fe1603701acd62f1641fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_to_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a9b924c9c24c68d721caf410388ecd26b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>to_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a15a7dd3d4bfd721431c5d40d2b775117</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_id</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>afe2ba54700b6c255be550d5fddf03cea</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a65852986232fb6963efbbc6fefd896be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Lattice_Edge &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>ad6eb7c57bf5d859752e7e88bd7329469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kIdFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a0e2f2cee5173639eda89756b70265596</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kLabelFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a5c0b87e3bc9390f398cf3e2de0c19ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kToIdFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a3bf87977ee5b7e5f33486c382fbac72f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice__Edge.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice::Lattice</name>
    <filename>classlattice_1_1Lattice.html</filename>
    <member kind="typedef">
      <type>Lattice_Node</type>
      <name>Node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a74f989d4c34d5ad1717a194194eaed71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Lattice_Edge</type>
      <name>Edge</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a9f4acdebf1d889ee76d432dc549ee9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lattice</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a6afe3eb36c5fa648ee09ff3425544a9f</anchor>
      <arglist>(const Lattice &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Lattice &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>aaa4fc56dd3fca09222c685f78e2c5632</anchor>
      <arglist>(const Lattice &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>afc9d0408a25d079574a8da841f4d2580</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a5581cb64b246c378c56bb2d686e42132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>ab4a3958ab2281dfb4677e6b7998b5ff3</anchor>
      <arglist>(Lattice *other)</arglist>
    </member>
    <member kind="function">
      <type>Lattice *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a947785986676e868ef33b975e406c14b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a9aec9f61f02b520348f5b4e661f779ac</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a62644d01e4c7fc503661a3ac7a4461aa</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a06293cf4a975500085cb11ff59418655</anchor>
      <arglist>(const Lattice &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>afcab65a875a55ec9f5ebc88f2b22a662</anchor>
      <arglist>(const Lattice &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a69643c6d759f3c59ca72f0b640e744cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a2a517e87a5ff555951149bd6c8f2fcc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>aa1fa86cdd3f0897665f5a69c299ce120</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a13776f9114d9135033c6a7ef0e5aa855</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a211943e304584090a05bff477ba64bf3</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a679d526d9a589eb74f642d876fb5b339</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a93bab06ef91469b47be8794cacd5a5f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>aaab0cda217c0772d69348f65cd35c33e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_start</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a3a06d03c8fc2d4810946301eb851d9bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_start</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a8a22bdebf8702ccd1d7221acdd9447f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>start</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>aa736b2c11a852db4859bb421de1b9d5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_start</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>aeff8a9022b4341221a2fb81c0da4958c</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>final_size</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>acce3e8812b8edc5fee61a1c07144e35c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_final</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a796495494bd3460afe3a3da75d9a9866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>final</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a047eb8b2fdf3ba5b0f34b175084d4957</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_final</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>afd8033a01d6390099a2a25033e38302f</anchor>
      <arglist>(int index,::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_final</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a8b9c4979ec846fb10419fd0a776e2bf6</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>final</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a2625e8a95bb6bc92ba4a4fb2ac54eea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_final</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a67607f04271c09637e771736078ab8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>node_size</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>ac6bb945f03a05b0e6fa66a5cdb17b854</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a21e99bbb5d73a80f4b3e79f053880b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::lattice::Lattice_Node &amp;</type>
      <name>node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a388ba232d3051c050c645c4c5c49d8f0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Lattice_Node *</type>
      <name>mutable_node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a80fd09af5dc4f602e3744ca984c55a57</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Lattice_Node *</type>
      <name>add_node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>abca614b554f335e8ea3c7a8950648113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::lattice::Lattice_Node &gt; &amp;</type>
      <name>node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a76ff012c0dca5d00c46275522327852c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::lattice::Lattice_Node &gt; *</type>
      <name>mutable_node</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>ad1e861068dce2238dc2405442d40afa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a1439fffc17a145ba6bede8f9c693989e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Lattice &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>ad46beb148ef5b77a4653a17ab5eff0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kStartFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a43c82461b5757da3dec815f9a1918546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kFinalFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a41954f413ffb07063a80fb779f7b825b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kNodeFieldNumber</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>aef2900e37da8f683285328c24b5e6b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Lattice.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice::Subword</name>
    <filename>classlattice_1_1Subword.html</filename>
    <member kind="function">
      <type></type>
      <name>Subword</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aa0e10ac48dd649a4dddf8e1a6ef9b810</anchor>
      <arglist>(const Subword &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Subword &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a102d4bfb0a00050e86aa85c3d8d1ef20</anchor>
      <arglist>(const Subword &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aff470f65348c81181cffe6659c9e3d17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a1fc937024a7c533e1c51d7adedffa24d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aac745475adf60d00b6f8f37c69f443b0</anchor>
      <arglist>(Subword *other)</arglist>
    </member>
    <member kind="function">
      <type>Subword *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a4cc85172f8246ed23ec94de0b6274825</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ab08febfe342e4382de8d9d42142b87b4</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a9477c976f0289cea8423429c562b7d81</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a433f5e66bd6cea31a3c63d0a74a95de4</anchor>
      <arglist>(const Subword &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>af8f40895c8ae1ce04f617fedaa377192</anchor>
      <arglist>(const Subword &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ab1072bac4c0bdeda3c448a40e89c9ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ae032c1b833fdfce330d0f185d3c08f97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aa8d179aa2974c3c662c5790ca03148bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ade168b7ef9839ed60bc6a1fe33c6a5a2</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ab8c9ea5fadefc35219ce39839adbf303</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a39725b39e07a08dff2225fa1f4115e40</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a93f2c5e53295755297f658ec54e81283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a82569d1cb47ab62caa9cadcaf45c07b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aa069cfdde7b9063126104f005aac89cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a0a849e147bf2c78d785197b897b14e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::std::string &amp;</type>
      <name>word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a2853badbab594ed129df0df6a0e97b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a2b2aeb43d13e2e7e57b06afa5d0e50ec</anchor>
      <arglist>(const ::std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aeeff8037e9406ee50534fbe6e1f6e702</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a3d6126168fe9ce91049687370dcb4977</anchor>
      <arglist>(const char *value, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>mutable_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a4495efa4267a4b124bba594f91bd73fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::std::string *</type>
      <name>release_word</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ad6cb356c802ac727d24df1e2cd9ca9ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_subword_original_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a8a5d194b546acfd51ab29de9e23eeb69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_subword_original_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a3aa83e492f090e44f6fcbf14fe739ba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>subword_original_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a279ea67dbaee3bb5635d72b5cdae3e52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subword_original_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a9ed37556521d3f0abb1e3b01850fa190</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_subword_hypergraph_node_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ac63e04e9d9b551e89e95e7fce5d675a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_subword_hypergraph_node_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a73913395d719789761d67639d4bd7e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>subword_hypergraph_node_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>aedff8077ae76f04a2cfd99045e69763b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subword_hypergraph_node_id</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>ac125d8a6d580639477e164347e65bfc5</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a6b98d06b8741d7631593e8248acadb3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Subword &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a68365b2839b59dd8805f06a49797e67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kWordFieldNumber</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a795d7849c138b766c0de1000929a9279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSubwordOriginalIdFieldNumber</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>accafa8353a5d494473b8a7e9903b051d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kSubwordHypergraphNodeIdFieldNumber</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a581a69ab155520b618cdd2146bc87752</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Subword.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice::Phraselet</name>
    <filename>classlattice_1_1Phraselet.html</filename>
    <member kind="function">
      <type></type>
      <name>Phraselet</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>aad52fffee57cf2c3c738db3911eb4bb9</anchor>
      <arglist>(const Phraselet &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Phraselet &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a351df01d2ffbf4f31cac03ee8c1fc237</anchor>
      <arglist>(const Phraselet &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>ad493e6fbf47ab949e24f807b94232c64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a92f57adf0baa33f5152ee431b1aea6e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a475dcd429c962649f7f26e9cbd8d5a34</anchor>
      <arglist>(Phraselet *other)</arglist>
    </member>
    <member kind="function">
      <type>Phraselet *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>aec2ac47e7a0c661fc443a048b3f0555c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a2d367abbea6d71d9ffaf3457661b5a42</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a381bcf822ebd538c59bf795dee2b77d9</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>aa8bc3ab3f900bfdff4a4134031218fc3</anchor>
      <arglist>(const Phraselet &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>aea4c86bf72b788b9afec402442f963df</anchor>
      <arglist>(const Phraselet &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a380c5bf45d45269bc0ec61e80c4df34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>aa25d46e3d15cb431d4a7cf30c8ad5bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a6b23edd221a64e6553d042f45df86e73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>af794c511c8d6be67e141a790ce18ef6f</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a00627ab143b2b8d5fcbdc686b2496230</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a860e35d01a5c802dc73aed146a6921ef</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>ae94d4b81c0ae8e195346f0b2836fa124</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>acbf23622238396acde2cf8b96dbf6df5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>word_size</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a5136efd90a23878ff47bb0290c5f9678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_word</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a2ac956bf60b94eab43cb142bb2251731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::lattice::Subword &amp;</type>
      <name>word</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a39c2b7f8be4d23aa423baf985107a0be</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Subword *</type>
      <name>mutable_word</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>abe2be887d98594a7c3ce13844b8a87f3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Subword *</type>
      <name>add_word</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>af499ae2b30d9739234523c9d790e07eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::lattice::Subword &gt; &amp;</type>
      <name>word</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>ad442b1e821ee49c64e44191d32200e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::lattice::Subword &gt; *</type>
      <name>mutable_word</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a4789a16818260e9df5f6cf5b954e70ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_phraselet_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a9a6afc2d0f7466317b7bbd0ebe8eb5d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_phraselet_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a4c9f2577858563c51a8531604e30b1a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>phraselet_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a36ecf9680559a4cfdb011c8531830220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_phraselet_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>ae9112854c9a8406aeef40c13f9c8b02a</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a193ff7d5abcd214ec1adb738bff0c420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Phraselet &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a52928d0b7933f4bd9eb807da16b82fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kWordFieldNumber</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>abc30d76e181d14e5a53cee96bdd50eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPhraseletHypergraphEdgeFieldNumber</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a99ae4ed782afdeef679118bef7361c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Phraselet.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice::Phraselets</name>
    <filename>classlattice_1_1Phraselets.html</filename>
    <member kind="function">
      <type></type>
      <name>Phraselets</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ab7dd94e765222f9afd3ddc6aae28f4b9</anchor>
      <arglist>(const Phraselets &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Phraselets &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ab7fc4048a36fb485457156b33d201f0f</anchor>
      <arglist>(const Phraselets &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a2139960d920a5bc3aa8b93eee034a5f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a30f7480fb64d1b726d53ee8bea076b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>af2b24704a495960845fe4e4c2188a53f</anchor>
      <arglist>(Phraselets *other)</arglist>
    </member>
    <member kind="function">
      <type>Phraselets *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a5ea53d62706cba1414a5121a40251606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ae545b608108f883959885ca212ba9c47</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>aea0701d2263901e124d9f4eb0ebb586e</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ac35d667378bb57992378580af8e2a42b</anchor>
      <arglist>(const Phraselets &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a09cc9a5dad7bad0248ab26275d7d3151</anchor>
      <arglist>(const Phraselets &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a4c735228e79edaf401ac7d08d35b53ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a4a9cdf5ab0725a87acb7831f572878ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a26f51d307c09dc6a01c1c3a83afa898d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>aa939d6bdfd0a634d857f62f92cacda8c</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a27a2c9b71879c29dfe115e4907abbc72</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a20e070569fad10cdf5d9327fd1d5f63c</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>af6446f4c4dc198355a1a0baca9bf7bb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a116d9d068a6bc06ff56b5554d711d108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>phraselet_size</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a53705111afb5bddd6370da7c86809681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_phraselet</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a380bfc60bcdb7de062b5ee48cead27c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::lattice::Phraselet &amp;</type>
      <name>phraselet</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a211ccfa16e63f8e8f94a37e34cf62995</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Phraselet *</type>
      <name>mutable_phraselet</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ab9c74d12c2f7a1edd628556af8a8b3b5</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>inline::lattice::Phraselet *</type>
      <name>add_phraselet</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>aee454d42c3235fb15fb28b1dd35927bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedPtrField&lt; ::lattice::Phraselet &gt; &amp;</type>
      <name>phraselet</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>aa3c9f5a4017d5c6a88dc65e283f98164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedPtrField&lt; ::lattice::Phraselet &gt; *</type>
      <name>mutable_phraselet</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>afbe87c3601feac1c66c56886e150e14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ad7b7ac4457f6759574e37107a46d179c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Phraselets &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a289431b64664e617c8c0a4fa7b66b1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kPhraseletFieldNumber</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>ad69aa77b37a4d6f3d2c61fd9aaa09fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Phraselets.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice::Origin</name>
    <filename>classlattice_1_1Origin.html</filename>
    <member kind="function">
      <type></type>
      <name>Origin</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ab55cc18582c3bbc262a924e48697f4cc</anchor>
      <arglist>(const Origin &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>Origin &amp;</type>
      <name>operator=</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>aedeaa82dc76b7d0373cd48f33e028b9e</anchor>
      <arglist>(const Origin &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::UnknownFieldSet &amp;</type>
      <name>unknown_fields</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ad520c41793348738a3ac1ebb8f5f1189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::UnknownFieldSet *</type>
      <name>mutable_unknown_fields</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a07bec9e32b1ab5ffec8a0fb89f3b593a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Swap</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a0e3a9e1bbd49641331b067a6dd9e2a8e</anchor>
      <arglist>(Origin *other)</arglist>
    </member>
    <member kind="function">
      <type>Origin *</type>
      <name>New</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a3963c46290d6dad7032fd9a6a38c9829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>aee8b1f2dd984576e6c73a93d608eb213</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a5b3e6ff8bfb6a4c8e0239774783066b6</anchor>
      <arglist>(const ::google::protobuf::Message &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyFrom</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>aa91d3c50ddb13b51379510603a068958</anchor>
      <arglist>(const Origin &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MergeFrom</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a3faee262511eec654f7a0632a5e560ba</anchor>
      <arglist>(const Origin &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a90a1a2c78ec1f709cbb0b168fd9aa817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsInitialized</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a62f1d2f32a1eaa899ad85610f1db8fe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ByteSize</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>af83bae786f9add99760ee4935a135443</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MergePartialFromCodedStream</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>aa13a6b6f63ac1ea4c310f04348a8575f</anchor>
      <arglist>(::google::protobuf::io::CodedInputStream *input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SerializeWithCachedSizes</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ae2b055eae68d73af19bcda59c6b15ac6</anchor>
      <arglist>(::google::protobuf::io::CodedOutputStream *output) const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::uint8 *</type>
      <name>SerializeWithCachedSizesToArray</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a801d7179a6e85e2fbd1113ea82f9a440</anchor>
      <arglist>(::google::protobuf::uint8 *output) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GetCachedSize</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a1b84d6bcbe33ca6aa15fc0659fe1ce6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::google::protobuf::Metadata</type>
      <name>GetMetadata</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a33eb9a687e88d1a845a2420c29757ee7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hypergraph_edge_size</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a5a7105c401b9faf2975a62ad0f6e5f9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a16018cbe1e1bda37da1faeda9c113654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>hypergraph_edge</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a5a0033d07d792ad0da3388746bc50dd0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a4ae3e1c5181c4224f9569c7ef916aa94</anchor>
      <arglist>(int index,::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>adb776f18649e3baa7df68d53dc79bbd6</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>const ::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; &amp;</type>
      <name>hypergraph_edge</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a86672ab29cc9b2b85da694917dd38f2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::RepeatedField&lt; ::google::protobuf::int32 &gt; *</type>
      <name>mutable_hypergraph_edge</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ab9fd75828ae2c7b5188beba8e7d511a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_original_id</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a27d775c4dbd86e55dd6b2bac5f53a194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_original_id</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ae14e0ae4e2b32f4948842a8c64925416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::google::protobuf::int32</type>
      <name>original_id</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a0a00308cd28bd4e3836c6a0418276aa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_original_id</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a97ff5372885f733870170f9dfbd3032b</anchor>
      <arglist>(::google::protobuf::int32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_has_origin</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ad04e2fe74f9c22a83fc22548ade3fd7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_has_origin</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ae06e598e03504e3f52a69e1649ef0b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_origin</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a7b9159f866b74e939a6805a1d765a663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_has_origin</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a7162284423c272a182e8ec697321b97a</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ::google::protobuf::Descriptor *</type>
      <name>descriptor</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a3b2619013446279bfce0f7f2d85f6365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Origin &amp;</type>
      <name>default_instance</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>ae801e2e2d4d7bc077f11e208da2baeaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kHypergraphEdgeFieldNumber</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a740142917cd1a8dc2db9763c768ea4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kOriginalIdFieldNumber</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>abf5fdc243e613de484e2c64b3ccd0f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>kHasOriginFieldNumber</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>acfa669855c716b2399e9b2949fc38986</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AddDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a19e63fb37025879e023cad88064187cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_AssignDesc_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a3b0386e09a9fefcf1bdce658cfc480b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>protobuf_ShutdownFile_lattice_2eproto</name>
      <anchorfile>classlattice_1_1Origin.html</anchorfile>
      <anchor>a3c7b187721d0704ceb19ff889729d35a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice_pb2::Lattice</name>
    <filename>classlattice__pb2_1_1Lattice.html</filename>
    <class kind="class">lattice_pb2::Lattice::Edge</class>
    <class kind="class">lattice_pb2::Lattice::Node</class>
  </compound>
  <compound kind="class">
    <name>lattice_pb2::Lattice::Edge</name>
    <filename>classlattice__pb2_1_1Lattice_1_1Edge.html</filename>
    <member kind="variable" static="yes">
      <type></type>
      <name>DESCRIPTOR</name>
      <anchorfile>classlattice__pb2_1_1Lattice_1_1Edge.html</anchorfile>
      <anchor>ac1e04b41973db8f1ffd918d785fd8cef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>lattice_pb2::Lattice::Node</name>
    <filename>classlattice__pb2_1_1Lattice_1_1Node.html</filename>
    <member kind="variable" static="yes">
      <type></type>
      <name>DESCRIPTOR</name>
      <anchorfile>classlattice__pb2_1_1Lattice_1_1Node.html</anchorfile>
      <anchor>a0605b68e30ed2b5eaf56fd4b8b4d1019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>mstparser</name>
    <filename>namespacemstparser.html</filename>
    <class kind="class">mstparser::Alphabet</class>
    <class kind="class">mstparser::DependencyDecoder</class>
    <class kind="class">mstparser::DependencyDecoder2O</class>
    <class kind="class">mstparser::DependencyEvaluator</class>
    <class kind="class">mstparser::DependencyInstance</class>
    <class kind="class">mstparser::DependencyParser</class>
    <class kind="class">mstparser::DependencyPipe</class>
    <class kind="class">mstparser::DependencyPipe2O</class>
    <class kind="class">mstparser::Feature</class>
    <class kind="class">mstparser::FeatureVector</class>
    <class kind="class">mstparser::KBestParseForest</class>
    <class kind="class">mstparser::ValueIndexPair</class>
    <class kind="class">mstparser::BinaryHeap</class>
    <class kind="class">mstparser::KBestParseForest2O</class>
    <class kind="class">mstparser::Parameters</class>
    <class kind="class">mstparser::ParseForestItem</class>
    <class kind="class">mstparser::ParserOptions</class>
    <class kind="class">mstparser::RelationalFeature</class>
    <class kind="class">mstparser::Util</class>
  </compound>
  <compound kind="class">
    <name>mstparser::Alphabet</name>
    <filename>classmstparser_1_1Alphabet.html</filename>
    <member kind="function">
      <type></type>
      <name>Alphabet</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a960e113dd6e8904988983ef503a284dd</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookupIndex</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a76971ecbacfad318bc7a9798effc6192</anchor>
      <arglist>(Object entry)</arglist>
    </member>
    <member kind="function">
      <type>Object[]</type>
      <name>toArray</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a9d8582dbe61c1fa676074981537a9ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>contains</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a22fc561a609a40c1c2cc745664ea21aa</anchor>
      <arglist>(Object entry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a82a1082c5f7a05b8143314512922af36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopGrowth</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a004ff1e60046fe34d0d58a369208b66a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allowGrowth</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a4cfb6b31a1b15e8344ca65347dd11411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>growthStopped</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a812b8d5a94f6158e79ed94563a74226b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="package">
      <type>gnu.trove.TObjectIntHashMap</type>
      <name>map</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>aee577f63bf8d7584ea059587abb18a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>int</type>
      <name>numEntries</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a89781049943be9c05005cfa4e7b3cbc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="package">
      <type>boolean</type>
      <name>growthStopped</name>
      <anchorfile>classmstparser_1_1Alphabet.html</anchorfile>
      <anchor>a48ba6aefb5bf3eb7e53c09c27501c71e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyDecoder</name>
    <filename>classmstparser_1_1DependencyDecoder.html</filename>
    <member kind="function">
      <type></type>
      <name>DependencyDecoder</name>
      <anchorfile>classmstparser_1_1DependencyDecoder.html</anchorfile>
      <anchor>a185a21e3127cfda5b92d26fc66a754c9</anchor>
      <arglist>(DependencyPipe pipe)</arglist>
    </member>
    <member kind="function">
      <type>Object[][]</type>
      <name>decodeProjective</name>
      <anchorfile>classmstparser_1_1DependencyDecoder.html</anchorfile>
      <anchor>a59cae69b2c0146f3212968ba5b65c4b2</anchor>
      <arglist>(DependencyInstance inst, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, int K)</arglist>
    </member>
    <member kind="function">
      <type>Object[][]</type>
      <name>decodeNonProjective</name>
      <anchorfile>classmstparser_1_1DependencyDecoder.html</anchorfile>
      <anchor>a64a0c62cd4fab571a66ed7d89ab7863a</anchor>
      <arglist>(DependencyInstance inst, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, int K)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int[][]</type>
      <name>getTypes</name>
      <anchorfile>classmstparser_1_1DependencyDecoder.html</anchorfile>
      <anchor>acfb28e05937c11be3c629c53589f0025</anchor>
      <arglist>(double[][][][] nt_probs, int len)</arglist>
    </member>
    <member kind="variable" protection="package">
      <type>DependencyPipe</type>
      <name>pipe</name>
      <anchorfile>classmstparser_1_1DependencyDecoder.html</anchorfile>
      <anchor>acd26a1532b9a0689ac751ddcb0dc8167</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyDecoder2O</name>
    <filename>classmstparser_1_1DependencyDecoder2O.html</filename>
    <base>mstparser::DependencyDecoder</base>
    <member kind="function">
      <type></type>
      <name>DependencyDecoder2O</name>
      <anchorfile>classmstparser_1_1DependencyDecoder2O.html</anchorfile>
      <anchor>a5a7f250ac724023f0485affab2ae85da</anchor>
      <arglist>(DependencyPipe pipe)</arglist>
    </member>
    <member kind="function">
      <type>Object[][]</type>
      <name>decodeNonProjective</name>
      <anchorfile>classmstparser_1_1DependencyDecoder2O.html</anchorfile>
      <anchor>a4d277985a59605d040323ff7ef5b5099</anchor>
      <arglist>(DependencyInstance inst, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][] fvs_trips, double[][][] probs_trips, FeatureVector[][][] fvs_sibs, double[][][] probs_sibs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, int K)</arglist>
    </member>
    <member kind="function">
      <type>Object[][]</type>
      <name>decodeProjective</name>
      <anchorfile>classmstparser_1_1DependencyDecoder2O.html</anchorfile>
      <anchor>a2d2f846a113931904d142c65a3fd632b</anchor>
      <arglist>(DependencyInstance inst, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][] fvs_trips, double[][][] probs_trips, FeatureVector[][][] fvs_sibs, double[][][] probs_sibs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, int K)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyEvaluator</name>
    <filename>classmstparser_1_1DependencyEvaluator.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evaluate</name>
      <anchorfile>classmstparser_1_1DependencyEvaluator.html</anchorfile>
      <anchor>a2f76646d58ca8c8a4828943a1a76a13a</anchor>
      <arglist>(String act_file, String pred_file, String format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>main</name>
      <anchorfile>classmstparser_1_1DependencyEvaluator.html</anchorfile>
      <anchor>af3fbd51a912b1069b1d099b31968a30f</anchor>
      <arglist>(String[] args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyInstance</name>
    <filename>classmstparser_1_1DependencyInstance.html</filename>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a45ec9f375394fa7cc22483970bbf38e8</anchor>
      <arglist>(DependencyInstance source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>aec1b327185fa05f4bd4d0e4a458b694c</anchor>
      <arglist>(String[] forms, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a1f9ad7a6172cdccca8221fe22d96b9a6</anchor>
      <arglist>(String[] forms, String[] postags, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>ae5fd18b39aea0886e3d95c6111a7d29a</anchor>
      <arglist>(String[] forms, String[] postags, String[] labs, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a8e11992eac2eaa8be46e40f672338431</anchor>
      <arglist>(String[] forms, String[] postags, String[] labs, int[] heads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a372249c28267a7a7edc4bfb541e179c9</anchor>
      <arglist>(String[] forms, String[] lemmas, String[] cpostags, String[] postags, String[][] feats, String[] labs, int[] heads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyInstance</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>ad7ae18e900311f47bc0b1926bcf9a7f9</anchor>
      <arglist>(String[] forms, String[] lemmas, String[] cpostags, String[] postags, String[][] feats, String[] labs, int[] heads, RelationalFeature[] relFeats)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFeatureVector</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a0bad164a9e2f6aea53cf105c99657d10</anchor>
      <arglist>(FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>adf88ba5d4c9adbedfc725b392d1ad228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a51dfeb22cfdacd009eca875491df81bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FeatureVector</type>
      <name>fv</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a59409b03e33d6048043c82b34e7008ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>actParseTree</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a91ddd22577dc0665d824c1ef5bb1c06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>forms</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>aad401d7284b328d065afdd4a9c4699c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>lemmas</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a3fdda73769b49d1f949ce92d72af9a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>cpostags</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a4e05af3378daa32823841722b8c90ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>postags</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a998bc5dec1930bb225de06a3b1a9272b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[][]</type>
      <name>feats</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a58c1630f5adf33e12cf957b829bd0372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int[]</type>
      <name>heads</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>aed5b7b306b421b5356a86685da0e7855</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>deprels</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>a88377b95497507ae69f55a3d7cb675dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelationalFeature[]</type>
      <name>relFeats</name>
      <anchorfile>classmstparser_1_1DependencyInstance.html</anchorfile>
      <anchor>aece2eac2fc007f74677d0f05357312b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyParser</name>
    <filename>classmstparser_1_1DependencyParser.html</filename>
    <member kind="function">
      <type></type>
      <name>DependencyParser</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>a0bfeec5afb71a0633b642fafdfcfda03</anchor>
      <arglist>(DependencyPipe pipe, ParserOptions options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>train</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>a8f238310312e312d248db13414dd9ccf</anchor>
      <arglist>(int[] instanceLengths, String trainfile, File train_forest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveModel</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>a9b60bc1edc2fd5176cd5a6823da8fb5e</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadModel</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>ac96ac7e724c9cf2f3736fa8a5c5909f3</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputParses</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>a9f199c0aa6535bec67d934d0bc6448b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>main</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>a48f9d8e4dbada5fcf3c8d564782c854d</anchor>
      <arglist>(String[] args)</arglist>
    </member>
    <member kind="variable">
      <type>ParserOptions</type>
      <name>options</name>
      <anchorfile>classmstparser_1_1DependencyParser.html</anchorfile>
      <anchor>a8216d15b3935fbd0ec207db1a7e43155</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyPipe</name>
    <filename>classmstparser_1_1DependencyPipe.html</filename>
    <member kind="function">
      <type></type>
      <name>DependencyPipe</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a28ba5b8395eddec30cc34b43aad932f9</anchor>
      <arglist>(ParserOptions options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initInputFile</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a58692be62a7785bb29ca3631cdf06624</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initOutputFile</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a060afb11ca904f44d41be9fe49ac413f</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputInstance</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>aea500939460ea83a22e8c2243563f344</anchor>
      <arglist>(DependencyInstance instance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a2d5e277a752411ee3324b78d0e2f0bbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getType</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>abfa0b78511e83ccd5c0b595001e479a2</anchor>
      <arglist>(int typeIndex)</arglist>
    </member>
    <member kind="function">
      <type>int[]</type>
      <name>createInstances</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a5c5902b10053c33e97a543aefd8a0552</anchor>
      <arglist>(String file, File featFileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeAlphabets</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a1af583e13d04883d762ef7dd7c5b89dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>final void</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>accce7600e50a9c2a6e6a4c4870a1fb66</anchor>
      <arglist>(String feat, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>final void</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>ad08b56e61ae8a45f4727a23f117e28c0</anchor>
      <arglist>(String feat, double val, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>FeatureVector</type>
      <name>createFeatureVector</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a10dc970db3c7ea30b966395aae3272b3</anchor>
      <arglist>(DependencyInstance instance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoreFeatures</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>aa20274a418d473c46ece7d77b8c06c58</anchor>
      <arglist>(DependencyInstance instance, int small, int large, boolean attR, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLabeledFeatures</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>ac0dc9ce14772e16752b9364b86d00c9a</anchor>
      <arglist>(DependencyInstance instance, int word, String type, boolean attR, boolean childFeatures, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillFeatureVectors</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a399ebb69f0a5e598353000f377535105</anchor>
      <arglist>(DependencyInstance instance, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, Parameters params)</arglist>
    </member>
    <member kind="function">
      <type>DependencyInstance</type>
      <name>readInstance</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>ac85ec2345561e573fe598a255117c378</anchor>
      <arglist>(ObjectInputStream in, int length, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, Parameters params)</arglist>
    </member>
    <member kind="variable">
      <type>Alphabet</type>
      <name>dataAlphabet</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a6586ec82ff8a563e2518dd4d4b6c896f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Alphabet</type>
      <name>typeAlphabet</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>ae9423fcfcf30c013a05ce22fd1145c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[]</type>
      <name>types</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>ad8b9e8dfcb27e849b0b46bdf508ca83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int[]</type>
      <name>typesInt</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a138e7bd469d3b16a6f211de1e08d4655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>labeled</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a87501f52449f26b233b6d7dd701d2170</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>final DependencyInstance</type>
      <name>nextInstance</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a7f6ef8cbb814772ce8e442768dd88f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addExtendedFeatures</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a47c162d01736e43d885c4b9863888d26</anchor>
      <arglist>(DependencyInstance instance, FeatureVector fv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeInstance</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a3ea85c069bcfe3ddfb89cb6c031d8f36</anchor>
      <arglist>(DependencyInstance instance, ObjectOutputStream out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeExtendedFeatures</name>
      <anchorfile>classmstparser_1_1DependencyPipe.html</anchorfile>
      <anchor>a08ecc2b509221d129c2e46fc143a80bc</anchor>
      <arglist>(DependencyInstance instance, ObjectOutputStream out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::DependencyPipe2O</name>
    <filename>classmstparser_1_1DependencyPipe2O.html</filename>
    <base>mstparser::DependencyPipe</base>
    <member kind="function">
      <type></type>
      <name>DependencyPipe2O</name>
      <anchorfile>classmstparser_1_1DependencyPipe2O.html</anchorfile>
      <anchor>a552af844f0b5a779dae5b9fd55521396</anchor>
      <arglist>(ParserOptions options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillFeatureVectors</name>
      <anchorfile>classmstparser_1_1DependencyPipe2O.html</anchorfile>
      <anchor>a8c6d0b632717356802aa04e0ea8f2e9c</anchor>
      <arglist>(DependencyInstance instance, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][] fvs_trips, double[][][] probs_trips, FeatureVector[][][] fvs_sibs, double[][][] probs_sibs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, Parameters params)</arglist>
    </member>
    <member kind="function">
      <type>DependencyInstance</type>
      <name>readInstance</name>
      <anchorfile>classmstparser_1_1DependencyPipe2O.html</anchorfile>
      <anchor>acf28a11a4f3342130b68b75cf6198f6c</anchor>
      <arglist>(ObjectInputStream in, int length, FeatureVector[][][] fvs, double[][][] probs, FeatureVector[][][] fvs_trips, double[][][] probs_trips, FeatureVector[][][] fvs_sibs, double[][][] probs_sibs, FeatureVector[][][][] nt_fvs, double[][][][] nt_probs, Parameters params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addExtendedFeatures</name>
      <anchorfile>classmstparser_1_1DependencyPipe2O.html</anchorfile>
      <anchor>acc094918e0f847d4ac0ce3f21c6662a0</anchor>
      <arglist>(DependencyInstance instance, FeatureVector fv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeExtendedFeatures</name>
      <anchorfile>classmstparser_1_1DependencyPipe2O.html</anchorfile>
      <anchor>a1a2edeb57ac26d9c0c3ce7026393ef29</anchor>
      <arglist>(DependencyInstance instance, ObjectOutputStream out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::Feature</name>
    <filename>classmstparser_1_1Feature.html</filename>
    <member kind="function">
      <type></type>
      <name>Feature</name>
      <anchorfile>classmstparser_1_1Feature.html</anchorfile>
      <anchor>a5c445cf0f3cdfadd99a17b4db030b1f1</anchor>
      <arglist>(int i, double v)</arglist>
    </member>
    <member kind="function">
      <type>final Feature</type>
      <name>clone</name>
      <anchorfile>classmstparser_1_1Feature.html</anchorfile>
      <anchor>acacd3d0c4a2b4dda3a516146a30c7a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>final Feature</type>
      <name>negation</name>
      <anchorfile>classmstparser_1_1Feature.html</anchorfile>
      <anchor>a6296b249dc1a02defd359bd16d7c78a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>final String</type>
      <name>toString</name>
      <anchorfile>classmstparser_1_1Feature.html</anchorfile>
      <anchor>a8a21c64d94814df4f244511fc4553b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classmstparser_1_1Feature.html</anchorfile>
      <anchor>a4c473e4481d5556f4566749d3a9142ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>classmstparser_1_1Feature.html</anchorfile>
      <anchor>a4b6105d258e0f09324f2d9648804417a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::FeatureVector</name>
    <filename>classmstparser_1_1FeatureVector.html</filename>
    <member kind="function">
      <type></type>
      <name>FeatureVector</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>a4db1d3d349787a9de99e90a3ddb41861</anchor>
      <arglist>(FeatureVector fv1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureVector</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>a410affdb7255f09e7ed08bcf13337616</anchor>
      <arglist>(FeatureVector fv1, FeatureVector fv2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureVector</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>a3e682e5305bb45603d82e043a84a5584</anchor>
      <arglist>(FeatureVector fv1, FeatureVector fv2, boolean negSecond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeatureVector</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>aa886ae9e7e66c977b002d028e873e92e</anchor>
      <arglist>(int[] keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>a659e5e70b3a7c13ecec5c8c5e92b69ab</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>int[]</type>
      <name>keys</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>a56d85b9111146943fc0aaaf82cf63075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>final FeatureVector</type>
      <name>cat</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>ae4ba90ff3fd31a66e94a9f4cb61c778d</anchor>
      <arglist>(FeatureVector fl2)</arglist>
    </member>
    <member kind="function">
      <type>FeatureVector</type>
      <name>getDistVector</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>ad2a9996b7ab69b766fc3c6ef1de4dff7</anchor>
      <arglist>(FeatureVector fl2)</arglist>
    </member>
    <member kind="function">
      <type>final double</type>
      <name>getScore</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>aa9f4847f097dcc0f105843a1b325f6cd</anchor>
      <arglist>(double[] parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>afb4d05854299aa65b3a84a6e7bf708ce</anchor>
      <arglist>(double[] parameters, double[] total, double alpha_k, double upd)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dotProduct</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>a7268e01fbf66adce9c50488bc5432319</anchor>
      <arglist>(FeatureVector fl2)</arglist>
    </member>
    <member kind="function">
      <type>final String</type>
      <name>toString</name>
      <anchorfile>classmstparser_1_1FeatureVector.html</anchorfile>
      <anchor>aa76e9ef8e2a415d3ec62dc6d75d847e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::KBestParseForest</name>
    <filename>classmstparser_1_1KBestParseForest.html</filename>
    <member kind="function">
      <type></type>
      <name>KBestParseForest</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>af3078f54092f53fc676789a2c2a8f8c5</anchor>
      <arglist>(int start, int end, DependencyInstance inst, int K)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a0c47096c0fad23a8ddcf6140e9ccd07d</anchor>
      <arglist>(int s, int type, int dir, double score, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a2345d80dd0940cb754f7e6f20d709bc1</anchor>
      <arglist>(int s, int r, int t, int type, int dir, int comp, double score, FeatureVector fv, ParseForestItem p1, ParseForestItem p2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProb</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a560082ed7e7af5b4936fa7bcff3de08c</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProb</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a48f509af07258f31a5f8c678919c64b6</anchor>
      <arglist>(int s, int t, int dir, int comp, int i)</arglist>
    </member>
    <member kind="function">
      <type>double[]</type>
      <name>getProbs</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>af941021f5c7aec7fcadf7fcbb8aa85b1</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>ParseForestItem</type>
      <name>getItem</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a25b6c76d14dd9f49a3b7c6a8c5c939c8</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>ParseForestItem</type>
      <name>getItem</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a1df20d5e7fe79d547564a6889220e6b0</anchor>
      <arglist>(int s, int t, int dir, int comp, int k)</arglist>
    </member>
    <member kind="function">
      <type>ParseForestItem[]</type>
      <name>getItems</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a3ae02376607f6b7e40614df447367fdc</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>Object[]</type>
      <name>getBestParse</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>ab7783071c1dc0073dfd186e9a7a4abe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Object[][]</type>
      <name>getBestParses</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>aca52de6fa141c9f5e57f410c8dabaede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FeatureVector</type>
      <name>getFeatureVector</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a1c2bdd6b5b2fda37ac3f88eb87fcd8f3</anchor>
      <arglist>(ParseForestItem pfi)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDepString</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a2638c1b3d8c6b6ab360d042bd2fc5f71</anchor>
      <arglist>(ParseForestItem pfi)</arglist>
    </member>
    <member kind="function">
      <type>FeatureVector</type>
      <name>cat</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>ab7a19791f7a0f46cad6d9f81c1c07dcf</anchor>
      <arglist>(FeatureVector fv1, FeatureVector fv2)</arglist>
    </member>
    <member kind="function">
      <type>int[][]</type>
      <name>getKBestPairs</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>a5acd38a4f2fc07d74e8f6daff4d430ba</anchor>
      <arglist>(ParseForestItem[] items1, ParseForestItem[] items2)</arglist>
    </member>
    <member kind="variable">
      <type>ParseForestItem[][][][][]</type>
      <name>chart</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>acf13a6481b007292e95accec7154a992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>rootType</name>
      <anchorfile>classmstparser_1_1KBestParseForest.html</anchorfile>
      <anchor>aa7a77fe225d2c67f9026df046c72e4e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::ValueIndexPair</name>
    <filename>classmstparser_1_1ValueIndexPair.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueIndexPair</name>
      <anchorfile>classmstparser_1_1ValueIndexPair.html</anchorfile>
      <anchor>a032c49960992d6242f6a0b69ee52c194</anchor>
      <arglist>(double val, int i1, int i2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareTo</name>
      <anchorfile>classmstparser_1_1ValueIndexPair.html</anchorfile>
      <anchor>a692707fa8ad62cc67df9257caff83895</anchor>
      <arglist>(ValueIndexPair other)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>val</name>
      <anchorfile>classmstparser_1_1ValueIndexPair.html</anchorfile>
      <anchor>afbb571ed17d1cba095cb61fd0d6991a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i1</name>
      <anchorfile>classmstparser_1_1ValueIndexPair.html</anchorfile>
      <anchor>abdc96336815ff6a6f5074c47a2ac7536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>i2</name>
      <anchorfile>classmstparser_1_1ValueIndexPair.html</anchorfile>
      <anchor>a8edfed12e13dda3d80db60edff4967a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::BinaryHeap</name>
    <filename>classmstparser_1_1BinaryHeap.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryHeap</name>
      <anchorfile>classmstparser_1_1BinaryHeap.html</anchorfile>
      <anchor>ae6ac832bb173087de48d75d78ac3f54b</anchor>
      <arglist>(int def_cap)</arglist>
    </member>
    <member kind="function">
      <type>ValueIndexPair</type>
      <name>getMax</name>
      <anchorfile>classmstparser_1_1BinaryHeap.html</anchorfile>
      <anchor>ad96ca18c1e77db50cc7be0649ae58266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1BinaryHeap.html</anchorfile>
      <anchor>a04dd91d0b0508c570798773f79ca4c2c</anchor>
      <arglist>(ValueIndexPair e)</arglist>
    </member>
    <member kind="function">
      <type>ValueIndexPair</type>
      <name>removeMax</name>
      <anchorfile>classmstparser_1_1BinaryHeap.html</anchorfile>
      <anchor>aee1fddce1f32ccc9ed548c2f5fd81447</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::KBestParseForest2O</name>
    <filename>classmstparser_1_1KBestParseForest2O.html</filename>
    <member kind="function">
      <type></type>
      <name>KBestParseForest2O</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>aa59fea3a2aa10dd56b7ef3f50c52486f</anchor>
      <arglist>(int start, int end, DependencyInstance inst, int K)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a20266cb403829af6b477f1d188b2a067</anchor>
      <arglist>(int s, int type, int dir, double score, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>add</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a78afa47a2871b7b999a817d1e9a7f8da</anchor>
      <arglist>(int s, int r, int t, int type, int dir, int comp, double score, FeatureVector fv, ParseForestItem p1, ParseForestItem p2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProb</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>ac1ab0a97276b3450514cfe14b291446c</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProb</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>acf0b00c9ac6cb6e8c185f2f95bbee125</anchor>
      <arglist>(int s, int t, int dir, int comp, int i)</arglist>
    </member>
    <member kind="function">
      <type>double[]</type>
      <name>getProbs</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a02f335cf12363e2e9a4b2bf8b3976216</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>ParseForestItem</type>
      <name>getItem</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a3289dcf0cfbb1a084482ab227db31a78</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>ParseForestItem</type>
      <name>getItem</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a69fe07f37c8e6dbbeb4b7178d6d4e8c6</anchor>
      <arglist>(int s, int t, int dir, int comp, int i)</arglist>
    </member>
    <member kind="function">
      <type>ParseForestItem[]</type>
      <name>getItems</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>ac26c578574e15ac66c64379b348e5beb</anchor>
      <arglist>(int s, int t, int dir, int comp)</arglist>
    </member>
    <member kind="function">
      <type>Object[]</type>
      <name>getBestParse</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a896f763880fedc0c953e0975c39c189b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Object[][]</type>
      <name>getBestParses</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>ae8bd28e9846d86af80667fef9eebfb02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FeatureVector</type>
      <name>getFeatureVector</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a487f347871f70e193b777ffcab7d51a6</anchor>
      <arglist>(ParseForestItem pfi)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getDepString</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>a8dc1f8255461d9ffaf58ad7011134d57</anchor>
      <arglist>(ParseForestItem pfi)</arglist>
    </member>
    <member kind="function">
      <type>FeatureVector</type>
      <name>cat</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>aa6f42712f2ffe8767c5e50b70f21ca83</anchor>
      <arglist>(FeatureVector fv1, FeatureVector fv2)</arglist>
    </member>
    <member kind="function">
      <type>int[][]</type>
      <name>getKBestPairs</name>
      <anchorfile>classmstparser_1_1KBestParseForest2O.html</anchorfile>
      <anchor>ac74e9096663633970c6c9221e24cd6c7</anchor>
      <arglist>(ParseForestItem[] items1, ParseForestItem[] items2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::Parameters</name>
    <filename>classmstparser_1_1Parameters.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a5e02754331c715de3257291c29641563</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoss</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a03db50e24e163102327515621a418ac6</anchor>
      <arglist>(String lt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>averageParams</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>ad57ecfbe393829921eba8cea3106df0b</anchor>
      <arglist>(double avVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParamsMIRA</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a3ab5e7f434d6581409fc8d030f87bb6d</anchor>
      <arglist>(DependencyInstance inst, Object[][] d, double upd)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScore</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a612ec4f64866159484344e8c96719060</anchor>
      <arglist>(FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numErrors</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a35d2458456ef7cafb5d4268df6f87642</anchor>
      <arglist>(DependencyInstance inst, String pred, String act)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numErrorsDep</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a7bc550455311b6f6010c85527e38c193</anchor>
      <arglist>(DependencyInstance inst, String pred, String act)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numErrorsLabel</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a176a90f57acf8874e7241912d6b48d62</anchor>
      <arglist>(DependencyInstance inst, String pred, String act)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numErrorsDepNoPunc</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a99c098d3c2ec76e3e59bf4c27ed2a509</anchor>
      <arglist>(DependencyInstance inst, String pred, String act)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>numErrorsLabelNoPunc</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a4c46c8ffe2423b360ef05e8737550045</anchor>
      <arglist>(DependencyInstance inst, String pred, String act)</arglist>
    </member>
    <member kind="variable">
      <type>double[]</type>
      <name>parameters</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a6ff77d59c53d52c1dcb02443e92c8864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double[]</type>
      <name>total</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>a9aad3a3d74cf6e0021b8b236b5a2cb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>lossType</name>
      <anchorfile>classmstparser_1_1Parameters.html</anchorfile>
      <anchor>ad01a01b3dbbd5cebf705ea187766e7d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::ParseForestItem</name>
    <filename>classmstparser_1_1ParseForestItem.html</filename>
    <member kind="function">
      <type></type>
      <name>ParseForestItem</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>ad6f6c3bf6edbf2ee2efd453f735138d1</anchor>
      <arglist>(int i, int k, int j, int type, int dir, int comp, double prob, FeatureVector fv, ParseForestItem left, ParseForestItem right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParseForestItem</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a41a1c2476a3fdc2a955cacf79fbcaf95</anchor>
      <arglist>(int s, int type, int dir, double prob, FeatureVector fv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyValues</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a83198a8840e631aac48a9b6f7a40c29c</anchor>
      <arglist>(ParseForestItem p)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>equals</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>ab3d01175df7f5a79e34ff61eb3281158</anchor>
      <arglist>(ParseForestItem p)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isPre</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>ae1a3a8913f60581a1e0efa5cff87c0c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>s</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>add5ea45c3827eaeffa71e42a38f2e66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>r</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a366ce29a56d04a607fbd463c5c6409cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>t</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a1423d102f75c0c5bd94144777f3ada43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dir</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>afbcd14764b59ea52e13869a6be744886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>comp</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a8257ed98d1042e2d9efaa0d3a1086846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>length</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>aa874239908e4ea99d36856c86b1f729a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>ae686106ac4ea4277f9ec1ef7e8e80213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prob</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a946b6dbce94d93fed319537dba5827da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FeatureVector</type>
      <name>fv</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a7bd921eab462caffa88b0a05a91bff77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParseForestItem</type>
      <name>left</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>a8d00333bd01a8ef003fe7d9a1ea0c3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParseForestItem</type>
      <name>right</name>
      <anchorfile>classmstparser_1_1ParseForestItem.html</anchorfile>
      <anchor>afd62b015b5aa5c93fa2dc9b7d04bf071</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::ParserOptions</name>
    <filename>classmstparser_1_1ParserOptions.html</filename>
    <member kind="function">
      <type></type>
      <name>ParserOptions</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>aab1d2428e2e89b5893c0ddda48cbde1c</anchor>
      <arglist>(String[] args)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a6833e87d7966cf03744dcfc9845c4d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>trainfile</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a5d972310a7541a16db1dbb4377cb7351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>testfile</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>adb0e4b94beea369414bf83a56e5e121b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>File</type>
      <name>trainforest</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>ad1eda687eeeecd36bbd341e584eb089c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>File</type>
      <name>testforest</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a55fd2a1027349cb26df956920ddf0908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>train</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a85cbafa73defa75dc2ad3fc50c0582a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>eval</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a6a8bd9294cec8d6e5626863e58e565f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>test</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a723563c7aa7d6092dbd1b47b615f45a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>modelName</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a81ade95272540bbc5f9b522d78f89dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>lossType</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>afd182fd40d0556fca2b38b7d4af55f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>createForest</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a071f2f80a5dd0742e38fdd4899b4508a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>decodeType</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a8f61909cec5198396abec1f79a5fda6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>format</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a985830496e4dfedbac7abdd37bef1f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numIters</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>af0af0782b8866f4b7e4bf83bc943bb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>outfile</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>aca5049d029fe130a6c23da07fd49ee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>goldfile</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a03f92747f313629750c31b953cf46a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>trainK</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a46de92a988f03f8ac00cb8a1e8bd50af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>testK</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a37a100259ded4e309714bd8812c77ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>secondOrder</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a04f2ad9a7936a14f8f2f6370b68bca5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>useRelationalFeatures</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>a627500dd99994c9717e9acd28767848e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boolean</type>
      <name>discourseMode</name>
      <anchorfile>classmstparser_1_1ParserOptions.html</anchorfile>
      <anchor>ab5cbcc271e8258b935f8d28cb0e3b371</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::RelationalFeature</name>
    <filename>classmstparser_1_1RelationalFeature.html</filename>
    <member kind="function">
      <type></type>
      <name>RelationalFeature</name>
      <anchorfile>classmstparser_1_1RelationalFeature.html</anchorfile>
      <anchor>aae30e08a19c391ee20957979f15a8d52</anchor>
      <arglist>(int size, String declaration, BufferedReader br)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getFeature</name>
      <anchorfile>classmstparser_1_1RelationalFeature.html</anchorfile>
      <anchor>a46df7d745110c0c9ead9c84e27915d79</anchor>
      <arglist>(int firstIndex, int secondIndex)</arglist>
    </member>
    <member kind="variable">
      <type>String</type>
      <name>name</name>
      <anchorfile>classmstparser_1_1RelationalFeature.html</anchorfile>
      <anchor>a20da55ded8d249ee396bd2c296e4ca95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String[][]</type>
      <name>values</name>
      <anchorfile>classmstparser_1_1RelationalFeature.html</anchorfile>
      <anchor>a7f77d67c3c193bfa8803bdc5e38418b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::Util</name>
    <filename>classmstparser_1_1Util.html</filename>
    <member kind="function" static="yes">
      <type>static int[]</type>
      <name>stringsToInts</name>
      <anchorfile>classmstparser_1_1Util.html</anchorfile>
      <anchor>a7a473324f6e2375cfc8b39144a5c0629</anchor>
      <arglist>(String[] stringreps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>join</name>
      <anchorfile>classmstparser_1_1Util.html</anchorfile>
      <anchor>ae2da872b0e350f09072aac698b416319</anchor>
      <arglist>(String[] a, char sep)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>join</name>
      <anchorfile>classmstparser_1_1Util.html</anchorfile>
      <anchor>ab56f5be083fc631bb0eeb8e4b95a2e83</anchor>
      <arglist>(int[] a, char sep)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::io::CONLLReader</name>
    <filename>classmstparser_1_1io_1_1CONLLReader.html</filename>
    <base>mstparser::io::DependencyReader</base>
    <member kind="function">
      <type></type>
      <name>CONLLReader</name>
      <anchorfile>classmstparser_1_1io_1_1CONLLReader.html</anchorfile>
      <anchor>af2e3375ba9d59eeae45845c5f2bbd60f</anchor>
      <arglist>(boolean discourseMode)</arglist>
    </member>
    <member kind="function">
      <type>DependencyInstance</type>
      <name>getNext</name>
      <anchorfile>classmstparser_1_1io_1_1CONLLReader.html</anchorfile>
      <anchor>a2abcb2c5d6aae9240a42afcef10a4ccc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>boolean</type>
      <name>fileContainsLabels</name>
      <anchorfile>classmstparser_1_1io_1_1CONLLReader.html</anchorfile>
      <anchor>a9c0574130bd566b1bf98ddc04ae7affe</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boolean</type>
      <name>discourseMode</name>
      <anchorfile>classmstparser_1_1io_1_1CONLLReader.html</anchorfile>
      <anchor>a6613a5db92c75663e4c004d1b645394e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::io::CONLLWriter</name>
    <filename>classmstparser_1_1io_1_1CONLLWriter.html</filename>
    <base>mstparser::io::DependencyWriter</base>
    <member kind="function">
      <type></type>
      <name>CONLLWriter</name>
      <anchorfile>classmstparser_1_1io_1_1CONLLWriter.html</anchorfile>
      <anchor>a3f3c32c9cc37a5bd28b087091d4cee5c</anchor>
      <arglist>(boolean labeled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classmstparser_1_1io_1_1CONLLWriter.html</anchorfile>
      <anchor>ac05c57ec9be16e0e6a8c718a3dc9e9ca</anchor>
      <arglist>(DependencyInstance instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::io::DependencyReader</name>
    <filename>classmstparser_1_1io_1_1DependencyReader.html</filename>
    <member kind="function">
      <type>boolean</type>
      <name>startReading</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>aed6d91d39e122754719d7e3d01f05026</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isLabeled</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>abcd3871e3600780a209d92988627df31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>abstract mstparser.DependencyInstance</type>
      <name>getNext</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>af36eda4b82f189044bcfe6364458c116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyReader</type>
      <name>createDependencyReader</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>a1fcb7fe3a6edc5ae299700488477d660</anchor>
      <arglist>(String format, boolean discourseMode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyReader</type>
      <name>createDependencyReader</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>ab5c02feda68bf1c768b4b97e42097873</anchor>
      <arglist>(String format)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>abstract boolean</type>
      <name>fileContainsLabels</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>a948c0deb5940f2e25e7a3b2097cd4546</anchor>
      <arglist>(String filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>String</type>
      <name>normalize</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>a3238309398b641ce0634448e7197d8aa</anchor>
      <arglist>(String s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BufferedReader</type>
      <name>inputReader</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>a0b69bc5195ebb436a8a5f0c22deee407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boolean</type>
      <name>labeled</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyReader.html</anchorfile>
      <anchor>a165e26aebb32954e41cfd6efa5cb6338</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::io::DependencyWriter</name>
    <filename>classmstparser_1_1io_1_1DependencyWriter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>startWriting</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>a76ff97db1e16ce6aa0861c2997200cb4</anchor>
      <arglist>(String file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishWriting</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>a0c56d0e59a7833b4d877f161928367aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boolean</type>
      <name>isLabeled</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>a9256e5c08ab4f46471ef44e5794f5ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>abstract void</type>
      <name>write</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>a2b54e6beccd6de24019987dc2f581496</anchor>
      <arglist>(DependencyInstance instance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DependencyWriter</type>
      <name>createDependencyWriter</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>a64285adfb4fc9445a14635544acf7cbd</anchor>
      <arglist>(String format, boolean labeled)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BufferedWriter</type>
      <name>writer</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>a89fc1cedbe835a274ee6cfb851e3d302</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boolean</type>
      <name>labeled</name>
      <anchorfile>classmstparser_1_1io_1_1DependencyWriter.html</anchorfile>
      <anchor>ac17a65c091653a0e892c258b483fbecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::io::MSTReader</name>
    <filename>classmstparser_1_1io_1_1MSTReader.html</filename>
    <base>mstparser::io::DependencyReader</base>
    <member kind="function">
      <type>DependencyInstance</type>
      <name>getNext</name>
      <anchorfile>classmstparser_1_1io_1_1MSTReader.html</anchorfile>
      <anchor>ad3f8f60a6c186fa6292ba5e7319e51f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>boolean</type>
      <name>fileContainsLabels</name>
      <anchorfile>classmstparser_1_1io_1_1MSTReader.html</anchorfile>
      <anchor>a6fbb61befba770c62bc50d71e674f73d</anchor>
      <arglist>(String file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>mstparser::io::MSTWriter</name>
    <filename>classmstparser_1_1io_1_1MSTWriter.html</filename>
    <base>mstparser::io::DependencyWriter</base>
    <member kind="function">
      <type></type>
      <name>MSTWriter</name>
      <anchorfile>classmstparser_1_1io_1_1MSTWriter.html</anchorfile>
      <anchor>a500797160d56d2863026ec35833d0466</anchor>
      <arglist>(boolean labeled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classmstparser_1_1io_1_1MSTWriter.html</anchorfile>
      <anchor>a71b36b42ff310deff9248b38722ef009</anchor>
      <arglist>(DependencyInstance instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pos_constraints::PosConstraint</name>
    <filename>classpos__constraints_1_1PosConstraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>abb264f9fc2420da50ce0e0daaf2166f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>inc_sent</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>a93a1a761ece40bc0e28f810f3a2b0a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>stats</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>addd4fd53eb12f6556c7f13c52b698b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>groups</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>acc95bb2691939fe0255dcc0aa4c4791b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>zerozero</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>a3163f81a0f3e16b72c41074fca058e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>a6a9d44fb9cd4af4304e498373b1e98af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>constraints</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>a9cc41ca57a818666f83ac2f5314371f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>wc</name>
      <anchorfile>classpos__constraints_1_1PosConstraint.html</anchorfile>
      <anchor>ac6a4033f0b81519578a9b3da1fc1ba8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pos_constraints_mrf::PosNode</name>
    <filename>classpos__constraints__mrf_1_1PosNode.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>a5806f418b1fcf95fc35df7cb3d212c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_blank_potentials</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>a5b09a1ebfe88f7e01be103e0a389f35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>convert_to_protobuf</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>a0f219a3a2e91b04d053c15fb2bd0db6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>id</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>ac34924f0bee456c594a5adeb58c40502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>label</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>a9263468af13640d55a884500b87dbf36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>edges</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>ad36d2ab5212a11cb117ba91ba219e8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>potentials</name>
      <anchorfile>classpos__constraints__mrf_1_1PosNode.html</anchorfile>
      <anchor>adbfbeb5b4ce5c7d3e012a57266743d85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pos_constraints_mrf::PosEdge</name>
    <filename>classpos__constraints__mrf_1_1PosEdge.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classpos__constraints__mrf_1_1PosEdge.html</anchorfile>
      <anchor>a272007cd91631d6da5d300681b5724a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_same_potentials</name>
      <anchorfile>classpos__constraints__mrf_1_1PosEdge.html</anchorfile>
      <anchor>a4eb2b4fdf04240b539f02cf3443d11ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>convert_to_protobuf</name>
      <anchorfile>classpos__constraints__mrf_1_1PosEdge.html</anchorfile>
      <anchor>ac55da0e7a45b1f9b910740077a08a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>to_node</name>
      <anchorfile>classpos__constraints__mrf_1_1PosEdge.html</anchorfile>
      <anchor>aeca030c4d6a5adb4ca1d8a7078209754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>potentials</name>
      <anchorfile>classpos__constraints__mrf_1_1PosEdge.html</anchorfile>
      <anchor>aa81ae5ac8eb21adcabc6468a9398f4db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pos_constraints_mrf::PosMrf</name>
    <filename>classpos__constraints__mrf_1_1PosMrf.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classpos__constraints__mrf_1_1PosMrf.html</anchorfile>
      <anchor>a0a036f61955e96161a2f4888198668f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_potts_edges</name>
      <anchorfile>classpos__constraints__mrf_1_1PosMrf.html</anchorfile>
      <anchor>a7a3af0e7a22eea7bcfb579436482fd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_naive_bayes_edges</name>
      <anchorfile>classpos__constraints__mrf_1_1PosMrf.html</anchorfile>
      <anchor>a920e4f4d5f47079a4f7dabd92728483b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>convert_to_protobuf</name>
      <anchorfile>classpos__constraints__mrf_1_1PosMrf.html</anchorfile>
      <anchor>af54eb741fae5ed08c26963c0f84b8999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>label</name>
      <anchorfile>classpos__constraints__mrf_1_1PosMrf.html</anchorfile>
      <anchor>a5fc6565b99afc2c10ceb6ecd9420e342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>nodes</name>
      <anchorfile>classpos__constraints__mrf_1_1PosMrf.html</anchorfile>
      <anchor>ad818bb6139a315eb70390ad881b6783a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>protobuf_json::ParseError</name>
    <filename>classprotobuf__json_1_1ParseError.html</filename>
  </compound>
  <compound kind="namespace">
    <name>protoc</name>
    <filename>namespaceprotoc.html</filename>
    <member kind="function">
      <type>def</type>
      <name>ProtocEmitter</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>ac5ef9b333395b77ebcb0fa68a1e61957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>generate</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>ad49cf73a0ff7f84b18cbcfbf8d76de0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>exists</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>a69ac3d5198cf6e2a42f6256c12496a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>__author__</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>a8a1414a27d710d2529c86329f46afc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>protocs</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>a5bed9469eabb09ba16894fb1248a5a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>ProtocAction</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>ae8b1ca3d2ced7243684a0e4e444c1167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tuple</type>
      <name>ProtocBuilder</name>
      <anchorfile>namespaceprotoc.html</anchorfile>
      <anchor>a111c74671afe293add0dbdbab0a89f53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::Graph::Graphedge</name>
    <filename>classScarab_1_1Graph_1_1Graphedge.html</filename>
    <member kind="function">
      <type></type>
      <name>Graphedge</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphedge.html</anchorfile>
      <anchor>aea165d2e0b46a46180f5e684df52abdf</anchor>
      <arglist>(uint id, const Graphnode &amp;from, const Graphnode &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>id</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphedge.html</anchorfile>
      <anchor>af4e2b922eb0db014aa6af45ef911e47c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>from_node</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphedge.html</anchorfile>
      <anchor>a10760ab9034b358f9bd4aa28c44117d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>to_node</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphedge.html</anchorfile>
      <anchor>ae5b1fccfa8a11847b8be2a27690243f0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::Graph::Graphnode</name>
    <filename>classScarab_1_1Graph_1_1Graphnode.html</filename>
    <member kind="function">
      <type></type>
      <name>Graphnode</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>adce1b3b5b83d8fca4952f244bd093b9f</anchor>
      <arglist>(uint id)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>id</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a74eaaed5d31a0a2c0445f3de0859148f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a78229cc45113d24f1373a50a13bc7be4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_in_edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a717294ebbae2d29e9f97633407dae4ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges &amp;</type>
      <name>edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a4ffd990052c812242cbdeeae7b0e1104</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges &amp;</type>
      <name>in_edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a001915a0fd7a6d4b06886f7865fc5189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>ae37c75fd607395376ade1cda5294e2a4</anchor>
      <arglist>(Edges edges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_edge</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a22e722e5bcd49dcfa643304d631416dc</anchor>
      <arglist>(Edge edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_in_edge</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a092b914639364b7b9168c84e3e556cea</anchor>
      <arglist>(Edge edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classScarab_1_1Graph_1_1Graphnode.html</anchorfile>
      <anchor>a7ec0926462b47496b1158f16b87e69ca</anchor>
      <arglist>(string lab)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::Graph::Graph</name>
    <filename>classScarab_1_1Graph_1_1Graph.html</filename>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>classScarab_1_1Graph_1_1Graph.html</anchorfile>
      <anchor>ac753f9750341458516e06fb1437a1258</anchor>
      <arglist>(const Nodes &amp;nodes, const Edges &amp;edges)</arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graph.html</anchorfile>
      <anchor>afdfbdd8e5427a646707ceb22ca15d2e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_nodes</name>
      <anchorfile>classScarab_1_1Graph_1_1Graph.html</anchorfile>
      <anchor>ac35877b52ec1f625ff452a4073026b26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>classScarab_1_1Graph_1_1Graph.html</anchorfile>
      <anchor>a8d0c6189ef1569626348a30e908870e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges &amp;</type>
      <name>edges</name>
      <anchorfile>classScarab_1_1Graph_1_1Graph.html</anchorfile>
      <anchor>a19a63be838e64b57e46cba029e273162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Graphnode &amp;</type>
      <name>node</name>
      <anchorfile>classScarab_1_1Graph_1_1Graph.html</anchorfile>
      <anchor>af226b4907b00e178a8f7bd6e972e42d2</anchor>
      <arglist>(uint i) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::Location</name>
    <filename>structScarab_1_1HG_1_1Location.html</filename>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>structScarab_1_1HG_1_1Location.html</anchorfile>
      <anchor>a66e686eed3a0038886fd24171ec0ae8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>loc</type>
      <name>location</name>
      <anchorfile>structScarab_1_1HG_1_1Location.html</anchorfile>
      <anchor>a493249f5c4c2ad6870d1cf1f9dd3f5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>node_id</name>
      <anchorfile>structScarab_1_1HG_1_1Location.html</anchorfile>
      <anchor>a9a11d2d02ffd88048526a28c7619a3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>edge_id</name>
      <anchorfile>structScarab_1_1HG_1_1Location.html</anchorfile>
      <anchor>a618dd1682636ccc635ced4dc536be305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>edge_pos</name>
      <anchorfile>structScarab_1_1HG_1_1Location.html</anchorfile>
      <anchor>a9e3f8708a3b6c0271a7a854bc6dbde79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::Heuristic</name>
    <filename>classScarab_1_1HG_1_1Heuristic.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>has_value</name>
      <anchorfile>classScarab_1_1HG_1_1Heuristic.html</anchorfile>
      <anchor>afad5a99d38b6783521e4c670d3edcf0a</anchor>
      <arglist>(const Location &amp;loc, const Hypothesis &amp;hyp) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_value</name>
      <anchorfile>classScarab_1_1HG_1_1Heuristic.html</anchorfile>
      <anchor>aca6b5924257b35be9e65058062fdc0d5</anchor>
      <arglist>(const Location &amp;loc, const Hypothesis &amp;hyp) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::QueueHyp</name>
    <filename>structScarab_1_1HG_1_1QueueHyp.html</filename>
    <member kind="function">
      <type></type>
      <name>QueueHyp</name>
      <anchorfile>structScarab_1_1HG_1_1QueueHyp.html</anchorfile>
      <anchor>a165e60736b23d97bec8cdaff7c742db7</anchor>
      <arglist>(Hypothesis *hyp, double score_in, Location *w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structScarab_1_1HG_1_1QueueHyp.html</anchorfile>
      <anchor>aa02f7835d0dd0d00cc5f00ff7430ddf3</anchor>
      <arglist>(const QueueHyp &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Hypothesis *</type>
      <name>h</name>
      <anchorfile>structScarab_1_1HG_1_1QueueHyp.html</anchorfile>
      <anchor>ae3368ba62dae4842a83766b44bcda346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>score</name>
      <anchorfile>structScarab_1_1HG_1_1QueueHyp.html</anchorfile>
      <anchor>ab4c4483fa92ecb415def41f5ed366e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Location *</type>
      <name>where</name>
      <anchorfile>structScarab_1_1HG_1_1QueueHyp.html</anchorfile>
      <anchor>ae151535de5fa3bb2cfe44dade082c613</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::AStar</name>
    <filename>classScarab_1_1HG_1_1AStar.html</filename>
    <member kind="function">
      <type></type>
      <name>AStar</name>
      <anchorfile>classScarab_1_1HG_1_1AStar.html</anchorfile>
      <anchor>add1bfbed92beae4cd239af9a150b060b</anchor>
      <arglist>(const HGraph &amp;f, const Controller &amp;cont, const Cache&lt; Hyperedge, double &gt; &amp;edge_weights, const Heuristic &amp;heu)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_path</name>
      <anchorfile>classScarab_1_1HG_1_1AStar.html</anchorfile>
      <anchor>a8079591e07aa9c4a5e4e14a5b1acb18b</anchor>
      <arglist>(NodeBackCache &amp;back_pointers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::BestHyp</name>
    <filename>classScarab_1_1HG_1_1BestHyp.html</filename>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>a8ebb56ed4cd363e793bc13936551a58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>a3c032ac35ce142d64fdad17b8950b493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Hypothesis &amp;</type>
      <name>get_hyp</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>a33ebfb0c6fc093b02e8d2e33082fd8a9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>afd75d0946faf6a48d113d815c1f86bce</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score_by_id</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>a60998ae47c3087d809d0ab1be0d2c21a</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>const Hypothesis &amp;</type>
      <name>get_hyp_by_id</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>ad68702666a75575acffd113f9038e92a</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_id</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>acdb194cd10fe47e64ac7c96de296cb4e</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>vector&lt; int &gt;</type>
      <name>join</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>adb8421adc7af8cb8b4f5116599e807fd</anchor>
      <arglist>(const Hypothesis &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>vector&lt; int &gt;</type>
      <name>join_back</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>ac9e2d1fc7e0d88865fa18d25877d63b8</anchor>
      <arglist>(const Hypothesis &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_set_hyp</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>ac079b15bdd5c65ede04d4e99eb683ff8</anchor>
      <arglist>(Hypothesis *hyp, double score)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Hypothesis * &gt;</type>
      <name>hyps</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>ab293f04d4d58e1503066c0d7b4e4013b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; double &gt;</type>
      <name>scores</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>a63d4d0feac5cff2ce7e00bdd15feb738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>has_new</name>
      <anchorfile>classScarab_1_1HG_1_1BestHyp.html</anchorfile>
      <anchor>abf49848ebb40edc6cd7c30af8139f389</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::ExtendCKY</name>
    <filename>classScarab_1_1HG_1_1ExtendCKY.html</filename>
    <member kind="function">
      <type></type>
      <name>ExtendCKY</name>
      <anchorfile>classScarab_1_1HG_1_1ExtendCKY.html</anchorfile>
      <anchor>a393c61229e019cb875ba6b7b6b176aff</anchor>
      <arglist>(const HGraph &amp;forest, const Cache&lt; Hyperedge, double &gt; &amp;edge_weights, const Controller &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_path</name>
      <anchorfile>classScarab_1_1HG_1_1ExtendCKY.html</anchorfile>
      <anchor>ae72fa6e6e0bb69464c575bd5225b1423</anchor>
      <arglist>(NodeBackCache &amp;back_pointers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outside</name>
      <anchorfile>classScarab_1_1HG_1_1ExtendCKY.html</anchorfile>
      <anchor>a038f64197127bc278e6a25c4565c72bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Hypernode, BestHyp &gt;</type>
      <name>_outside_memo_table</name>
      <anchorfile>classScarab_1_1HG_1_1ExtendCKY.html</anchorfile>
      <anchor>a008898035d6c06258e25a502fbfd7377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Hyperedge, vector&lt; BestHyp &gt; &gt;</type>
      <name>_outside_edge_memo_table</name>
      <anchorfile>classScarab_1_1HG_1_1ExtendCKY.html</anchorfile>
      <anchor>a554aa074d56b38acb561fda8584b9b8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::Hyperedge</name>
    <filename>classScarab_1_1HG_1_1Hyperedge.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>id</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>af824beb7107253a7545b35992c17e057</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>label</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>a8442c017fcee87c1f865b2254b49900f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hypernode &amp;</type>
      <name>tail_node</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>a9ec8cf9ea7b5f762f359a6f9f1c038da</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>num_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>a799d8d98242c129d7eee178bdf1fb535</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const svector&lt; int, double &gt; &amp;</type>
      <name>fvector</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>a0d201ddb955631aadee4c15cc8e709f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hypernode &amp;</type>
      <name>head_node</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>a6043de341070c103d811f5286193dd46</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector&lt; Hypernode * &gt; &amp;</type>
      <name>tail_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1Hyperedge.html</anchorfile>
      <anchor>abac6d27691186608aa12949de6e1c283</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::Hypernode</name>
    <filename>classScarab_1_1HG_1_1Hypernode.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Hypernode</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>a0657cc96f62d29da3ae4b5b9bcab1ce6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>id</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>a0aeaee6c2ca2a011fcd086f803aaa4d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>num_edges</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>add2f4d556be223b906bfbab9f1b60870</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>num_in_edges</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>a4b1a4ffaa8a8b0295763673e6d86d693</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hyperedge &amp;</type>
      <name>edge</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>a3bface6832eb54a00d90e4fe8d1999f7</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hyperedge &amp;</type>
      <name>in_edge</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>a533d3e0bc2269ec07edbda32305daf70</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_terminal</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>ae3e1107309a8817d1015bd70a90c1c49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector&lt; Hyperedge * &gt; &amp;</type>
      <name>edges</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>a3306572ded5b5061c1916bcf268be94e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector&lt; Hyperedge * &gt; &amp;</type>
      <name>in_edges</name>
      <anchorfile>classScarab_1_1HG_1_1Hypernode.html</anchorfile>
      <anchor>aad118748408663b8242dc52d45bbd49d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::HGraph</name>
    <filename>classScarab_1_1HG_1_1HGraph.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>ab5aa11c932b28864b56f28e0babbc1c1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hypernode &amp;</type>
      <name>root</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>a5ede392b158e41dd7e95ded1c4b0b5d6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>num_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>a8309003db80be5bdbe4bb64f98a78ea8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>num_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>a6f4d37ef034cb38aa09c702b80a6e4f7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hypernode &amp;</type>
      <name>get_node</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>acad57dd952956b1a1a4367bba0e9383b</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Hyperedge &amp;</type>
      <name>get_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>aa599b296ae01affc9606f519e4e44e9e</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector&lt; Hypernode * &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>a74d893fba015520774f71f02a46bb6ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const vector&lt; Hyperedge * &gt; &amp;</type>
      <name>edges</name>
      <anchorfile>classScarab_1_1HG_1_1HGraph.html</anchorfile>
      <anchor>a57328729f90cc4152ca79ff15ecdd4bb</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::HypergraphPrune</name>
    <filename>structScarab_1_1HG_1_1HypergraphPrune.html</filename>
    <member kind="function">
      <type></type>
      <name>HypergraphPrune</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphPrune.html</anchorfile>
      <anchor>adc29528f39ad9ced03be8b48341c3e84</anchor>
      <arglist>(const HGraph &amp;hgraph_)</arglist>
    </member>
    <member kind="variable">
      <type>set&lt; int &gt;</type>
      <name>nodes</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphPrune.html</anchorfile>
      <anchor>a1ff0fd7b723f888db33ae542d186d0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set&lt; int &gt;</type>
      <name>edges</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphPrune.html</anchorfile>
      <anchor>adff9a55407cd2cff9199d440ef513029</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const HGraph &amp;</type>
      <name>hgraph</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphPrune.html</anchorfile>
      <anchor>a55f12db438013ace2d307efb284bcb7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::HypergraphAlgorithms</name>
    <filename>classScarab_1_1HG_1_1HypergraphAlgorithms.html</filename>
    <member kind="function">
      <type></type>
      <name>HypergraphAlgorithms</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>a71e2da9111a9a484e5ef370991fdb6aa</anchor>
      <arglist>(const HGraph &amp;hypergraph)</arglist>
    </member>
    <member kind="function">
      <type>EdgeCache *</type>
      <name>cache_edge_weights</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>a28f83d7616f6153ca7c909fe82c5b0fa</anchor>
      <arglist>(const svector&lt; int, double &gt; &amp;weight_vector) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeCache *</type>
      <name>combine_edge_weights</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>ae815dc19968e9ab557d19dd2563fca38</anchor>
      <arglist>(const EdgeCache &amp;w1, const EdgeCache &amp;w2) const </arglist>
    </member>
    <member kind="function">
      <type>HNodes</type>
      <name>construct_best_fringe</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>af5bcb325e1d58dd9d4c26517c4dfeca0</anchor>
      <arglist>(const NodeBackCache &amp;back_memo_table) const </arglist>
    </member>
    <member kind="function">
      <type>HEdges</type>
      <name>construct_best_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>ab054762a5d6a0af7ee667c8e90585668</anchor>
      <arglist>(const NodeBackCache &amp;back_memo_table) const </arglist>
    </member>
    <member kind="function">
      <type>HNodes</type>
      <name>construct_best_node_order</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>acf3eea6f89752404f12c0a3dd45d397d</anchor>
      <arglist>(const NodeBackCache &amp;back_memo_table) const </arglist>
    </member>
    <member kind="function">
      <type>wvector</type>
      <name>construct_best_feature_vector</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>a4ff84fd293173b5cee2f902a3509a5c2</anchor>
      <arglist>(const NodeBackCache &amp;back_memo_table) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_path</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>aa9a28bf42d17a166ec5e780067e33259</anchor>
      <arglist>(const EdgeCache &amp;edge_weights, NodeCache &amp;score_memo_table, NodeBackCache &amp;back_memo_table) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>best_outside_path</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>a8eea2c8f3cd86a08962b46d1a4c57a20</anchor>
      <arglist>(const EdgeCache &amp;edge_weights, const NodeCache &amp;score_memo_table, NodeCache &amp;outside_score_table) const </arglist>
    </member>
    <member kind="function">
      <type>HNodes</type>
      <name>topological_sort</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>afeb33bac104955747948b3d4a885cdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HypergraphPrune</type>
      <name>pretty_good_pruning</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphAlgorithms.html</anchorfile>
      <anchor>a3b26656f35480c12e79f4040dce7bae1</anchor>
      <arglist>(const EdgeCache &amp;edge_weights, const NodeCache &amp;score_memo_table, const NodeCache &amp;outside_memo_table, double cutoff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::HyperedgeImpl</name>
    <filename>classScarab_1_1HG_1_1HyperedgeImpl.html</filename>
    <base>Scarab::HG::Hyperedge</base>
    <member kind="function">
      <type></type>
      <name>HyperedgeImpl</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a3c141efe1be2e8ee78d45caca4711c6e</anchor>
      <arglist>(const string &amp;label, str_vector *features, int id, vector&lt; Hypernode * &gt; tail_nodes, Hypernode *head_node)</arglist>
    </member>
    <member kind="function">
      <type>const Hypernode &amp;</type>
      <name>tail_node</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a7087ba121f3056eb5946d1909c4b3d58</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a9a5bef8789c9c7caee6f53833ea4acc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const wvector &amp;</type>
      <name>fvector</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a359446c285164a93995bb87e6ea74882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Scarab::HG::Hypernode &amp;</type>
      <name>head_node</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>ae194bfc8ecac2a12791fa36c1c2c62a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Scarab::HG::Hypernode * &gt; &amp;</type>
      <name>tail_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a3bf00c8c032397150f59e196aea5e245</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>id</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>afa81943347267781c25c4e68f7f5f547</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>label</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a8fe687c9914de37c4d91c353ba669665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reid</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a068e4291cbcaa68a59ad64ede34f9edc</anchor>
      <arglist>(int new_id)</arglist>
    </member>
    <member kind="variable">
      <type>const string</type>
      <name>_label</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>ab14180934c56806b0004bcbdac9eef88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Hypernode * &gt;</type>
      <name>_tail_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a70fab435c66aab79825aab6b9058cda5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hypernode *</type>
      <name>_head_node</name>
      <anchorfile>classScarab_1_1HG_1_1HyperedgeImpl.html</anchorfile>
      <anchor>a92aeb9593a64be769f18666c3bfd0a20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::HypernodeImpl</name>
    <filename>classScarab_1_1HG_1_1HypernodeImpl.html</filename>
    <base>Scarab::HG::Hypernode</base>
    <member kind="function">
      <type></type>
      <name>HypernodeImpl</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a574c6f1386fb27894075977ef1ca56d6</anchor>
      <arglist>(const string &amp;label, int id, wvector *features)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a0899a4e97f535c2f005d7c5ab5364681</anchor>
      <arglist>(Hyperedge *edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_in_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>ab05500702d5fa1c896efe941f9c54bf3</anchor>
      <arglist>(Hyperedge *edge)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_terminal</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a2bb4b33ff207c3c1babe135b9af6323e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a6675d677bd7e794ae9a8bf72645b828a</anchor>
      <arglist>(const set&lt; int &gt; &amp;keep_edges)</arglist>
    </member>
    <member kind="function">
      <type>const Hyperedge &amp;</type>
      <name>edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a328189f28a4185d435035686a27592c2</anchor>
      <arglist>(uint i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>num_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a7fed4809706319cc916ed4c04a641436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>num_in_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a9a13a37fcece16603ec4bf3f364e6fcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Hyperedge &amp;</type>
      <name>in_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a26ff9db30c03c7b74181e9f901aa71d4</anchor>
      <arglist>(uint i) const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>id</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a2579ef1e67ad8f51d23838c130440d21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Hyperedge * &gt; &amp;</type>
      <name>edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>ada979dcddc1bf0abf0fc2530d1ea8761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Hyperedge * &gt; &amp;</type>
      <name>in_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a77fe0de2e3927be6145cb8fc018088c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reid</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>a9b0df10dfd6c20c094a928f1ced76f90</anchor>
      <arglist>(int new_id)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; Hyperedge * &gt;</type>
      <name>_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>aaa189784dcf714f3c1ca54ea8cd0dc83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const string &amp;</type>
      <name>_label</name>
      <anchorfile>classScarab_1_1HG_1_1HypernodeImpl.html</anchorfile>
      <anchor>aefb3b14843d6fb8ed2284ae0d6a53dbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::HypergraphImpl</name>
    <filename>classScarab_1_1HG_1_1HypergraphImpl.html</filename>
    <base>Scarab::HG::HGraph</base>
    <member kind="function">
      <type></type>
      <name>HypergraphImpl</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a935bed9b8cf9235a1adb61d0889f6ac7</anchor>
      <arglist>(vector&lt; Hypernode * &gt; nodes, vector&lt; Hyperedge * &gt; edges, Hypernode *root)</arglist>
    </member>
    <member kind="function">
      <type>const Hypernode &amp;</type>
      <name>root</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a31172009b97d179f6b1199f191197a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>num_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a0adcc8783b94cbe07b092220082d00ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint</type>
      <name>num_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>ad39e917a84acb1d4caf0145ce8a903a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Hypernode &amp;</type>
      <name>get_node</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a9276a6faa074eb4f3bbb2f8b8d5d4fbf</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const Hyperedge &amp;</type>
      <name>get_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a31a148139b888b6bd10e78fe555144c7</anchor>
      <arglist>(uint i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_from_file</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a1f33418f90b826db9cfc0bb34e1ca9cf</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Hypernode * &gt; &amp;</type>
      <name>nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a9aef2881b489c86d4d83e996a70f8141</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector&lt; Hyperedge * &gt; &amp;</type>
      <name>edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a0c8373e545fe59b0cb7036b4751508e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a98701d5529aaf3e5d4fa386694843f20</anchor>
      <arglist>(const HypergraphPrune &amp;prune)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_to_file</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>af8f5ed38a355676c473e8d54b5552cc6</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Hypernode *</type>
      <name>make_node</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>af14198ba5fccb5d4118188fa42feb8ff</anchor>
      <arglist>(const Hypergraph_Node &amp;node, wvector *features)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>make_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a238a7ce3b578c8126eccbc7803570638</anchor>
      <arglist>(const Hypergraph_Edge &amp;edge, const Hyperedge *our_edge)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>convert_edge</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a30349aca0e3b8f8dc72ed74d78e8c5b8</anchor>
      <arglist>(const Hyperedge *our_edge, Hypergraph_Edge *edge)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>convert_node</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a93e9e250fa457a2171bf07241b7829eb</anchor>
      <arglist>(const Hypernode *our_node, Hypergraph_Node *node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>set_up</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>ae91de73e633e450b01664e3ec964019c</anchor>
      <arglist>(const Hypergraph &amp;hgraph)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Hypergraph *</type>
      <name>hgraph</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>aa7192cf8f168e5bfed67a8faf85c8cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Hypernode *</type>
      <name>_root</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a7035fdae4c04d0752aaaf1e7eba7600e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Hypernode * &gt;</type>
      <name>_nodes</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a4cc57d9255e2f09714c5913d67cd0554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector&lt; Hyperedge * &gt;</type>
      <name>_edges</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphImpl.html</anchorfile>
      <anchor>a56fb710140f3359646b1a17cb0417d74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::State</name>
    <filename>structScarab_1_1HG_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>a61592030e999341da1e674274db11307</anchor>
      <arglist>(const vector&lt; int &gt; &amp;ids, uint dim)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>project</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>a6597ae0951c6d0c9146ae6bd5b91b52f</anchor>
      <arglist>(int split, int down_to) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>ac7f5641edb1dd813dcac3b76be28d305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>a17d205eca9f3be9c01c7d41e3fe4d809</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compatible</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>acd8ef3e5bd73ec5034de0d70f2bb2492</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>abadb936b551a91d952af74b3bfc7d43d</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>possible_states</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>afc65eeacc345b5396a673e4328cccc11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>_state</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>a1c516b546a5e3de3a5f9bb8f39a3cf20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint</type>
      <name>_dim</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>ae3d755b161845bd295deae4096d4c9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structScarab_1_1HG_1_1State.html</anchorfile>
      <anchor>a353ffb342165fcaec0e812d0288fc329</anchor>
      <arglist>(ostream &amp;output, const State &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::Hypothesis</name>
    <filename>structScarab_1_1HG_1_1Hypothesis.html</filename>
    <member kind="function">
      <type></type>
      <name>Hypothesis</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>aca7357ce485cb960fadb2cc62f1a888a</anchor>
      <arglist>(const State &amp;left_hook, const State &amp;right, HEdge back_pointer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hypothesis</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a0d71b86d0d7d3294e61671efed2722bf</anchor>
      <arglist>(const State &amp;left_hook, const State &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hypothesis</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a974fd973dd0c8a380f342bbd10013d6f</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a698008183fc3863a0c03ba0c3e5960d1</anchor>
      <arglist>(const Hypothesis &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a5a69f417c889d4d96ad5a78aa1dd2f7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>left</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>ac428cffa80bad102222f58463bfba7e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>right</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a6c026d211fd4f4875216fc179a78e879</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a70597628ead54cb83fcda7422d6d2f1f</anchor>
      <arglist>(const Hypothesis &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>hook</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a53277642394df6145ea8bfc6a3e3996e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>right_side</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>aff1779905d4f7e9a21b71a20cec4f02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Hyperedge *</type>
      <name>back_edge</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>aa31a2d052ecaffa034d8447de748946f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_done</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a38b1068d18fe3ce28d6c93e5d12b2225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>prev_hyp</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a93bf33767cecd362e8a12d385c94be1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>original_value</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a95df46740f1263062f4898db1b39cd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structScarab_1_1HG_1_1Hypothesis.html</anchorfile>
      <anchor>a70fdb92646880290a9c906e5018c11bb</anchor>
      <arglist>(ostream &amp;output, const Hypothesis &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::Controller</name>
    <filename>classScarab_1_1HG_1_1Controller.html</filename>
    <member kind="function">
      <type>double</type>
      <name>combine</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>a34cfe4b8e7496ffca1cedf64cb3f0a73</anchor>
      <arglist>(const Hypothesis &amp;a, const Hypothesis &amp;b, Hypothesis &amp;ret) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>combine_back</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>a4b596f04765ad11b691e29383f5fbc3b</anchor>
      <arglist>(const Hypothesis &amp;a, const Hypothesis &amp;b, Hypothesis &amp;ret) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize_hypotheses</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>a5019e9591e6d4e5e29eb4ca6ac42d056</anchor>
      <arglist>(const Hypernode &amp;node, vector&lt; Hypothesis * &gt; &amp;initialize, vector&lt; double &gt; &amp;scores) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize_out_root</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>a34e4f087d77d06ee27fff2d3a8435473</anchor>
      <arglist>(vector&lt; Hypothesis * &gt; &amp;hyps, vector&lt; double &gt; &amp;scores) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>find_best</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>ac4a38bf968379d3dc3f2b95cffabf540</anchor>
      <arglist>(vector&lt; Hypothesis * &gt; &amp;at_root, vector&lt; double &gt; &amp;scores, Hypothesis &amp;best_hyp) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>a3498a09d093e6c6ed993e309db51480a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>dim</name>
      <anchorfile>classScarab_1_1HG_1_1Controller.html</anchorfile>
      <anchor>ab4282178c6b8d3670134ab0519eda518</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::DepParserLP</name>
    <filename>structScarab_1_1HG_1_1DepParserLP.html</filename>
    <member kind="function">
      <type></type>
      <name>DepParserLP</name>
      <anchorfile>structScarab_1_1HG_1_1DepParserLP.html</anchorfile>
      <anchor>aaec1248e50de35594c4a20e89a782e95</anchor>
      <arglist>(const DepParser &amp;parser, const HypergraphLP &amp;hyper_lp)</arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Dependency, GRBVar &gt;</type>
      <name>dep_vars</name>
      <anchorfile>structScarab_1_1HG_1_1DepParserLP.html</anchorfile>
      <anchor>af31e9d91e3407559cd2588bfef2296e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DepParser &amp;</type>
      <name>p</name>
      <anchorfile>structScarab_1_1HG_1_1DepParserLP.html</anchorfile>
      <anchor>a93d0f269dabdd6fe83c68ee51baafb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const HypergraphLP &amp;</type>
      <name>h_lp</name>
      <anchorfile>structScarab_1_1HG_1_1DepParserLP.html</anchorfile>
      <anchor>acab7463a0d1349c5a1250ac0653c0569</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::DepParserLPBuilder</name>
    <filename>classScarab_1_1HG_1_1DepParserLPBuilder.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>show_results</name>
      <anchorfile>classScarab_1_1HG_1_1DepParserLPBuilder.html</anchorfile>
      <anchor>a8864b215a93fa51c4df30669dacb0ddc</anchor>
      <arglist>(const DepParserLP &amp;lp_vars)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DepParserLP *</type>
      <name>add_parse</name>
      <anchorfile>classScarab_1_1HG_1_1DepParserLPBuilder.html</anchorfile>
      <anchor>a862127f9347f244103941a119747b810</anchor>
      <arglist>(const DepParser &amp;parser, const Cache&lt; Hyperedge, double &gt; &amp;weights, string prefix, GRBModel &amp;model, int var_type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::HypergraphLP</name>
    <filename>structScarab_1_1HG_1_1HypergraphLP.html</filename>
    <member kind="function">
      <type></type>
      <name>HypergraphLP</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphLP.html</anchorfile>
      <anchor>a332edf79e5fc5b617ec6e948a73cc4a4</anchor>
      <arglist>(const HGraph &amp;h)</arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Hypernode, GRBVar &gt;</type>
      <name>node_vars</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphLP.html</anchorfile>
      <anchor>ae9c9c441b112e98e412e8129e91a28ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Hyperedge, GRBVar &gt;</type>
      <name>edge_vars</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphLP.html</anchorfile>
      <anchor>a8e71b062f3d6691eef27bb85c718604f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const HGraph &amp;</type>
      <name>_h</name>
      <anchorfile>structScarab_1_1HG_1_1HypergraphLP.html</anchorfile>
      <anchor>a52fa717afa9c902f7d8ef3adf18c5204</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::HypergraphLPBuilder</name>
    <filename>classScarab_1_1HG_1_1HypergraphLPBuilder.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>show_hypergraph</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphLPBuilder.html</anchorfile>
      <anchor>a7653a6f997f1505c0d6668618b28d6d8</anchor>
      <arglist>(const HypergraphLP &amp;h_lp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HypergraphLP *</type>
      <name>add_hypergraph</name>
      <anchorfile>classScarab_1_1HG_1_1HypergraphLPBuilder.html</anchorfile>
      <anchor>a3a711a79152e0f5d4cc9157737673b95</anchor>
      <arglist>(const HGraph &amp;h, const Cache&lt; Hyperedge, double &gt; &amp;_weights, string prefix, GRBModel &amp;model, int var_type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::LatticeVars</name>
    <filename>structScarab_1_1HG_1_1LatticeVars.html</filename>
    <member kind="function">
      <type></type>
      <name>LatticeVars</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>a22dc8ef683d47635b8e55adf3520a811</anchor>
      <arglist>(string n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_all_pairs</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>a2b1a31d5b8d9673c7c473f28c2e02db9</anchor>
      <arglist>(const GraphDecompose &amp;gd, const ForestLattice &amp;_lattice, GRBModel *model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_all_pairs_constraints</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>a769802ee94dab4d0c8a7956fb861efac</anchor>
      <arglist>(const GraphDecompose &amp;gd, const ForestLattice &amp;_lattice, GRBModel *model)</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt;</type>
      <name>all_pairs_vars</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>a68c89197d9177fd5550b558358e5ac0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; GRBVar &gt; &gt;</type>
      <name>all_pairs_exist_vars</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>a2f4713dd2316790958cdca48bb6a73d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; vector&lt; vector&lt; bool &gt; &gt; &gt;</type>
      <name>has_all_pairs_var</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>ad6cc2ab5e0d3322d35738ddb0e9af503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>name</name>
      <anchorfile>structScarab_1_1HG_1_1LatticeVars.html</anchorfile>
      <anchor>a163eea64436f95f4282590c141f52b1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::LPBuilder</name>
    <filename>classScarab_1_1HG_1_1LPBuilder.html</filename>
    <member kind="function">
      <type></type>
      <name>LPBuilder</name>
      <anchorfile>classScarab_1_1HG_1_1LPBuilder.html</anchorfile>
      <anchor>aba798e4d3faf87e8411607f9d974fc7f</anchor>
      <arglist>(const HGraph &amp;forest, const ForestLattice &amp;lat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_hypergraph</name>
      <anchorfile>classScarab_1_1HG_1_1LPBuilder.html</anchorfile>
      <anchor>abfa755f4c94dc432c022be35861a8200</anchor>
      <arglist>(const Cache&lt; Hyperedge, double &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve_full</name>
      <anchorfile>classScarab_1_1HG_1_1LPBuilder.html</anchorfile>
      <anchor>a963bdf9c956b4a08d52be06e1cb6a05a</anchor>
      <arglist>(int run_num, const Cache&lt; Hyperedge, double &gt; &amp;_weights, Ngram &amp;lm, const Cache&lt; Graphnode, int &gt; &amp;word_cache)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Scarab::HG::TagLP</name>
    <filename>structScarab_1_1HG_1_1TagLP.html</filename>
    <member kind="function">
      <type></type>
      <name>TagLP</name>
      <anchorfile>structScarab_1_1HG_1_1TagLP.html</anchorfile>
      <anchor>a529942132dc8900bd25d2acaef721694</anchor>
      <arglist>(const Tagger &amp;parser, const HypergraphLP &amp;hyper_lp)</arglist>
    </member>
    <member kind="variable">
      <type>Cache&lt; Tag, GRBVar &gt;</type>
      <name>tag_vars</name>
      <anchorfile>structScarab_1_1HG_1_1TagLP.html</anchorfile>
      <anchor>a4e80b783a5dfce94abb94cb957a3fe50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Tagger &amp;</type>
      <name>p</name>
      <anchorfile>structScarab_1_1HG_1_1TagLP.html</anchorfile>
      <anchor>a137ec6055ea83b552c873dd19f203c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const HypergraphLP &amp;</type>
      <name>h_lp</name>
      <anchorfile>structScarab_1_1HG_1_1TagLP.html</anchorfile>
      <anchor>a92b885535389aa44e450e8f4682bf543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Scarab::HG::TagLPBuilder</name>
    <filename>classScarab_1_1HG_1_1TagLPBuilder.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>show_results</name>
      <anchorfile>classScarab_1_1HG_1_1TagLPBuilder.html</anchorfile>
      <anchor>aa4990c224df5a1c82220a655ee51bd73</anchor>
      <arglist>(const TagLP &amp;lp_vars)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TagLP *</type>
      <name>add_tagging</name>
      <anchorfile>classScarab_1_1HG_1_1TagLPBuilder.html</anchorfile>
      <anchor>a9c0f3ee542cbbed34945b80932272cea</anchor>
      <arglist>(const Tagger &amp;parser, const Cache&lt; Hyperedge, double &gt; &amp;weights, string prefix, GRBModel &amp;model, int var_type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>unknown_words::WordCounter</name>
    <filename>classunknown__words_1_1WordCounter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>a41dc218ec5a07a5f7fecda5e0b31d185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>inc_sent</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>aacb3b61b21be83d6887ae446978605c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>is_unknown</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>a87960709afb170827f00a2250d71151d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>count</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>a191b122796650533fc7fea98304105ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>trim</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>ae6dfc99cc0251d11fbe879f79df3a4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>word_counts</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>a9ad006c82610f4c491f9ea61e7a626b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>unknown_thres</name>
      <anchorfile>classunknown__words_1_1WordCounter.html</anchorfile>
      <anchor>ad77405e25b249c82c1c0ee977a6887b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>third-party/mstparser/bin/</name>
    <path>/home/srush/Projects/relax_decode/third-party/mstparser/bin/</path>
    <filename>dir_f5e5307c9b62e2a79f2973cd8b44ff54.html</filename>
    <file>conll2mst.py</file>
    <file>create_baseline.py</file>
    <file>mst2conll.py</file>
    <file>mst_experiment.py</file>
    <file>pos_tag.py</file>
  </compound>
  <compound kind="dir">
    <name>third-party/CRFTagger/src/crf/</name>
    <path>/home/srush/Projects/relax_decode/third-party/CRFTagger/src/crf/</path>
    <filename>dir_67ed16fcfe8798aa593dbff83045563f.html</filename>
    <dir>third-party/CRFTagger/src/crf/tagger/</dir>
  </compound>
  <compound kind="dir">
    <name>third-party/CRFTagger/</name>
    <path>/home/srush/Projects/relax_decode/third-party/CRFTagger/</path>
    <filename>dir_edf5a52638cdabf027152147ba67b07d.html</filename>
    <dir>third-party/CRFTagger/src/</dir>
  </compound>
  <compound kind="dir">
    <name>data_management/</name>
    <path>/home/srush/Projects/relax_decode/data_management/</path>
    <filename>dir_9b15fdfae427a37ba62883943e28d2dd.html</filename>
    <dir>data_management/eval/</dir>
    <dir>data_management/format/</dir>
    <dir>data_management/map/</dir>
    <file>classify_word.py</file>
    <file>context.py</file>
    <file>convert_phrase_based.py</file>
    <file>convert_pos.py</file>
    <file>dump_unknown.py</file>
    <file>error_analysis.py</file>
    <file>pos_constraints.py</file>
    <file>pos_constraints_mrf.py</file>
    <file>remove_labels.py</file>
    <file>unknown_words.py</file>
  </compound>
  <compound kind="dir">
    <name>data_management/eval/</name>
    <path>/home/srush/Projects/relax_decode/data_management/eval/</path>
    <filename>dir_ce0da3ca01b97a20ecd162d94dd1832c.html</filename>
    <file>__init__.py</file>
    <file>dep_accuracy.py</file>
    <file>pos_accuracy.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/example/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/example/</path>
    <filename>dir_dc4183322417808bca0291edd9ebcf74.html</filename>
    <file>example_t2s_convertor.py</file>
    <file>example_t2s_lex_convertor.py</file>
    <file>protobuf_json.py</file>
  </compound>
  <compound kind="dir">
    <name>experiments/</name>
    <path>/home/srush/Projects/relax_decode/experiments/</path>
    <filename>dir_42d11b23217bee179ceacab16ff90546.html</filename>
    <file>data_sets.py</file>
    <file>error_analysis.py</file>
    <file>experiment.py</file>
    <file>formatting.py</file>
    <file>triple_diff.py</file>
  </compound>
  <compound kind="dir">
    <name>data_management/format/</name>
    <path>/home/srush/Projects/relax_decode/data_management/format/</path>
    <filename>dir_7997bb3805e3c1658068dee6397fd722.html</filename>
    <file>__init__.py</file>
    <file>conll.py</file>
    <file>conll_tag.py</file>
    <file>convert_to_conll_tag.py</file>
    <file>convert_to_simple.py</file>
    <file>convert_to_simple_tag.py</file>
    <file>rm_simple_pos.py</file>
    <file>simple.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/lattice/gen-cpp/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/lattice/gen-cpp/</path>
    <filename>dir_a2d3dac8eaaf6223fb25ebcfaf06c062.html</filename>
    <file>lattice.pb.cc</file>
    <file>lattice.pb.h</file>
    <file>lattice_pb2.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/gen-cpp/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/gen-cpp/</path>
    <filename>dir_ca63dbfecf6ed9629eeb6acf0c61f47b.html</filename>
    <file>dep.pb.cc</file>
    <file>dep.pb.h</file>
    <file>features.pb.cc</file>
    <file>features.pb.h</file>
    <file>hypergraph.pb.cc</file>
    <file>hypergraph.pb.h</file>
    <file>lexical.pb.cc</file>
    <file>lexical.pb.h</file>
    <file>tag.pb.cc</file>
    <file>tag.pb.h</file>
    <file>translation.pb.cc</file>
    <file>translation.pb.h</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/graph/gen-cpp/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/graph/gen-cpp/</path>
    <filename>dir_ead03c6dbee61fc726381533dcff4b7e.html</filename>
    <file>graph.pb.cc</file>
    <file>graph.pb.h</file>
    <file>mrf.pb.cc</file>
    <file>mrf.pb.h</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/lattice/gen-py/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/lattice/gen-py/</path>
    <filename>dir_29ebe50ec52ebedb406eb2b79470d800.html</filename>
    <file>lattice_pb2.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/gen-py/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/gen-py/</path>
    <filename>dir_2ac6d8ba134a4199f05441680860a7c4.html</filename>
    <file>dep_pb2.py</file>
    <file>features_pb2.py</file>
    <file>hypergraph_pb2.py</file>
    <file>lexical_pb2.py</file>
    <file>tag_pb2.py</file>
    <file>translation_pb2.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/graph/gen-py/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/graph/gen-py/</path>
    <filename>dir_5bbef276256539cc5c7650b5a1ba6bc0.html</filename>
    <file>graph.pb.cc</file>
    <file>graph.pb.h</file>
    <file>graph_pb2.py</file>
    <file>mrf.pb.cc</file>
    <file>mrf.pb.h</file>
    <file>mrf_pb2.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/gen_cpp/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/gen_cpp/</path>
    <filename>dir_26ef12adb9b64708d834048b6dcb777a.html</filename>
    <file>dep.pb.cc</file>
    <file>dep.pb.h</file>
    <file>features.pb.cc</file>
    <file>features.pb.h</file>
    <file>hypergraph.pb.cc</file>
    <file>hypergraph.pb.h</file>
    <file>lexical.pb.cc</file>
    <file>lexical.pb.h</file>
    <file>tag.pb.cc</file>
    <file>tag.pb.h</file>
    <file>translation.pb.cc</file>
    <file>translation.pb.h</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/gen_py/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/gen_py/</path>
    <filename>dir_88c3d3fa02ff050b7b142be0e3487678.html</filename>
    <file>dep_pb2.py</file>
    <file>features_pb2.py</file>
    <file>hypergraph_pb2.py</file>
    <file>lexical_pb2.py</file>
    <file>tag_pb2.py</file>
    <file>translation_pb2.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/graph/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/graph/</path>
    <filename>dir_9081cf938a4fe852fec591c0d98f767d.html</filename>
    <dir>interfaces/graph/gen-cpp/</dir>
    <dir>interfaces/graph/gen-py/</dir>
    <dir>interfaces/graph/util/</dir>
  </compound>
  <compound kind="dir">
    <name>graph/</name>
    <path>/home/srush/Projects/relax_decode/graph/</path>
    <filename>dir_9fa0853203c77621738e1a9d332558ef.html</filename>
    <file>Graph.cpp</file>
    <file>Graph.h</file>
    <file>GraphProtoInterface.cpp</file>
    <file>GraphProtoInterface.h</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/</path>
    <filename>dir_80978f1a4b02ebeb447d526795515ae9.html</filename>
    <dir>interfaces/hypergraph/example/</dir>
    <dir>interfaces/hypergraph/gen-cpp/</dir>
    <dir>interfaces/hypergraph/gen-py/</dir>
    <dir>interfaces/hypergraph/gen_cpp/</dir>
    <dir>interfaces/hypergraph/gen_py/</dir>
    <dir>interfaces/hypergraph/util/</dir>
  </compound>
  <compound kind="dir">
    <name>hypergraph/</name>
    <path>/home/srush/Projects/relax_decode/hypergraph/</path>
    <filename>dir_0842ed619f530816314d052ceb837f9f.html</filename>
    <file>AStar.cpp</file>
    <file>AStar.h</file>
    <file>BestHyp.cpp</file>
    <file>BestHyp.h</file>
    <file>ConvertFromFile.cpp</file>
    <file>CubePruning.cpp</file>
    <file>CubePruning.h</file>
    <file>EdgeCache.cpp</file>
    <file>EdgeCache.h</file>
    <file>ExtendCKY.cpp</file>
    <file>ExtendCKY.h</file>
    <file>Hypergraph.cpp</file>
    <file>Hypergraph.h</file>
    <file>HypergraphAlgorithms.cpp</file>
    <file>HypergraphAlgorithms.h</file>
    <file>HypergraphImpl.cpp</file>
    <file>HypergraphImpl.h</file>
    <file>HypergraphTools.h</file>
    <file>Hypothesis.cpp</file>
    <file>Hypothesis.h</file>
    <file>svector.cpp</file>
    <file>svector.hpp</file>
    <file>Test.cpp</file>
    <file>Weights.cpp</file>
    <file>Weights.h</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/</path>
    <filename>dir_82070cd2fb346ee8454431134031cacd.html</filename>
    <dir>interfaces/graph/</dir>
    <dir>interfaces/hypergraph/</dir>
    <dir>interfaces/lattice/</dir>
  </compound>
  <compound kind="dir">
    <name>third-party/mstparser/mstparser/io/</name>
    <path>/home/srush/Projects/relax_decode/third-party/mstparser/mstparser/io/</path>
    <filename>dir_79cf93aae09eafb15e66fc1cd0afae62.html</filename>
    <file>CONLLReader.java</file>
    <file>CONLLWriter.java</file>
    <file>DependencyReader.java</file>
    <file>DependencyWriter.java</file>
    <file>MSTReader.java</file>
    <file>MSTWriter.java</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/lattice/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/lattice/</path>
    <filename>dir_c7a3907ebbc0f647251f9b524b7ded84.html</filename>
    <dir>interfaces/lattice/gen-cpp/</dir>
    <dir>interfaces/lattice/gen-py/</dir>
    <dir>interfaces/lattice/util/</dir>
  </compound>
  <compound kind="dir">
    <name>lattice/</name>
    <path>/home/srush/Projects/relax_decode/lattice/</path>
    <filename>dir_edaed3a5c93eac9aa72d75a14f405ec1.html</filename>
    <file>BigramRescore.cpp</file>
    <file>BigramRescore.h</file>
    <file>Common.h</file>
    <file>ForestLattice.cpp</file>
    <file>ForestLattice.h</file>
    <file>GraphDecompose.cpp</file>
    <file>GraphDecompose.h</file>
    <file>lattice_pb2.py</file>
    <file>Test.cpp</file>
  </compound>
  <compound kind="dir">
    <name>lp/</name>
    <path>/home/srush/Projects/relax_decode/lp/</path>
    <filename>dir_8d27b9979ee8327b58fb6b0e913b28e7.html</filename>
    <file>DepParseLP.cpp</file>
    <file>DepParseLP.h</file>
    <file>HardConstraints.h</file>
    <file>HardPosConstraints.h</file>
    <file>HypergraphLP.h</file>
    <file>LPBuilder.cpp</file>
    <file>LPBuilder.h</file>
    <file>MRFLP.cpp</file>
    <file>MRFLP.h</file>
    <file>PottsModelLP.h</file>
    <file>TagLP.cpp</file>
    <file>TagLP.h</file>
    <file>TagMrfLP.h</file>
  </compound>
  <compound kind="dir">
    <name>data_management/map/</name>
    <path>/home/srush/Projects/relax_decode/data_management/map/</path>
    <filename>dir_93d402c6ba90624cb74111e226a341a9.html</filename>
    <file>unmap_pos.py</file>
  </compound>
  <compound kind="dir">
    <name>third-party/mstparser/mstparser/</name>
    <path>/home/srush/Projects/relax_decode/third-party/mstparser/mstparser/</path>
    <filename>dir_fdb682672eea663aa15035bb236822ec.html</filename>
    <dir>third-party/mstparser/mstparser/io/</dir>
    <file>Alphabet.java</file>
    <file>DependencyDecoder.java</file>
    <file>DependencyDecoder2O.java</file>
    <file>DependencyEvaluator.java</file>
    <file>DependencyInstance.java</file>
    <file>DependencyParser.java</file>
    <file>DependencyPipe.java</file>
    <file>DependencyPipe2O.java</file>
    <file>Feature.java</file>
    <file>FeatureVector.java</file>
    <file>KBestParseForest.java</file>
    <file>KBestParseForest2O.java</file>
    <file>Parameters.java</file>
    <file>ParseForestItem.java</file>
    <file>ParserOptions.java</file>
    <file>RelationalFeature.java</file>
    <file>Util.java</file>
  </compound>
  <compound kind="dir">
    <name>third-party/mstparser/</name>
    <path>/home/srush/Projects/relax_decode/third-party/mstparser/</path>
    <filename>dir_c62d6a60c6f7677d094012192ad98913.html</filename>
    <dir>third-party/mstparser/bin/</dir>
    <dir>third-party/mstparser/mstparser/</dir>
  </compound>
  <compound kind="dir">
    <name>optimization/</name>
    <path>/home/srush/Projects/relax_decode/optimization/</path>
    <filename>dir_422102e92eab9af8781884626f8d6bf6.html</filename>
    <file>DualDecomposition.cpp</file>
    <file>DualDecomposition.h</file>
    <file>MRF.cpp</file>
    <file>MRF.h</file>
    <file>MRFHypergraph.cpp</file>
    <file>MRFHypergraph.h</file>
    <file>Subgradient.cpp</file>
    <file>Subgradient.h</file>
  </compound>
  <compound kind="dir">
    <name>parse/</name>
    <path>/home/srush/Projects/relax_decode/parse/</path>
    <filename>dir_ceab4fa94c1005d795369c1173c497e2.html</filename>
    <file>DepParser.cpp</file>
    <file>DepParser.h</file>
    <file>EisnerToHypergraph.cpp</file>
    <file>EisnerToHypergraph.h</file>
  </compound>
  <compound kind="dir">
    <name>phrasebased/</name>
    <path>/home/srush/Projects/relax_decode/phrasebased/</path>
    <filename>dir_3f193d131180abb5afbb308843e46578.html</filename>
    <file>PhraseBased.cpp</file>
    <file>PhraseBased.h</file>
  </compound>
  <compound kind="dir">
    <name>scripts/</name>
    <path>/home/srush/Projects/relax_decode/scripts/</path>
    <filename>dir_d15a7b88329e94e2678a58a42cf50002.html</filename>
    <file>acl_regression.py</file>
  </compound>
  <compound kind="dir">
    <name>third-party/CRFTagger/src/</name>
    <path>/home/srush/Projects/relax_decode/third-party/CRFTagger/src/</path>
    <filename>dir_933d4b67265e28b62aeb08c790df7dd7.html</filename>
    <dir>third-party/CRFTagger/src/crf/</dir>
  </compound>
  <compound kind="dir">
    <name>third-party/svector/</name>
    <path>/home/srush/Projects/relax_decode/third-party/svector/</path>
    <filename>dir_8d5a5a37b9719a927752d4dd42b29772.html</filename>
    <file>cy_svector.hpp</file>
    <file>numberizer.hpp</file>
    <file>setup.py</file>
    <file>svector-example.py</file>
    <file>svector.cpp</file>
    <file>svector.hpp</file>
  </compound>
  <compound kind="dir">
    <name>third-party/CRFTagger/src/crf/tagger/</name>
    <path>/home/srush/Projects/relax_decode/third-party/CRFTagger/src/crf/tagger/</path>
    <filename>dir_1baa1a48a5cb87d7f59ee01d2fa53e5c.html</filename>
    <file>CountFeatureIdx.java</file>
    <file>CRFTagger.java</file>
    <file>Dictionary.java</file>
    <file>DoubleMatrix.java</file>
    <file>DoubleVector.java</file>
    <file>Element.java</file>
    <file>Feature.java</file>
    <file>FeatureGen.java</file>
    <file>Maps.java</file>
    <file>Mathlib.java</file>
    <file>Model.java</file>
    <file>Observation.java</file>
    <file>Option.java</file>
    <file>PennTokenizer.java</file>
    <file>TaggingData.java</file>
    <file>Viterbi.java</file>
  </compound>
  <compound kind="dir">
    <name>tagger/</name>
    <path>/home/srush/Projects/relax_decode/tagger/</path>
    <filename>dir_454a81312f5c079f3176ae8606e1d165.html</filename>
    <file>TagConstraints.cpp</file>
    <file>TagConstraints.h</file>
    <file>Tagger.cpp</file>
    <file>Tagger.h</file>
    <file>TagSolvers.cpp</file>
    <file>TagSolvers.h</file>
  </compound>
  <compound kind="dir">
    <name>third-party/</name>
    <path>/home/srush/Projects/relax_decode/third-party/</path>
    <filename>dir_e566fecbca3f3647c80e3a226a599a57.html</filename>
    <dir>third-party/CRFTagger/</dir>
    <dir>third-party/mstparser/</dir>
    <dir>third-party/svector/</dir>
  </compound>
  <compound kind="dir">
    <name>trans_decode/</name>
    <path>/home/srush/Projects/relax_decode/trans_decode/</path>
    <filename>dir_577b84ae8ca28da4686609a1f7db25f5.html</filename>
    <file>Decode.cpp</file>
    <file>Decode.h</file>
    <file>dual_subproblem.cpp</file>
    <file>dual_subproblem.h</file>
    <file>NGramCache.cpp</file>
    <file>NGramCache.h</file>
  </compound>
  <compound kind="dir">
    <name>transforest/</name>
    <path>/home/srush/Projects/relax_decode/transforest/</path>
    <filename>dir_af4d1a4c6e00a68ff896c2c0ab0a8c37.html</filename>
    <file>Forest.cpp</file>
    <file>Forest.h</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/lattice/util/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/lattice/util/</path>
    <filename>dir_a6e1c8fb291884a442aa8e7f919f984c.html</filename>
    <file>hypergraph_to_lattice.py</file>
    <file>lattice_to_graphviz.py</file>
    <file>reverse_lattice.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/hypergraph/util/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/hypergraph/util/</path>
    <filename>dir_f172ea963a6bf394aa6bae4e0e36269d.html</filename>
    <file>hypergraph_from_json.py</file>
    <file>hypergraph_graphviz.py</file>
  </compound>
  <compound kind="dir">
    <name>interfaces/graph/util/</name>
    <path>/home/srush/Projects/relax_decode/interfaces/graph/util/</path>
    <filename>dir_77888408aaaa1d3d665fe0582b67c9fe.html</filename>
    <file>graphviz.py</file>
  </compound>
</tagfile>
