<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="hypergraph_2Forest_8cpp" kind="file">
    <compoundname>Forest.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*#include<sp/>&quot;Forest.h&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="comment">#include<sp/>&quot;features.pb.h&quot;</highlight></codeline>
<codeline lineno="3"><highlight class="comment">#include<sp/>&quot;translation.pb.h&quot;</highlight></codeline>
<codeline lineno="4"><highlight class="comment">#include<sp/>&quot;hypergraph.pb.h&quot;</highlight></codeline>
<codeline lineno="5"><highlight class="comment">#include<sp/>&quot;lexical.pb.h&quot;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">#include<sp/>&lt;iomanip&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="comment">#include<sp/>&lt;vector&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="comment">#include<sp/>&quot;cy_svector.hpp&quot;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">void<sp/>Forest::append_end_nodes()<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>ForestNode<sp/>*<sp/>node<sp/>=<sp/>_root;</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>ForestEdge<sp/>*<sp/>edge<sp/>=<sp/>node-&gt;_edges[0];</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>str_vector<sp/>*<sp/>features<sp/>=<sp/>svector_from_str&lt;int,<sp/>double&gt;(&quot;&quot;);</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>ForestNode<sp/>*<sp/>s1<sp/>=<sp/>new<sp/>ForestNode(&quot;&quot;,<sp/>num_nodes(),<sp/>features,<sp/>&quot;&lt;s&gt;&quot;,<sp/>true);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>s1-&gt;add_in_edge(edge);</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>_nodes.push_back(s1);</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>ForestNode<sp/>*<sp/>s2<sp/>=<sp/>new<sp/>ForestNode(&quot;&quot;,<sp/>num_nodes(),<sp/>features,<sp/>&quot;&lt;s&gt;&quot;,<sp/>true);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>s2-&gt;add_in_edge(edge);</highlight></codeline>
<codeline lineno="23"><highlight class="comment">_nodes.push_back(s2);</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>ForestNode<sp/>*<sp/>se1<sp/>=<sp/>new<sp/>ForestNode(&quot;&quot;,<sp/>num_nodes(),<sp/>features,<sp/>&quot;&lt;/s&gt;&quot;,<sp/>true);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>se1-&gt;add_in_edge(edge);</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>_nodes.push_back(se1);</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>ForestNode<sp/>*<sp/>se2<sp/>=<sp/>new<sp/>ForestNode(&quot;&quot;,<sp/>num_nodes(),<sp/>features,<sp/>&quot;&lt;/s&gt;&quot;,<sp/>true);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>se2-&gt;add_in_edge(edge);</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>_nodes.push_back(se2);</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>edge-&gt;_tail_nodes.resize(5);</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>edge-&gt;_tail_nodes[2]<sp/>=<sp/>edge-&gt;_tail_nodes[0];</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>edge-&gt;_tail_nodes[0]<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>edge-&gt;_tail_nodes[1]<sp/>=<sp/>s2;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/>edge-&gt;_tail_nodes[3]<sp/>=<sp/>se1;</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>edge-&gt;_tail_nodes[4]<sp/>=<sp/>se2;</highlight></codeline>
<codeline lineno="38"><highlight class="comment">}</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">Forest::Forest(const<sp/>char<sp/>*<sp/>file_name<sp/>)<sp/>{<sp/>//<sp/>::Hypergraph&amp;<sp/>hgraph)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>::Hypergraph<sp/>hgraph;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>GOOGLE_PROTOBUF_VERIFY_VERSION;</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>//fname<sp/>&lt;&lt;<sp/>file_name;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>fname.str()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>fstream<sp/>input(file_name,<sp/>ios::in<sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!hgraph.ParseFromIstream(&amp;input))<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(false);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>//return<sp/>Forest(hgraph);</highlight></codeline>
<codeline lineno="53"><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>assert<sp/>(hgraph.node_size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hgraph.node_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>Hypergraph_Node<sp/>&amp;<sp/>node<sp/>=<sp/>hgraph.node(i);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>string<sp/>feat_str<sp/>=<sp/>node.GetExtension(node_fv);</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>str_vector<sp/>*<sp/>features<sp/>=<sp/>svector_from_str&lt;int,<sp/>double&gt;(feat_str);</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>ForestNode<sp/>*<sp/>forest_node<sp/>=<sp/>new<sp/>ForestNode(node.label(),<sp/>node.id(),<sp/>features,<sp/>node.GetExtension(word),<sp/>node.GetExtension(is_word));<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>//assert<sp/>(forest_node-&gt;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>assert<sp/>(_nodes.size()<sp/>==<sp/>node.id());</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>_nodes.push_back(forest_node);</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>assert(_nodes[forest_node-&gt;id()]-&gt;id()<sp/>==<sp/>forest_node-&gt;id());</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>assert(_nodes[forest_node-&gt;id()]-&gt;is_word()<sp/>==<sp/>node.GetExtension(is_word));</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>forest_node-&gt;id()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>node.GetExtension(is_word)<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>forest_node-&gt;is_word()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//[forest_node-&gt;id()]<sp/>=<sp/>forest_node;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>_nodes.size()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>forest_node-&gt;id()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>int<sp/>edge_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hgraph.node_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>Hypergraph_Node&amp;<sp/>node<sp/>=<sp/>hgraph.node(i);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>assert<sp/>(node.id()<sp/><sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>node.id()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>//if<sp/>(node.edge_size()<sp/>==0)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>//assert<sp/>(_nodes[node.id()]-&gt;is_word());</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>//}</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j=0;<sp/>j<sp/>&lt;<sp/>node.edge_size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Hypergraph_Edge&amp;<sp/>edge<sp/>=<sp/>node.edge(j);</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>str_vector<sp/>*<sp/>features;</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(edge.HasExtension(edge_fv))<sp/>{<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string<sp/>&amp;<sp/>feat_str<sp/>=<sp/>edge.GetExtension(edge_fv);<sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features<sp/>=<sp/>svector_from_str&lt;int,<sp/>double&gt;(feat_str);</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>feat_str<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>edge.label()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>svector_str(*features)<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>feat_str<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features<sp/>=<sp/>new<sp/>svector&lt;int,<sp/>double&gt;();</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>&lt;ForestNode*<sp/>&gt;<sp/>tail_nodes;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>k<sp/>=0;<sp/>k<sp/>&lt;<sp/>edge.tail_node_ids_size();<sp/>k++<sp/>){</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>id<sp/>=<sp/>edge.tail_node_ids(k);</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail_nodes.push_back(_nodes[id]);</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ForestEdge<sp/>*<sp/>forest_edge<sp/>=<sp/>new<sp/>ForestEdge(edge.label(),<sp/>features,<sp/>edge_id,<sp/>tail_nodes,<sp/>_nodes[node.id()]);</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>k<sp/>=0;<sp/>k<sp/>&lt;<sp/>edge.tail_node_ids_size();<sp/>k++<sp/>){</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>id<sp/>=<sp/>edge.tail_node_ids(k);</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_nodes[id]-&gt;add_in_edge(forest_edge);</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>edge_id++;</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>_nodes[node.id()]-&gt;add_edge(forest_edge);</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//int<sp/>for_edge_id<sp/>=<sp/>forest_edge-&gt;id();</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>_edges.push_back(forest_edge);//[for_edge_id]<sp/>=<sp/>forest_edge;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>node.id()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;&lt;&lt;<sp/><sp/>_nodes[node.id()]-&gt;num_edges()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>node.edge_size()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>_nodes[node.id()]-&gt;is_word()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>assert<sp/>(_nodes[node.id()]-&gt;num_edges()<sp/>==<sp/>node.edge_size()<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>assert<sp/>(_nodes.size()<sp/>==<sp/>hgraph.node_size());</highlight></codeline>
<codeline lineno="123"><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>_root<sp/>=<sp/>_nodes[hgraph.root()];//_nodes[_nodes.size()-1];</highlight></codeline>
<codeline lineno="126"><highlight class="comment">}</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">void<sp/>Forest::print()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="comment">}</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">Forest<sp/>Forest::from_file(const<sp/>char<sp/>*<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/>return<sp/>Forest(file);</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/>/*Hypergraph<sp/>hgraph;</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>stringstream<sp/>fname;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>fname<sp/>&lt;&lt;argv[1]<sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>fname.str()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>fstream<sp/>input(fname.str().c_str(),<sp/>ios::in<sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!hgraph.ParseFromIstream(&amp;input))<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(false);</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>return<sp/>Forest(hgraph);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">*/</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/hypergraph/Forest.cpp"/>
  </compounddef>
</doxygen>
