<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_edge_cache_8h" kind="file">
    <compoundname>EdgeCache.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">bitset</includes>
    <includes local="no">assert.h</includes>
    <includedby refid="_cube_l_m_8cpp" local="yes">CubeLM.cpp</includedby>
    <includedby refid="_cube_l_m_8h" local="yes">CubeLM.h</includedby>
    <includedby refid="_a_star_8cpp" local="yes">hypergraph/AStar.cpp</includedby>
    <includedby refid="_cube_pruning_8cpp" local="yes">hypergraph/CubePruning.cpp</includedby>
    <includedby refid="_cube_pruning_8h" local="yes">hypergraph/CubePruning.h</includedby>
    <includedby refid="_extend_c_k_y_8cpp" local="yes">hypergraph/ExtendCKY.cpp</includedby>
    <includedby refid="_extend_c_k_y_8h" local="yes">hypergraph/ExtendCKY.h</includedby>
    <includedby refid="_hypergraph_algorithms_8h" local="yes">hypergraph/HypergraphAlgorithms.h</includedby>
    <includedby refid="_hypothesis_8h" local="yes">hypergraph/Hypothesis.h</includedby>
    <includedby refid="_l_p_builder_8cpp" local="no">lp/LPBuilder.cpp</includedby>
    <includedby refid="_l_p_builder_8h" local="no">lp/LPBuilder.h</includedby>
    <includedby refid="_m_r_f_8cpp" local="yes">optimization/MRF.cpp</includedby>
    <includedby refid="_m_r_f_8h" local="yes">optimization/MRF.h</includedby>
    <includedby refid="_m_r_f_hypergraph_8cpp" local="no">optimization/MRFHypergraph.cpp</includedby>
    <includedby refid="_m_r_f_hypergraph_8h" local="no">optimization/MRFHypergraph.h</includedby>
    <includedby refid="_dep_parser_8cpp" local="yes">parse/DepParser.cpp</includedby>
    <includedby refid="_dep_parser_8h" local="yes">parse/DepParser.h</includedby>
    <includedby refid="_phrase_based_8cpp" local="yes">phrasebased/PhraseBased.cpp</includedby>
    <includedby refid="_phrase_based_8h" local="yes">phrasebased/PhraseBased.h</includedby>
    <includedby refid="_tag_constraints_8cpp" local="yes">tagger/TagConstraints.cpp</includedby>
    <includedby refid="_tag_constraints_8h" local="yes">tagger/TagConstraints.h</includedby>
    <includedby refid="_tagger_8cpp" local="yes">tagger/Tagger.cpp</includedby>
    <includedby refid="_tagger_8h" local="yes">tagger/Tagger.h</includedby>
    <includedby refid="_decode_8cpp" local="yes">trans_decode/Decode.cpp</includedby>
    <includedby refid="_decode_8h" local="yes">trans_decode/Decode.h</includedby>
    <includedby refid="dual__subproblem_8cpp" local="yes">trans_decode/dual_subproblem.cpp</includedby>
    <includedby refid="dual__subproblem_8h" local="yes">trans_decode/dual_subproblem.h</includedby>
    <incdepgraph>
      <node id="359">
        <label>assert.h</label>
      </node>
      <node id="356">
        <label>hypergraph/EdgeCache.h</label>
        <link refid="EdgeCache.h"/>
        <childnode refid="357" relation="include">
        </childnode>
        <childnode refid="358" relation="include">
        </childnode>
        <childnode refid="359" relation="include">
        </childnode>
      </node>
      <node id="358">
        <label>bitset</label>
      </node>
      <node id="357">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="369">
        <label>lp/HardPosConstraints.h</label>
        <link refid="_hard_pos_constraints_8h_source"/>
        <childnode refid="369" relation="include">
        </childnode>
      </node>
      <node id="361">
        <label>CubeLM.h</label>
        <link refid="_cube_l_m_8h_source"/>
      </node>
      <node id="381">
        <label>tagger/Tagger.h</label>
        <link refid="_tagger_8h_source"/>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
      </node>
      <node id="376">
        <label>optimization/MRFHypergraph.h</label>
        <link refid="_m_r_f_hypergraph_8h_source"/>
      </node>
      <node id="370">
        <label>lp/TagMrfLP.h</label>
        <link refid="_tag_mrf_l_p_8h_source"/>
      </node>
      <node id="379">
        <label>lp/HardConstraints.h</label>
        <link refid="_hard_constraints_8h_source"/>
      </node>
      <node id="374">
        <label>optimization/MRF.h</label>
        <link refid="_m_r_f_8h_source"/>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
      </node>
      <node id="360">
        <label>hypergraph/EdgeCache.h</label>
        <link refid="EdgeCache.h"/>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
      </node>
      <node id="373">
        <label>lp/LPBuilder.h</label>
        <link refid="_l_p_builder_8h_source"/>
      </node>
      <node id="375">
        <label>lp/MRFLP.h</label>
        <link refid="_m_r_f_l_p_8h_source"/>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="363">
        <label>hypergraph/ExtendCKY.h</label>
        <link refid="_extend_c_k_y_8h_source"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="377">
        <label>parse/DepParser.h</label>
        <link refid="_dep_parser_8h_source"/>
        <childnode refid="378" relation="include">
        </childnode>
      </node>
      <node id="367">
        <label>hypergraph/AStar.h</label>
        <link refid="_a_star_8h_source"/>
      </node>
      <node id="362">
        <label>hypergraph/CubePruning.h</label>
        <link refid="_cube_pruning_8h_source"/>
        <childnode refid="361" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>hypergraph/Hypothesis.h</label>
        <link refid="_hypothesis_8h_source"/>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
      </node>
      <node id="368">
        <label>tagger/TagConstraints.h</label>
        <link refid="_tag_constraints_8h_source"/>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
      </node>
      <node id="364">
        <label>trans_decode/Decode.h</label>
        <link refid="_decode_8h_source"/>
      </node>
      <node id="383">
        <label>trans_decode/dual_subproblem.h</label>
        <link refid="dual__subproblem_8h_source"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="365">
        <label>hypergraph/HypergraphAlgorithms.h</label>
        <link refid="_hypergraph_algorithms_8h_source"/>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="382">
        <label>lp/TagLP.h</label>
        <link refid="_tag_l_p_8h_source"/>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="380">
        <label>phrasebased/PhraseBased.h</label>
        <link refid="_phrase_based_8h_source"/>
      </node>
      <node id="378">
        <label>lp/DepParseLP.h</label>
        <link refid="_dep_parse_l_p_8h_source"/>
        <childnode refid="379" relation="include">
        </childnode>
      </node>
      <node id="366">
        <label>hypergraph/BestHyp.h</label>
        <link refid="_best_hyp_8h_source"/>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
      </node>
      <node id="371">
        <label>tagger/TagSolvers.h</label>
        <link refid="_tag_solvers_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_cache" prot="public">Cache</innerclass>
    <innerclass refid="class_store_cache" prot="public">StoreCache</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>EDGECACHE_H_</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EDGECACHE_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitset&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="9" refid="class_cache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_cache" kindref="compound">Cache</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>hit<sp/>directly<sp/>if<sp/>need<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;V&gt;<sp/>store;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;bool&gt;<sp/>has_value;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="class_cache" kindref="compound">Cache</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>store.resize(size);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value.resize(size);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value.size();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(has_value[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store[id];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>V<sp/>&amp;<sp/>get_no_check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value[id]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store[id];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>V<sp/>&amp;<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(has_value[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store[id];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>V<sp/>get_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(has_value[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store[id];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge,<sp/>V<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>store.size());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value[id]=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>store[id]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value[edge.id()];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_key(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value[k];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="66" refid="class_store_cache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_store_cache" kindref="compound">StoreCache</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>hit<sp/>directly<sp/>if<sp/>need<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;V&gt;<sp/>store;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;C&gt;<sp/>full_keys;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;bool&gt;<sp/>has_value;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="class_store_cache" kindref="compound">StoreCache</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="class_store_cache" kindref="compound">StoreCache</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{resize(size);}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>store.resize(size);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>full_keys.resize(size);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value.resize(size);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value.size();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>V<sp/>get_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(has_value[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store[id];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge,<sp/>V<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>edge.id();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value[id]=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>store[id]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>full_keys[id]<sp/>=<sp/>edge;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>C<sp/>&amp;<sp/>edge)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value[edge.id()];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_key(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value[k];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/hypergraph/EdgeCache.h"/>
  </compounddef>
</doxygen>
