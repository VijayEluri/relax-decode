<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="hypergraph__to__lattice_8py" kind="file">
    <compoundname>hypergraph_to_lattice.py</compoundname>
    <innerclass refid="classhypergraph__to__lattice_1_1Graph" prot="public">hypergraph_to_lattice::Graph</innerclass>
    <innerclass refid="classhypergraph__to__lattice_1_1LatNode" prot="public">hypergraph_to_lattice::LatNode</innerclass>
    <innerclass refid="classhypergraph__to__lattice_1_1NonTermNode" prot="public">hypergraph_to_lattice::NonTermNode</innerclass>
    <innerclass refid="classhypergraph__to__lattice_1_1LexNode" prot="public">hypergraph_to_lattice::LexNode</innerclass>
    <innerclass refid="classhypergraph__to__lattice_1_1InternalNode" prot="public">hypergraph_to_lattice::InternalNode</innerclass>
    <innerclass refid="classhypergraph__to__lattice_1_1NodeExtractor" prot="public">hypergraph_to_lattice::NodeExtractor</innerclass>
    <innernamespace refid="namespacehypergraph__to__lattice">hypergraph_to_lattice</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os,sys</highlight></codeline>
<codeline lineno="3"><highlight class="normal">sys.path.append(</highlight><highlight class="stringliteral">&quot;../gen-py/&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">sys.path.append(</highlight><highlight class="stringliteral">&quot;../../hypergraph/gen_py/&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>lattice_pb2<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>hypergraph_pb2<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>lexical_pb2<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><sp/>lattice_pb2<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>lattice</highlight></codeline>
<codeline lineno="10"><highlight class="normal">DOWN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">UP<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;</highlight><highlight class="stringliteral">U&quot;</highlight></codeline>
<codeline lineno="12" refid="classhypergraph__to__lattice_1_1Graph" refkind="compound"><highlight class="stringliteral"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhypergraph__to__lattice_1_1Graph" kindref="compound">Graph</ref>(object):</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a27ba97b60fe59dfcd38dd84ad5771ec8" kindref="member">nodes</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a641408abe14eb2ca59558af8c66a29f0" kindref="member">edge_map</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a55f4552a72c8862e879c4bf1c5c591dd" kindref="member">check</ref><sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1aa2f03bffcdb31d13b01a0cb2a66fba27" kindref="member">lattice</ref><sp/>=<sp/>Lattice()</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a1077f3c24b2e35dfcd277eda332e9180" kindref="member">total_edges</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">set_start(self,<sp/>node):</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1aa2f03bffcdb31d13b01a0cb2a66fba27" kindref="member">lattice</ref>.start<sp/>=<sp/>node.id</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">set_final(self,<sp/>node):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1aa2f03bffcdb31d13b01a0cb2a66fba27" kindref="member">lattice</ref>.final.append(node.id)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">register_node(self,<sp/>node):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a27ba97b60fe59dfcd38dd84ad5771ec8" kindref="member">nodes</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a27ba97b60fe59dfcd38dd84ad5771ec8" kindref="member">nodes</ref>[self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref>]<sp/>=<sp/>node</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>node.id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1aa2f03bffcdb31d13b01a0cb2a66fba27" kindref="member">lattice</ref>.node.add()</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>n.id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>str(node)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>n.label<sp/>=<sp/>unicode(s,<sp/>errors=</highlight><highlight class="stringliteral">&quot;ignore&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>node.proto<sp/>=<sp/>n</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref><sp/>+=<sp/>1<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref><sp/>-<sp/>1</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">register_edge_map(self,<sp/>node,<sp/>edge_id):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a641408abe14eb2ca59558af8c66a29f0" kindref="member">edge_map</ref>.setdefault(edge_id,<sp/>set())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a641408abe14eb2ca59558af8c66a29f0" kindref="member">edge_map</ref>[edge_id].add(node)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">size(self):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a2f57d378f9cda72a4e375740cc6a4ec1" kindref="member">id</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__iter__(self):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a27ba97b60fe59dfcd38dd84ad5771ec8" kindref="member">nodes</ref>:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a27ba97b60fe59dfcd38dd84ad5771ec8" kindref="member">nodes</ref>[i]</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">filter(self,<sp/>fn):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>todel<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>node<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>fn(node):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>bn<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.back_edges:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bn.edges.remove(node)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n2<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.edges:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2.back_edges.remove(node)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n2<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.edges:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>bn<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.back_edges:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bn.add_edge(n2)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>todel.append(node.id)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>todel:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>self.<ref refid="classhypergraph__to__lattice_1_1Graph_1a27ba97b60fe59dfcd38dd84ad5771ec8" kindref="member">nodes</ref>[i]</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="classhypergraph__to__lattice_1_1LatNode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhypergraph__to__lattice_1_1LatNode" kindref="compound">LatNode</ref>(object):</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>graph):</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1LatNode_1a46e15397405f9e3ce3d1e73605f0285a" kindref="member">edges</ref><sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1LatNode_1a9c9f4406aa0ac3185f04c9859378e45a" kindref="member">back_edges</ref><sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>graph.register_node(self)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1LatNode_1a7f57c9d4ecaedad8ce3b15dd4584221a" kindref="member">lex</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1LatNode_1a59dada46e36c28a9b68d30a88fc542ac" kindref="member">graph</ref><sp/>=<sp/>graph</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">add_edge(self,<sp/>to_node,<sp/>label):</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1LatNode_1a46e15397405f9e3ce3d1e73605f0285a" kindref="member">edges</ref>.add(to_node)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>to_node.back_edges.add(self)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>self.proto.edge.add()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>edge.to_id<sp/>=<sp/>to_node.id</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edge<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">label(self):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str(self)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classhypergraph__to__lattice_1_1NonTermNode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhypergraph__to__lattice_1_1NonTermNode" kindref="compound">NonTermNode</ref>(<ref refid="classhypergraph__to__lattice_1_1LatNode" kindref="compound">LatNode</ref>):</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>graph,<sp/>forest_node,<sp/>dir):<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NonTermNode_1aed769cb6e411164a776daf5aee232b50" kindref="member">forest_node</ref><sp/>=<sp/>forest_node</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NonTermNode_1a8674d7004d94aea2133bfb32dbf9da9e" kindref="member">dir</ref><sp/>=<sp/>dir</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>LatNode.__init__(self,<sp/>graph)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.proto.Extensions[original_node]<sp/>=<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.proto.Extensions[ignore_node]<sp/>=<sp/>True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__str__(self):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">%(str(self.<ref refid="classhypergraph__to__lattice_1_1NonTermNode_1aed769cb6e411164a776daf5aee232b50" kindref="member">forest_node</ref>.label),<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NonTermNode_1a8674d7004d94aea2133bfb32dbf9da9e" kindref="member">dir</ref>,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NonTermNode_1aed769cb6e411164a776daf5aee232b50" kindref="member">forest_node</ref>.id,<sp/>self.id)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">color(self):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classhypergraph__to__lattice_1_1LexNode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhypergraph__to__lattice_1_1LexNode" kindref="compound">LexNode</ref>(<ref refid="classhypergraph__to__lattice_1_1LatNode" kindref="compound">LatNode</ref>):</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>graph,<sp/>lex,<sp/>edge_id):</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1LexNode_1acb431fe2b2339b8752b9e8daaf59d781" kindref="member">lex</ref><sp/>=<sp/>lex</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>LatNode.__init__(self,<sp/>graph)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.proto._known_extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.proto.Extensions[lattice.is_word]<sp/>=<sp/>True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.proto.Extensions[lattice.word]<sp/>=<sp/>lex.decode(&quot;utf-8&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>lex,<sp/>self.id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>self.graph.register_edge_map(self,<sp/>edge_id)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.proto.Extensions[original_node]<sp/>=<sp/>edge_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__str__(self):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">%(self.<ref refid="classhypergraph__to__lattice_1_1LexNode_1acb431fe2b2339b8752b9e8daaf59d781" kindref="member">lex</ref>,<sp/>self.id)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">color(self):</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classhypergraph__to__lattice_1_1InternalNode" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhypergraph__to__lattice_1_1InternalNode" kindref="compound">InternalNode</ref>(<ref refid="classhypergraph__to__lattice_1_1LatNode" kindref="compound">LatNode</ref>):</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>graph,<sp/>rule,<sp/>pos,<sp/>name,<sp/>dir,<sp/>edge_id):</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1a41a36188327a12cdb33ffb206ee7823f" kindref="member">name</ref><sp/>=<sp/>name</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1a67c5d4c549c83619233496bf0c230e0e" kindref="member">rule</ref><sp/>=<sp/>rule</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1ae5d2c0ddc19817e0d45e2eacb6bd0766" kindref="member">dir</ref><sp/>=<sp/>dir</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1ae5d2c0ddc19817e0d45e2eacb6bd0766" kindref="member">dir</ref><sp/>==<sp/>UP:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1ab596886460b8c32f441c1f4c999b1ac0" kindref="member">pos</ref><sp/>=<sp/>pos<sp/>+1</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1ab596886460b8c32f441c1f4c999b1ac0" kindref="member">pos</ref><sp/>=<sp/>pos</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>LatNode.__init__(self,<sp/>graph)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>self.graph.register_edge_map(self,<sp/>edge_id)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.proto.Extensions[original_node]<sp/>=<sp/>edge_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__str__(self):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#rhs<sp/>=<sp/>self.rule.rhs[:]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#rhs.insert(self.pos,<sp/>&quot;.&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#rhsstr<sp/>=<sp/>&quot;<sp/>&quot;.join(rhs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">%(self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1a67c5d4c549c83619233496bf0c230e0e" kindref="member">rule</ref>,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/>,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1ae5d2c0ddc19817e0d45e2eacb6bd0766" kindref="member">dir</ref>,<sp/>self.id))<sp/></highlight><highlight class="comment">#<sp/>self.rule.edge.id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">label(self):</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs<sp/>=<sp/>unicode(str(self.<ref refid="classhypergraph__to__lattice_1_1InternalNode_1a67c5d4c549c83619233496bf0c230e0e" kindref="member">rule</ref>.lhs),<sp/>errors=</highlight><highlight class="stringliteral">&apos;ignore&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">%(lhs,<sp/>str(self))</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">color(self):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="classhypergraph__to__lattice_1_1NodeExtractor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhypergraph__to__lattice_1_1NodeExtractor" kindref="compound">NodeExtractor</ref>(object):</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Class<sp/>for<sp/>creating<sp/>the<sp/>FSA<sp/>that<sp/>represents<sp/>a<sp/>translation<sp/>forest<sp/>(forest<sp/>lattice)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a74420da9e353412aa05c2bd17187a47f" kindref="member">internal_nodes</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89b13a6e84b8e29e6783bb3bb041db90" kindref="member">word_nodes</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a413da4c636a4ec6d55aebd8de0238a20" kindref="member">edge_id</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a042ce7593f25f0a52b4709ad83809b03" kindref="member">total_edges</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a133d3c9156158f1acad9f62fb821fc9e" kindref="member">inner_node_labels</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">get_label(self,<sp/>from_node,<sp/>to_node,<sp/>has_phrases):</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>has_phrases:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(from_node,<sp/>to_node)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a133d3c9156158f1acad9f62fb821fc9e" kindref="member">inner_node_labels</ref>.has_key(key):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a133d3c9156158f1acad9f62fb821fc9e" kindref="member">inner_node_labels</ref>[key]<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a133d3c9156158f1acad9f62fb821fc9e" kindref="member">inner_node_labels</ref>[key]</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#t<sp/>=<sp/>self.original_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.original_id<sp/>+=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#return<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">extract(self,<sp/>forest):</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a164192af340a81cd82e88450996f0385" kindref="member">memo</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref><sp/>=<sp/>Graph()</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89d8e66a6557714e84b16065c8d78b11" kindref="member">forest</ref><sp/>=<sp/>forest</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>first_state<sp/>=<sp/>LexNode(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&lt;s&gt;&quot;</highlight><highlight class="normal">,<sp/>-1)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>first_state.proto.Extensions[has_phrases]<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>proto_plet<sp/>=<sp/>first_state.proto.Extensions[phraselets].phraselet.add()</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>proto_plet.phraselet_hypergraph_edge<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>w<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;&lt;s&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&lt;s&gt;&apos;</highlight><highlight class="normal">]:<sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword<sp/>=<sp/>proto_plet.word.add()</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword.word<sp/>=<sp/>w</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword.subword_original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>beginning<sp/>not<sp/>in<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword.subword_hypergraph_node_id<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.original_id,<sp/>subword.word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>(first,<sp/>last)<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a7867888348ccd9044f34f242698c55f7" kindref="member">extract_fsa</ref>(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89d8e66a6557714e84b16065c8d78b11" kindref="member">forest</ref>.node[forest.root])</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>first_state.add_edge(first,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>last_state<sp/>=<sp/>LexNode(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&lt;/s&gt;&quot;</highlight><highlight class="normal">,<sp/>-1)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>last_state.proto.Extensions[has_phrases]<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>last.add_edge(last_state,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>proto_plet<sp/>=<sp/>last_state.proto.Extensions[phraselets].phraselet.add()</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>proto_plet.phraselet_hypergraph_edge<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>w<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;&lt;/s&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&lt;/s&gt;&apos;</highlight><highlight class="normal">]:<sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword<sp/>=<sp/>proto_plet.word.add()</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword.word<sp/>=<sp/>w</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword.subword_original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>end<sp/>not<sp/>in<sp/>hypergraph<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subword.subword_hypergraph_node_id<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.original_id,<sp/>subword.word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>.set_start(first_state)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>.set_final(last_state)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>Nodes&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a74420da9e353412aa05c2bd17187a47f" kindref="member">internal_nodes</ref></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Word<sp/>Nodes&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89b13a6e84b8e29e6783bb3bb041db90" kindref="member">word_nodes</ref></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>Nodes&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>.size()</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>edges&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a042ce7593f25f0a52b4709ad83809b03" kindref="member">total_edges</ref></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>.lattice.Extensions[num_hypergraph_edges]<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a042ce7593f25f0a52b4709ad83809b03" kindref="member">total_edges</ref></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>.lattice.Extensions[num_original_ids]<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">extract_fsa(self,<sp/>node):</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Constructs<sp/>the<sp/>segment<sp/>of<sp/>the<sp/>fsa<sp/>associated<sp/>with<sp/>a<sp/>node<sp/>in<sp/>the<sp/>forest&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>memoization<sp/>if<sp/>we<sp/>have<sp/>done<sp/>this<sp/>node<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a164192af340a81cd82e88450996f0385" kindref="member">memo</ref>.has_key(node.id):</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a164192af340a81cd82e88450996f0385" kindref="member">memo</ref>[node.id]</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>the<sp/>FSA<sp/>state<sp/>for<sp/>this<sp/>general<sp/>node<sp/>(non<sp/>marked)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(These<sp/>will<sp/>go<sp/>away<sp/>during<sp/>minimization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>down_state<sp/>=<sp/>NonTermNode(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>,<sp/>node,<sp/>DOWN)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>up_state<sp/>=<sp/>NonTermNode(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>,<sp/>node,<sp/>UP)<sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a164192af340a81cd82e88450996f0385" kindref="member">memo</ref>[node.id]<sp/>=<sp/>(down_state,<sp/>up_state)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/>{}<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>edge<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.edge:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a042ce7593f25f0a52b4709ad83809b03" kindref="member">total_edges</ref><sp/>+=1<sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhs<sp/>=<sp/>edge.tail_node_ids</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phraselet<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>-2</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_dot<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,node_id<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(rhs):</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_node<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89d8e66a6557714e84b16065c8d78b11" kindref="member">forest</ref>.node[node_id]</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>to_node.Extensions[is_word]:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>it&apos;s<sp/>a<sp/>word,<sp/>phraselet<sp/>it<sp/>and<sp/>stick<sp/>it<sp/>in<sp/>the<sp/>list<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phraselet.append(to_node)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>we&apos;ve<sp/>hit<sp/>a<sp/>new<sp/>node,<sp/>remember<sp/>to<sp/>make<sp/>a<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(last,<sp/>to_node.id,<sp/>bool(phraselet))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link.setdefault(key,<sp/>[])</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link[key].append((edge,<sp/>phraselet))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phraselet<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>to_node.id</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(last,<sp/>-1,<sp/>bool(phraselet))</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link.setdefault(key,<sp/>[])</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link[key].append((edge,<sp/>phraselet))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phraselet<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>((from_node,<sp/>to_node,<sp/>my_has_phrases),<sp/>my_phraselets)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>link.iteritems():<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#(_,<sp/>phraselet)<sp/>=<sp/>my_phraselets[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#words<sp/>=<sp/>&quot;<sp/>&quot;.join([n.Extensions[word]for<sp/>n<sp/>in<sp/>phraselet])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_state<sp/>=<sp/>LexNode(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1af647d8edf905a6ee59b844b8d18a1a3d" kindref="member">graph</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a413da4c636a4ec6d55aebd8de0238a20" kindref="member">edge_id</ref>)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Phraselet<sp/>len&quot;</highlight><highlight class="normal">,<sp/>len(my_phraselets)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>new_state.proto.Extensions[has_phrases]<sp/>=<sp/>my_has_phrases<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>edge_dot,<sp/>plet<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>my_phraselets:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proto_plet<sp/>=<sp/>new_state.proto.Extensions[phraselets].phraselet.add()</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proto_plet.phraselet_hypergraph_edge<sp/>=<sp/>edge_dot.id</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>w<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>plet:<sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subword<sp/>=<sp/>proto_plet.word.add()</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subword.word<sp/>=<sp/>w.Extensions[word]</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subword.subword_original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subword.subword_hypergraph_node_id<sp/>=<sp/>w.id</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.original_id,<sp/>subword.word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a3b95feeba90619e24bda406061104f29" kindref="member">original_id</ref><sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>from_node<sp/>==<sp/>-2:</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_node<sp/>=<sp/>down_state</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge<sp/>=<sp/>previous_node.add_edge(new_state,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal">(to_node<sp/>!=<sp/>-1<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>my_has_phrases);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge.label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>I<sp/>%s&quot;</highlight><highlight class="normal">%((node.id,<sp/>DOWN),<sp/>(to_node,<sp/>DOWN))</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original<sp/>=<sp/>protoedge.Extensions[origin]</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.has_origin<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>my_has_phrases:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge.label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>I<sp/>w&quot;</highlight><highlight class="normal">%((node.id,<sp/>DOWN),)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1aebfb872a1dafa22a6dd3c2f8300c07d2" kindref="member">get_label</ref>((node.id,<sp/>DOWN),<sp/>(to_node,<sp/>DOWN),<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>my_has_phrases)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>edge_dot,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>my_phraselets:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.hypergraph_edge.append(edge_dot.id)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_,<sp/>previous_node<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a7867888348ccd9044f34f242698c55f7" kindref="member">extract_fsa</ref>(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89d8e66a6557714e84b16065c8d78b11" kindref="member">forest</ref>.node[from_node])</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge<sp/>=<sp/>previous_node.add_edge(new_state,<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>UP&quot;</highlight><highlight class="normal">).decode(</highlight><highlight class="stringliteral">&apos;UTF-8&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>edge_dot,<sp/>phraselet<sp/>in<sp/>phraselets:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original<sp/>=<sp/>protoedge.Extensions[origin]</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.has_origin<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_node=<sp/>(to_node,<sp/>DOWN)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>to_node<sp/>==<sp/>-1:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_node<sp/>=<sp/>(node.id,<sp/>UP)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>my_has_phrases</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge.label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>M<sp/>%s&quot;</highlight><highlight class="normal">%((from_node,<sp/>UP),<sp/>end_node)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>my_has_phrases:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge.label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>M<sp/>w&quot;</highlight><highlight class="normal">%((from_node,<sp/>UP),)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1aebfb872a1dafa22a6dd3c2f8300c07d2" kindref="member">get_label</ref>((from_node,<sp/>UP),<sp/>end_node<sp/>,<sp/>unique)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>edge_dot,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>my_phraselets:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.hypergraph_edge.append(edge_dot.id)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>to_node<sp/>==<sp/>-1:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_node<sp/>=<sp/>up_state</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge<sp/>=<sp/>new_state.add_edge(next_node,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="comment">#(edge.label.encode(&apos;UTF-8&apos;)<sp/>+<sp/>&quot;<sp/>UP&quot;).decode(&apos;UTF-8&apos;)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>my_has_phrases:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge.label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;w<sp/>E<sp/>%s&quot;</highlight><highlight class="normal">%((node.id,<sp/>UP),)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original<sp/>=<sp/>protoedge.Extensions[origin]</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.has_origin<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1aebfb872a1dafa22a6dd3c2f8300c07d2" kindref="member">get_label</ref>((from_node,<sp/>UP),<sp/>(node.id,<sp/>UP),<sp/>my_has_phrases)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>edge_dot,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>my_phraselets:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.hypergraph_edge.append(edge_dot.id)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_node,<sp/>_<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a7867888348ccd9044f34f242698c55f7" kindref="member">extract_fsa</ref>(self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a89d8e66a6557714e84b16065c8d78b11" kindref="member">forest</ref>.node[to_node])</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge<sp/>=<sp/>new_state.add_edge(next_node,<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>DOWN&quot;</highlight><highlight class="normal">).decode(</highlight><highlight class="stringliteral">&apos;UTF-8&apos;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>edge_dot,<sp/>phraselet<sp/>in<sp/>phraselets:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#CHANGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>WRONG!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>my_has_phrases:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protoedge.label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;w<sp/>M<sp/>%s&quot;</highlight><highlight class="normal">%((to_node,<sp/>DOWN),)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original<sp/>=<sp/>protoedge.Extensions[origin]</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.has_origin<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.original_id<sp/>=<sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1aebfb872a1dafa22a6dd3c2f8300c07d2" kindref="member">get_label</ref>((from_node,<sp/>UP),<sp/>(to_node,<sp/>DOWN),<sp/>my_has_phrases)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>edge_dot,<sp/>_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>my_phraselets:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original.hypergraph_edge.append(edge_dot.id)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a413da4c636a4ec6d55aebd8de0238a20" kindref="member">edge_id</ref><sp/>+=1<sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhypergraph__to__lattice_1_1NodeExtractor_1a164192af340a81cd82e88450996f0385" kindref="member">memo</ref>[node.id]</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,101):</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>hgraph<sp/>=<sp/>Hypergraph()<sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(sys.argv[1]<sp/>+str(i),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>hgraph.ParseFromString(f.read())</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>graph<sp/>=<sp/>NodeExtractor().extract(hgraph)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>open(sys.argv[2]+str(i),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>f.write(graph.lattice.SerializeToString())</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>edge<sp/>in<sp/>node.edge:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>previous_state<sp/>=<sp/>down_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>rhs<sp/>=<sp/>edge.tail_node_ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>#<sp/>always<sp/>start<sp/>with<sp/>the<sp/>parent<sp/>down<sp/>state<sp/>(<sp/>.<sp/>P<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>nts_num<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>for<sp/>i,node_id<sp/>in<sp/>enumerate(rhs):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>to_node<sp/>=<sp/>self.forest.node[node_id]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>#<sp/>next<sp/>is<sp/>a<sp/>word<sp/>(<sp/>.<sp/>lex<sp/>)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>to_node.Extensions[is_word]:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_state<sp/>=<sp/>LexNode(self.graph,<sp/>to_node.Extensions[word].encode(&quot;UTF-8&quot;),<sp/>edge.id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.word_nodes<sp/>+=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_state.add_edge(new_state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Move<sp/>the<sp/>dot<sp/>(<sp/>lex<sp/>.<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_state<sp/>=<sp/>new_state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>it&apos;s<sp/>a<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>local<sp/>symbol<sp/>name<sp/>(lagrangians!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pos<sp/>=<sp/>get_sym_pos(sym)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#to_node<sp/>=<sp/>edge.subs[nts_num]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#nts_num<sp/>+=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>We<sp/>are<sp/>at<sp/>(.<sp/>N_id<sp/>)<sp/>need<sp/>to<sp/>get<sp/>to<sp/>(<sp/>N_id<sp/>.)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>First,<sp/>Create<sp/>a<sp/>unique<sp/>named<sp/>version<sp/>of<sp/>this<sp/>state<sp/>(.<sp/>N_id)<sp/>and<sp/>(<sp/>N_id<sp/>.<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>We<sp/>need<sp/>these<sp/>so<sp/>that<sp/>we<sp/>can<sp/>assign<sp/>lagrangians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_down_state<sp/>=<sp/>InternalNode(self.graph,<sp/>edge.label.encode(&quot;UTF-8&quot;),<sp/>i,<sp/>to_node.id,<sp/>DOWN,<sp/>edge.id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_up_state<sp/>=<sp/>InternalNode(self.graph,<sp/>edge.label.encode(&quot;UTF-8&quot;),<sp/>i<sp/>,<sp/>to_node.id,<sp/>UP,<sp/>edge.id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.internal_nodes+=2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>down_sym,<sp/>up_sym<sp/>=<sp/>self.extract_fsa(to_node)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_state.add_edge(local_down_state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>local_down_state.add_edge(down_sym)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>up_sym.add_edge(local_up_state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>move<sp/>the<sp/>dot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_state<sp/>=<sp/>local_up_state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>previous_state.add_edge(up_state)</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/interfaces/lattice/util/hypergraph_to_lattice.py"/>
  </compounddef>
</doxygen>
