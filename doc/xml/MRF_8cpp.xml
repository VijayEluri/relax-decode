<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="MRF_8cpp" kind="file">
    <compoundname>MRF.cpp</compoundname>
    <includes refid="MRF_8cpp" local="yes">MRF.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">string</includes>
    <includes refid="Graph_8h" local="no">Graph.h</includes>
    <includes refid="gen-py_2graph_8pb_8h" local="no">graph.pb.h</includes>
    <includes refid="gen-py_2mrf_8pb_8h" local="no">mrf.pb.h</includes>
    <includes refid="HypergraphImpl_8h" local="yes">HypergraphImpl.h</includes>
    <includes refid="GraphProtoInterface_8h" local="no">GraphProtoInterface.h</includes>
    <includes refid="EdgeCache_8h" local="yes">EdgeCache.h</includes>
    <includedby refid="MRF_8cpp" local="yes">optimization/MRF.cpp</includedby>
    <incdepgraph>
      <node id="2129">
        <label>assert.h</label>
      </node>
      <node id="2111">
        <label>mrf.pb.h</label>
        <link refid="gen-py_2mrf_8pb_8h_source"/>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
        <childnode refid="2105" relation="include">
        </childnode>
      </node>
      <node id="2100">
        <label>cassert</label>
      </node>
      <node id="2121">
        <label>tr1/unordered_map</label>
      </node>
      <node id="2122">
        <label>svector.hpp</label>
        <link refid="third-party_2svector_2svector_8hpp_source"/>
        <childnode refid="2120" relation="include">
        </childnode>
        <childnode refid="2121" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
      </node>
      <node id="2125">
        <label>features.pb.h</label>
        <link refid="gen__cpp_2features_8pb_8h_source"/>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
        <childnode refid="2124" relation="include">
        </childnode>
      </node>
      <node id="2101">
        <label>string</label>
      </node>
      <node id="2120">
        <label>map</label>
      </node>
      <node id="2127">
        <label>EdgeCache.h</label>
        <link refid="EdgeCache_8h_source"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2128" relation="include">
        </childnode>
        <childnode refid="2129" relation="include">
        </childnode>
      </node>
      <node id="2112">
        <label>HypergraphImpl.h</label>
        <link refid="HypergraphImpl_8h_source"/>
        <childnode refid="2113" relation="include">
        </childnode>
        <childnode refid="2124" relation="include">
        </childnode>
        <childnode refid="2125" relation="include">
        </childnode>
        <childnode refid="2114" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2123" relation="include">
        </childnode>
      </node>
      <node id="2113">
        <label>Hypergraph.h</label>
        <link refid="Hypergraph_8h_source"/>
        <childnode refid="2114" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2123" relation="include">
        </childnode>
        <childnode refid="2101" relation="include">
        </childnode>
      </node>
      <node id="2116">
        <label>fstream</label>
      </node>
      <node id="2102">
        <label>Graph.h</label>
        <link refid="Graph_8h_source"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
      </node>
      <node id="2105">
        <label>graph.pb.h</label>
        <link refid="gen-py_2graph_8pb_8h_source"/>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
      </node>
      <node id="2124">
        <label>hypergraph.pb.h</label>
        <link refid="gen__cpp_2hypergraph_8pb_8h_source"/>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2110" relation="include">
        </childnode>
      </node>
      <node id="2114">
        <label>Weights.h</label>
        <link refid="Weights_8h_source"/>
        <childnode refid="2115" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2122" relation="include">
        </childnode>
      </node>
      <node id="2107">
        <label>google/protobuf/generated_message_util.h</label>
      </node>
      <node id="2104">
        <label>../common.h</label>
      </node>
      <node id="2128">
        <label>bitset</label>
      </node>
      <node id="2106">
        <label>google/protobuf/stubs/common.h</label>
      </node>
      <node id="2103">
        <label>vector</label>
      </node>
      <node id="2126">
        <label>GraphProtoInterface.h</label>
        <link refid="GraphProtoInterface_8h_source"/>
        <childnode refid="2105" relation="include">
        </childnode>
        <childnode refid="2102" relation="include">
        </childnode>
      </node>
      <node id="2118">
        <label>sstream</label>
      </node>
      <node id="2109">
        <label>google/protobuf/extension_set.h</label>
      </node>
      <node id="2108">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="2119">
        <label>cstdlib</label>
      </node>
      <node id="2117">
        <label>cy_svector.hpp</label>
        <link refid="cy__svector_8hpp_source"/>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2118" relation="include">
        </childnode>
        <childnode refid="2119" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2120" relation="include">
        </childnode>
        <childnode refid="2121" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2115" relation="include">
        </childnode>
      </node>
      <node id="2115">
        <label>iostream</label>
      </node>
      <node id="2099">
        <label>optimization/MRF.cpp</label>
        <link refid="MRF.cpp"/>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2102" relation="include">
        </childnode>
        <childnode refid="2105" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
        <childnode refid="2112" relation="include">
        </childnode>
        <childnode refid="2126" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
      </node>
      <node id="2123">
        <label>set</label>
      </node>
      <node id="2110">
        <label>google/protobuf/generated_message_reflection.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;MRF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HypergraphImpl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MRF::process_node(<ref refid="classgraph_1_1Graph__Node" kindref="compound">graph::Graph_Node</ref><sp/>proto_node,<sp/><ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref><sp/>*<sp/>internal_node)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgraph_1_1MRFNode" kindref="compound">graph::MRFNode</ref><sp/>&amp;<sp/>mrfnode<sp/>=<sp/>proto_node.GetExtension(graph::mrf_node);<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_states<sp/>=<sp/>mrfnode.node_potentials_size();</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><ref refid="classCache" kindref="compound">Cache &lt;State, double&gt;</ref><sp/>*<sp/>node_potentials<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCache" kindref="compound">Cache &lt;State, double&gt;</ref><sp/>(num_states);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>_node_potentials-&gt;set_value(*internal_node,<sp/>node_potentials);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i<sp/>&lt;<sp/>mrfnode.node_potentials_size();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgraph_1_1NodeStatePotential" kindref="compound">graph::NodeStatePotential</ref><sp/>&amp;<sp/>node_poten<sp/>=<sp/>mrfnode.node_potentials(i);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgraph_1_1State" kindref="compound">graph::State</ref><sp/>&amp;<sp/>state<sp/>=<sp/>node_poten.state();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>node_poten.node_potential();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structState" kindref="compound">State</ref><sp/>s(state.id(),<sp/>state.label());</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>_node_states-&gt;get_no_check(*internal_node).push_back(s);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>_num_assignments++;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>node_potentials-&gt;set_value(s,<sp/>weight);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MRF::process_edge(<ref refid="classgraph_1_1Graph__Edge" kindref="compound">graph::Graph_Edge</ref><sp/>proto_edge,<sp/><ref refid="classScarab_1_1Graph_1_1Graphedge" kindref="compound">Graphedge</ref><sp/>*<sp/>internal_edge)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgraph_1_1MRFEdge" kindref="compound">graph::MRFEdge</ref><sp/>&amp;<sp/>mrf_edge<sp/>=<sp/>proto_edge.GetExtension(graph::mrf_edge);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>map<sp/>&lt;pair&lt;int,int&gt;,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&gt;<sp/>&amp;<sp/>edge_weights<sp/>=<sp/>_edge_potentials-&gt;get_no_check(*internal_edge);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_from_states<sp/>=<sp/>states(*internal_edge-&gt;from_node()).size();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_to_states<sp/>=<sp/>states(*internal_edge-&gt;to_node()).size();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>edge_weights.resize(n_from_states);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(int<sp/>s=0;s<sp/>&lt;<sp/>n_from_states;<sp/>s++<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>edge_weights[s].resize(n_to_states);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(int<sp/>s2=0;s2<sp/>&lt;<sp/>n_to_states;<sp/>s2++<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>edge_weights[s][s2]<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i<sp/>&lt;<sp/>mrf_edge.edge_potentials_size();<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgraph_1_1EdgeStatePotential" kindref="compound">graph::EdgeStatePotential</ref><sp/>&amp;<sp/>edge_poten<sp/>=<sp/>mrf_edge.edge_potentials(i);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from<sp/>=<sp/>edge_poten.from_state_id();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to<sp/>=<sp/>edge_poten.to_state_id();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>edge_weights[pair&lt;int,int&gt;(from,to)]<sp/>=<sp/>edge_poten.edge_potential();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMRF_1a928f19f948fa97796462fd9542a985fd" kindref="member">MRF::set_up</ref>(<ref refid="classgraph_1_1Graph" kindref="compound">graph::Graph</ref><sp/>graph,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes<sp/>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>_node_states<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCache" kindref="compound">Cache &lt;Graphnode, vector &lt;State&gt;</ref><sp/>&gt;(nodes);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>_node_potentials<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCache" kindref="compound">Cache &lt;Graphnode, Cache &lt;State, double&gt;</ref><sp/>*<sp/>&gt;(nodes);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>_edge_potentials<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCache" kindref="compound">Cache &lt;Graphedge, map&lt;pair&lt;int,int&gt;</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>&gt;(edges);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/optimization/MRF.cpp"/>
  </compounddef>
</doxygen>
