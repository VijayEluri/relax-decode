<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_graph_proto_interface_8cpp" kind="file">
    <compoundname>GraphProtoInterface.cpp</compoundname>
    <includes refid="_graph_proto_interface_8cpp" local="yes">GraphProtoInterface.h</includes>
    <includes local="yes">graph.pb.h</includes>
    <includes refid="_graph_8h" local="yes">Graph.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">google/protobuf/io/zero_copy_stream_impl.h</includes>
    <includes local="no">google/protobuf/io/coded_stream.h</includes>
    <includedby refid="_graph_proto_interface_8cpp" local="yes">graph/GraphProtoInterface.cpp</includedby>
    <incdepgraph>
      <node id="187">
        <label>graph/GraphProtoInterface.cpp</label>
        <link refid="GraphProtoInterface.cpp"/>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="191">
        <label>string</label>
      </node>
      <node id="195">
        <label>google/protobuf/io/coded_stream.h</label>
      </node>
      <node id="193">
        <label>fstream</label>
      </node>
      <node id="189">
        <label>Graph.h</label>
        <link refid="_graph_8h_source"/>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="192">
        <label>../common.h</label>
      </node>
      <node id="194">
        <label>google/protobuf/io/zero_copy_stream_impl.h</label>
      </node>
      <node id="190">
        <label>vector</label>
      </node>
      <node id="188">
        <label>graph.pb.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;GraphProtoInterface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/zero_copy_stream_impl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/coded_stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GraphProtoInterface::build_from_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>file_name)<sp/>{<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>graph::Graph<sp/>*<sp/>graph<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>graph::Graph();<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>fstream<sp/>input(file_name,<sp/>ios::in<sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>google::protobuf::io::IstreamInputStream<sp/>fs(&amp;input);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>google::protobuf::io::CodedInputStream<sp/>coded_fs(&amp;fs);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>coded_fs.SetTotalBytesLimit(1000000000,<sp/>-1);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>graph-&gt;ParseFromCodedStream(&amp;coded_fs);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;Graphnode<sp/>*&gt;<sp/>nodes;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;Graphedge<sp/>*&gt;<sp/>edges;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>graph-&gt;node_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>graph::Graph_Node<sp/>&amp;<sp/>node<sp/>=<sp/>graph-&gt;node(i);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>node.edge_size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>graph::Graph_Edge&amp;<sp/>edge<sp/>=<sp/>node.edge(j);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_count++;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>set_up(*graph,<sp/>graph-&gt;node_size(),<sp/>edge_count);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>graph-&gt;node_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>graph::Graph_Node<sp/>&amp;<sp/>node<sp/>=<sp/>graph-&gt;node(i);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Graphnode<sp/>*<sp/>my_node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphnode(node.id());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>process_node(node,<sp/>my_node);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes.push_back(my_node);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>uint<sp/>edge_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>graph-&gt;node_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>graph::Graph_Node&amp;<sp/>node<sp/>=<sp/>graph-&gt;node(i);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>node.edge_size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>graph::Graph_Edge&amp;<sp/>edge<sp/>=<sp/>node.edge(j);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to_node<sp/>=<sp/>edge.to_node();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Graphedge<sp/>*<sp/>my_edge<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graphedge(edge_id,<sp/>*nodes[node.id()],<sp/>*nodes[to_node]);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>process_edge(edge,<sp/>my_edge);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//((HypernodeImpl*)_nodes[to_node])-&gt;add_edge(forest_edge);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[node.id()]-&gt;add_edge(my_edge);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[my_edge-&gt;to_node()-&gt;id()]-&gt;add_in_edge(my_edge);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_id++;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edges.push_back(my_edge);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>Nodes<sp/>*<sp/>ns<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Nodes<sp/>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>Edges<sp/>*<sp/>es<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Edges<sp/>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(Graphnode<sp/>*<sp/>n,<sp/>nodes)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>ns-&gt;push_back((Node)<sp/>n);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(Graphedge<sp/>*<sp/>e,<sp/>edges)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>es-&gt;push_back((Edge)e);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>_graph<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Graph(*ns,<sp/>*es);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>graph;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/graph/GraphProtoInterface.cpp"/>
  </compounddef>
</doxygen>
