<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="structMRFLP" kind="struct" prot="public">
    <compoundname>MRFLP</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structMRFLP_1a1ddb2cc0eb980dc0d9d94bf731e3f4ae" prot="public" static="no" mutable="no">
        <type><ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref>, <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="structState" kindref="compound">State</ref>, GRBVar &gt; * &gt;</type>
        <definition>Cache&lt;Graphnode, Cache&lt;State, GRBVar&gt; * &gt; MRFLP::node_vars</definition>
        <argsstring></argsstring>
        <name>node_vars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="14" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structMRFLP_1a7f977d31ba7f70b5913279466a46e2b2" prot="public" static="no" mutable="no">
        <type><ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphedge" kindref="compound">Graphedge</ref>, <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="structState" kindref="compound">State</ref>, <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="structState" kindref="compound">State</ref>, GRBVar &gt; * &gt; * &gt;</type>
        <definition>Cache&lt;Graphedge, Cache&lt;State, Cache &lt;State , GRBVar &gt; * &gt; *&gt; MRFLP::edge_vars</definition>
        <argsstring></argsstring>
        <name>edge_vars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="15" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structMRFLP_1a46a1042ee20d632ca11afee0a1965fb9" prot="public" static="no" mutable="no">
        <type><ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphedge" kindref="compound">Graphedge</ref>, <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="structState" kindref="compound">State</ref>, GRBVar &gt; * &gt;</type>
        <definition>Cache&lt;Graphedge, Cache&lt;State, GRBVar&gt; * &gt; MRFLP::from_state_blank_vars</definition>
        <argsstring></argsstring>
        <name>from_state_blank_vars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="16" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structMRFLP_1ae1b4c653d4a3b3c6759a160f8f1c4fc6" prot="public" static="no" mutable="no">
        <type><ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphedge" kindref="compound">Graphedge</ref>, <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="structState" kindref="compound">State</ref>, GRBVar &gt; * &gt;</type>
        <definition>Cache&lt;Graphedge, Cache&lt;State, GRBVar&gt; * &gt; MRFLP::to_state_blank_vars</definition>
        <argsstring></argsstring>
        <name>to_state_blank_vars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="17" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structMRFLP_1a546b7ee8de350e2a882e9ae9beb6af6f" prot="public" static="no" mutable="no">
        <type>const <ref refid="classMRF" kindref="compound">MRF</ref> &amp;</type>
        <definition>const MRF&amp; MRFLP::mrf</definition>
        <argsstring></argsstring>
        <name>mrf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="18" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structMRFLP_1a868a64efdbf8d42682c7953361af4c31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MRFLP::MRFLP</definition>
        <argsstring>(const MRF &amp;p)</argsstring>
        <name>MRFLP</name>
        <param>
          <type>const <ref refid="classMRF" kindref="compound">MRF</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="13" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="11" bodyend="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1199">
        <label>Cache&lt; Graphedge, Cache&lt; State, GRBVar &gt; * &gt;</label>
        <link refid="classCache"/>
      </node>
      <node id="1194">
        <label>T</label>
      </node>
      <node id="1186">
        <label>GraphProtoInterface</label>
        <link refid="classGraphProtoInterface"/>
        <childnode refid="1187" relation="usage">
          <edgelabel>_graph</edgelabel>
        </childnode>
      </node>
      <node id="1189">
        <label>Scarab::Graph::Graphedge</label>
        <link refid="classScarab_1_1Graph_1_1Graphedge"/>
        <childnode refid="1190" relation="usage">
          <edgelabel>_to_node</edgelabel>
          <edgelabel>_from_node</edgelabel>
        </childnode>
      </node>
      <node id="1195">
        <label>Cache&lt; Graphnode, vector&lt; State &gt; &gt;</label>
        <link refid="classCache"/>
        <childnode refid="1196" relation="usage">
          <edgelabel>has_value</edgelabel>
        </childnode>
      </node>
      <node id="1193">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="1194" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1182">
        <label>MRFLP</label>
        <link refid="structMRFLP"/>
        <childnode refid="1183" relation="usage">
          <edgelabel>node_vars</edgelabel>
        </childnode>
        <childnode refid="1184" relation="usage">
          <edgelabel>edge_vars</edgelabel>
        </childnode>
        <childnode refid="1185" relation="usage">
          <edgelabel>mrf</edgelabel>
        </childnode>
        <childnode refid="1199" relation="usage">
          <edgelabel>from_state_blank_vars</edgelabel>
          <edgelabel>to_state_blank_vars</edgelabel>
        </childnode>
      </node>
      <node id="1197">
        <label>Cache&lt; Graphedge, map&lt; pair&lt; int, int &gt;, double &gt; &gt;</label>
        <link refid="classCache"/>
        <childnode refid="1196" relation="usage">
          <edgelabel>has_value</edgelabel>
        </childnode>
      </node>
      <node id="1198">
        <label>Cache&lt; Graphnode, Cache&lt; State, double &gt; * &gt;</label>
        <link refid="classCache"/>
        <childnode refid="1196" relation="usage">
          <edgelabel>has_value</edgelabel>
        </childnode>
      </node>
      <node id="1190">
        <label>Scarab::Graph::Graphnode</label>
        <link refid="classScarab_1_1Graph_1_1Graphnode"/>
        <childnode refid="1188" relation="usage">
          <edgelabel>_in_edges</edgelabel>
          <edgelabel>_edges</edgelabel>
        </childnode>
        <childnode refid="1191" relation="usage">
          <edgelabel>_label</edgelabel>
        </childnode>
      </node>
      <node id="1192">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="1183">
        <label>Cache&lt; Graphnode, Cache&lt; State, GRBVar &gt; * &gt;</label>
        <link refid="classCache"/>
      </node>
      <node id="1196">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="1184">
        <label>Cache&lt; Graphedge, Cache&lt; State, Cache&lt; State, GRBVar &gt; * &gt; * &gt;</label>
        <link refid="classCache"/>
      </node>
      <node id="1188">
        <label>std::vector&lt; const Graphedge * &gt;</label>
        <childnode refid="1189" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1187">
        <label>Scarab::Graph::Graph</label>
        <link refid="classScarab_1_1Graph_1_1Graph"/>
        <childnode refid="1188" relation="usage">
          <edgelabel>_edges</edgelabel>
        </childnode>
        <childnode refid="1193" relation="usage">
          <edgelabel>_nodes</edgelabel>
        </childnode>
      </node>
      <node id="1185">
        <label>MRF</label>
        <link refid="classMRF"/>
        <childnode refid="1186" relation="public-inheritance">
        </childnode>
        <childnode refid="1195" relation="usage">
          <edgelabel>_node_states</edgelabel>
        </childnode>
        <childnode refid="1197" relation="usage">
          <edgelabel>_edge_potentials</edgelabel>
        </childnode>
        <childnode refid="1198" relation="usage">
          <edgelabel>_node_potentials</edgelabel>
        </childnode>
      </node>
      <node id="1191">
        <label>std::string</label>
        <childnode refid="1192" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/srush/Projects/relax_decode/lp/MRFLP.h" line="10" bodyfile="/home/srush/Projects/relax_decode/lp/MRFLP.h" bodystart="10" bodyend="19"/>
    <listofallmembers>
      <member refid="structMRFLP_1a7f977d31ba7f70b5913279466a46e2b2" prot="public" virt="non-virtual"><scope>MRFLP</scope><name>edge_vars</name></member>
      <member refid="structMRFLP_1a46a1042ee20d632ca11afee0a1965fb9" prot="public" virt="non-virtual"><scope>MRFLP</scope><name>from_state_blank_vars</name></member>
      <member refid="structMRFLP_1a546b7ee8de350e2a882e9ae9beb6af6f" prot="public" virt="non-virtual"><scope>MRFLP</scope><name>mrf</name></member>
      <member refid="structMRFLP_1a868a64efdbf8d42682c7953361af4c31" prot="public" virt="non-virtual"><scope>MRFLP</scope><name>MRFLP</name></member>
      <member refid="structMRFLP_1a1ddb2cc0eb980dc0d9d94bf731e3f4ae" prot="public" virt="non-virtual"><scope>MRFLP</scope><name>node_vars</name></member>
      <member refid="structMRFLP_1ae1b4c653d4a3b3c6759a160f8f1c4fc6" prot="public" virt="non-virtual"><scope>MRFLP</scope><name>to_state_blank_vars</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
