<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_hard_constraints_8h" kind="file">
    <compoundname>HardConstraints.h</compoundname>
    <includes local="no">fstream</includes>
    <includes refid="_dep_parse_l_p_8h" local="yes">DepParseLP.h</includes>
    <includedby refid="_full_parser_8cpp" local="yes">FullParser.cpp</includedby>
    <incdepgraph>
      <node id="785">
        <label>HypergraphLP.h</label>
        <link refid="_hypergraph_l_p_8h_source"/>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
      </node>
      <node id="784">
        <label>assert.h</label>
      </node>
      <node id="764">
        <label>lp/HardConstraints.h</label>
        <link refid="HardConstraints.h"/>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
      </node>
      <node id="774">
        <label>string</label>
      </node>
      <node id="779">
        <label>hypergraph.pb.h</label>
      </node>
      <node id="782">
        <label>EdgeCache.h</label>
        <link refid="_edge_cache_8h_source"/>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
      </node>
      <node id="778">
        <label>HypergraphImpl.h</label>
        <link refid="_hypergraph_impl_8h_source"/>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
      </node>
      <node id="767">
        <label>Hypergraph.h</label>
        <link refid="_hypergraph_8h_source"/>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
        <childnode refid="774" relation="include">
        </childnode>
      </node>
      <node id="765">
        <label>fstream</label>
      </node>
      <node id="776">
        <label>DepParser.h</label>
        <link refid="_dep_parser_8h_source"/>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="778" relation="include">
        </childnode>
        <childnode refid="782" relation="include">
        </childnode>
      </node>
      <node id="771">
        <label>svector.hpp</label>
      </node>
      <node id="768">
        <label>Weights.h</label>
        <link refid="_weights_8h_source"/>
        <childnode refid="769" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
      </node>
      <node id="781">
        <label>../common.h</label>
      </node>
      <node id="783">
        <label>bitset</label>
      </node>
      <node id="777">
        <label>dep.pb.h</label>
      </node>
      <node id="772">
        <label>vector</label>
      </node>
      <node id="769">
        <label>iostream</label>
      </node>
      <node id="770">
        <label>cy_svector.hpp</label>
      </node>
      <node id="775">
        <label>gurobi_c++.h</label>
      </node>
      <node id="773">
        <label>set</label>
      </node>
      <node id="766">
        <label>DepParseLP.h</label>
        <link refid="_dep_parse_l_p_8h_source"/>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
      </node>
      <node id="780">
        <label>features.pb.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_possible_dep" prot="public">PossibleDep</innerclass>
    <innerclass refid="class_hard_constraints" prot="public">HardConstraints</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>HARDCONSTRAINTS_H</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HARDCONSTRAINTS_H</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DepParseLP.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="struct_possible_dep" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_possible_dep" kindref="compound">PossibleDep</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>group_name;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;int&gt;<sp/>head_inds;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sent_num;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_hard_constraints" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_hard_constraints" kindref="compound">HardConstraints</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;<sp/>vector<sp/>&lt;PossibleDep&gt;<sp/>&gt;<sp/>_constraint_struct;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;<sp/>GRBVar<sp/>&gt;<sp/>group_used;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>read_from_file(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>file_name)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_groups;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>fstream<sp/>input(file_name.c_str(),<sp/>ios::in<sp/>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>&gt;&gt;<sp/>num_groups;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>_constraint_struct.resize(num_groups);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(input)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_possible_dep" kindref="compound">PossibleDep</ref><sp/>dep;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>group,<sp/>sent_num,<sp/>ind,<sp/>len;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>&lt;int&gt;<sp/>head_inds;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//,<sp/>2<sp/>74<sp/>7<sp/>1<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>&gt;&gt;<sp/>dep.group_name<sp/>&gt;&gt;<sp/>dep.group<sp/>&gt;&gt;<sp/>dep.sent_num<sp/>&gt;&gt;<sp/>dep.ind<sp/>&gt;&gt;<sp/>len;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=0<sp/>;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_ind;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>&gt;&gt;<sp/>head_ind;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head_inds.push_back(head_ind);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dep.head_inds<sp/>=<sp/>head_inds;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_constraint_struct[dep.group].push_back(dep);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>GRBLinExpr<sp/>make_lin_expr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector<sp/>&lt;DepParserLP*&gt;<sp/>&amp;<sp/>lp_vars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_possible_dep" kindref="compound">PossibleDep</ref><sp/>&amp;<sp/>dep)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>some<sp/>of<sp/>all<sp/>the<sp/>possible<sp/>deps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>GRBLinExpr<sp/>lin;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_ind,<sp/>dep.head_inds)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>dep.sent_num<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(head_ind<sp/>==<sp/>dep.ind)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_dependency" kindref="compound">Dependency</ref><sp/>d<sp/>=<sp/>lp_vars[dep.sent_num]-&gt;p.make_dep(head_ind,<sp/>dep.ind);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>dep.sent_num<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>head_ind<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GRBVar<sp/>dep_lp_var<sp/>=<sp/>lp_vars[dep.sent_num]-&gt;dep_vars.get(d);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(GRBLinExpr)dep_lp_var<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lin<sp/>+=<sp/>dep_lp_var;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lin;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>show_results()<sp/>{<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_num=0;<sp/>group_num<sp/>&lt;<sp/>_constraint_struct.size();<sp/>group_num++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(group_used[group_num].</highlight><highlight class="keyword">get</highlight><highlight class="normal">(GRB_DoubleAttr_X))<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Used<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(GRBLinExpr)group_used[group_num]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_to_lp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector<sp/>&lt;DepParserLP<sp/>*<sp/>&gt;<sp/>&amp;<sp/>lp_vars,<sp/>GRBModel<sp/>&amp;<sp/>model)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_num=0;<sp/>group_num<sp/>&lt;<sp/>_constraint_struct.size();<sp/>group_num++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>buf;<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;group_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>group_num;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_used.push_back(model.addVar(0.0,<sp/>1.0,<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>GRB_CONTINUOUS,<sp/>buf.str()));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>model.update();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>group_num=0;<sp/>group_num<sp/>&lt;<sp/>_constraint_struct.size();<sp/>group_num++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_possible_dep" kindref="compound">PossibleDep</ref><sp/>first_pdep<sp/>=<sp/>_constraint_struct[group_num][0];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRBLinExpr<sp/>base<sp/>=<sp/>make_lin_expr(lp_vars,<sp/>first_pdep);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model.addConstr(base<sp/>==<sp/>group_used[group_num]);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="struct_possible_dep" kindref="compound">PossibleDep</ref><sp/>pdep,<sp/>_constraint_struct[group_num])<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>buf;<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;group_const_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>pdep.group_name;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model.addConstr(base<sp/>==<sp/>make_lin_expr(lp_vars,<sp/>pdep),<sp/>buf.str());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(GRBException<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>code<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.getErrorCode()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>e.getMessage()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>model.update();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/lp/HardConstraints.h"/>
  </compounddef>
</doxygen>
