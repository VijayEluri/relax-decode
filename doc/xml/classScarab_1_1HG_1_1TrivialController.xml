<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classScarab_1_1HG_1_1TrivialController" kind="class" prot="public">
    <compoundname>Scarab::HG::TrivialController</compoundname>
    <basecompoundref refid="classScarab_1_1HG_1_1Controller" prot="public" virt="non-virtual">Scarab::HG::Controller</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1a219f546e952ff25c74914ef86f4c1f4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int Scarab::HG::TrivialController::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1a3498a09d093e6c6ed993e309db51480a">size</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="103" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1abb65cff01d325ca4deca44a95ae08cc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double Scarab::HG::TrivialController::prune_to</definition>
        <argsstring>() const </argsstring>
        <name>prune_to</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1aac6cd4ffc2b70c7829c185563cbdc7ac">prune_to</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="104" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1a8592deee53061c8a720765992567f660" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int</type>
        <definition>int Scarab::HG::TrivialController::dim</definition>
        <argsstring>() const </argsstring>
        <name>dim</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1ab4282178c6b8d3670134ab0519eda518">dim</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="105" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1a2442adbb71b2da7238b6a250612af383" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double Scarab::HG::TrivialController::combine</definition>
        <argsstring>(const Hypothesis &amp;a, const Hypothesis &amp;b, Hypothesis &amp;ret) const </argsstring>
        <name>combine</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1a1f077e9104a1a0f49dd7dc19dadb63eb">combine</reimplements>
        <param>
          <type>const <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="106" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1a6fd129fe20b8fe3b3be7b4bda44a3afb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double Scarab::HG::TrivialController::combine_back</definition>
        <argsstring>(const Hypothesis &amp;a, const Hypothesis &amp;b, Hypothesis &amp;ret) const </argsstring>
        <name>combine_back</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1a3799aa438ec4fb1b1486c6fc080899eb">combine_back</reimplements>
        <param>
          <type>const <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="116" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1a9260e2100ffa5d8546ec84720f45cf81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Scarab::HG::TrivialController::initialize_out_root</definition>
        <argsstring>(vector&lt; Hypothesis * &gt; &amp;hyps, vector&lt; double &gt; &amp;scores) const </argsstring>
        <name>initialize_out_root</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1a34e4f087d77d06ee27fff2d3a8435473">initialize_out_root</reimplements>
        <param>
          <type>vector&lt; <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> * &gt; &amp;</type>
          <declname>hyps</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>scores</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="119" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1ae0fc7eac47cc9cd0a7776713775c5b6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void Scarab::HG::TrivialController::initialize_hypotheses</definition>
        <argsstring>(const Hypernode &amp;node, vector&lt; Hypothesis * &gt; &amp;hyps, vector&lt; double &gt; &amp;scores) const </argsstring>
        <name>initialize_hypotheses</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1a5019e9591e6d4e5e29eb4ca6ac42d056">initialize_hypotheses</reimplements>
        <param>
          <type>const <ref refid="classScarab_1_1HG_1_1Hypernode" kindref="compound">Hypernode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> * &gt; &amp;</type>
          <declname>hyps</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>scores</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="122" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1TrivialController_1accb9880d602ece9bfb840ee2fbb4d684" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double Scarab::HG::TrivialController::find_best</definition>
        <argsstring>(vector&lt; Hypothesis * &gt; &amp;at_root, vector&lt; double &gt; &amp;scores, Hypothesis &amp;best_hyp) const </argsstring>
        <name>find_best</name>
        <reimplements refid="classScarab_1_1HG_1_1Controller_1ac4a38bf968379d3dc3f2b95cffabf540">find_best</reimplements>
        <param>
          <type>vector&lt; <ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> * &gt; &amp;</type>
          <declname>at_root</declname>
        </param>
        <param>
          <type>vector&lt; double &gt; &amp;</type>
          <declname>scores</declname>
        </param>
        <param>
          <type><ref refid="structScarab_1_1HG_1_1Hypothesis" kindref="compound">Hypothesis</ref> &amp;</type>
          <declname>best_hyp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="130" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="130" bodyend="143"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1014">
        <label>Scarab::HG::TrivialController</label>
        <link refid="classScarab_1_1HG_1_1TrivialController"/>
        <childnode refid="1015" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1015">
        <label>Scarab::HG::Controller</label>
        <link refid="classScarab_1_1HG_1_1Controller"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1016">
        <label>Scarab::HG::TrivialController</label>
        <link refid="classScarab_1_1HG_1_1TrivialController"/>
        <childnode refid="1017" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1017">
        <label>Scarab::HG::Controller</label>
        <link refid="classScarab_1_1HG_1_1Controller"/>
      </node>
    </collaborationgraph>
    <location file="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" line="101" bodyfile="/home/srush/Projects/relax_decode/hypergraph/Hypothesis.h" bodystart="101" bodyend="144"/>
    <listofallmembers>
      <member refid="classScarab_1_1HG_1_1TrivialController_1a2442adbb71b2da7238b6a250612af383" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>combine</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1a6fd129fe20b8fe3b3be7b4bda44a3afb" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>combine_back</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1a8592deee53061c8a720765992567f660" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>dim</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1accb9880d602ece9bfb840ee2fbb4d684" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>find_best</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1ae0fc7eac47cc9cd0a7776713775c5b6c" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>initialize_hypotheses</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1a9260e2100ffa5d8546ec84720f45cf81" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>initialize_out_root</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1abb65cff01d325ca4deca44a95ae08cc5" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>prune_to</name></member>
      <member refid="classScarab_1_1HG_1_1TrivialController_1a219f546e952ff25c74914ef86f4c1f4f" prot="public" virt="virtual"><scope>Scarab::HG::TrivialController</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
