<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_tag_solvers_8cpp" kind="file">
    <compoundname>TagSolvers.cpp</compoundname>
    <includes refid="_tag_solvers_8cpp" local="yes">TagSolvers.h</includes>
    <includes refid="_tagger_8h" local="yes">Tagger.h</includes>
    <includes refid="_tag_constraints_8h" local="yes">TagConstraints.h</includes>
    <includes refid="_dual_decomposition_8h" local="yes">DualDecomposition.h</includes>
    <includes refid="_hypergraph_algorithms_8h" local="yes">HypergraphAlgorithms.h</includes>
    <includes local="no">algorithm</includes>
    <includedby refid="_tag_solvers_8cpp" local="yes">tagger/TagSolvers.cpp</includedby>
    <incdepgraph>
      <node id="1621">
        <label>Subgradient.h</label>
        <link refid="_subgradient_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
      </node>
      <node id="1593">
        <label>Tagger.h</label>
        <link refid="_tagger_8h_source"/>
        <childnode refid="1594" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
      </node>
      <node id="1611">
        <label>assert.h</label>
      </node>
      <node id="1613">
        <label>MRF.h</label>
        <link refid="_m_r_f_8h_source"/>
        <childnode refid="1614" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1615" relation="include">
        </childnode>
        <childnode refid="1616" relation="include">
        </childnode>
        <childnode refid="1617" relation="include">
        </childnode>
        <childnode refid="1605" relation="include">
        </childnode>
        <childnode refid="1618" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
      </node>
      <node id="1614">
        <label>cassert</label>
      </node>
      <node id="1604">
        <label>string</label>
      </node>
      <node id="1606">
        <label>hypergraph.pb.h</label>
      </node>
      <node id="1609">
        <label>EdgeCache.h</label>
        <link refid="_edge_cache_8h_source"/>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1610" relation="include">
        </childnode>
        <childnode refid="1611" relation="include">
        </childnode>
      </node>
      <node id="1605">
        <label>HypergraphImpl.h</label>
        <link refid="_hypergraph_impl_8h_source"/>
        <childnode refid="1596" relation="include">
        </childnode>
        <childnode refid="1606" relation="include">
        </childnode>
        <childnode refid="1607" relation="include">
        </childnode>
        <childnode refid="1597" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
      </node>
      <node id="1596">
        <label>Hypergraph.h</label>
        <link refid="_hypergraph_8h_source"/>
        <childnode refid="1597" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
      </node>
      <node id="1599">
        <label>fstream</label>
      </node>
      <node id="1615">
        <label>Graph.h</label>
        <link refid="_graph_8h_source"/>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1608" relation="include">
        </childnode>
      </node>
      <node id="1601">
        <label>svector.hpp</label>
      </node>
      <node id="1597">
        <label>Weights.h</label>
        <link refid="_weights_8h_source"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
        <childnode refid="1600" relation="include">
        </childnode>
        <childnode refid="1601" relation="include">
        </childnode>
      </node>
      <node id="1608">
        <label>../common.h</label>
      </node>
      <node id="1610">
        <label>bitset</label>
      </node>
      <node id="1594">
        <label>tag.pb.h</label>
      </node>
      <node id="1595">
        <label>dep.pb.h</label>
      </node>
      <node id="1612">
        <label>TagConstraints.h</label>
        <link refid="_tag_constraints_8h_source"/>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1599" relation="include">
        </childnode>
        <childnode refid="1602" relation="include">
        </childnode>
        <childnode refid="1604" relation="include">
        </childnode>
        <childnode refid="1603" relation="include">
        </childnode>
        <childnode refid="1597" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
        <childnode refid="1613" relation="include">
        </childnode>
        <childnode refid="1619" relation="include">
        </childnode>
      </node>
      <node id="1602">
        <label>vector</label>
      </node>
      <node id="1618">
        <label>GraphProtoInterface.h</label>
        <link refid="_graph_proto_interface_8h_source"/>
        <childnode refid="1616" relation="include">
        </childnode>
        <childnode refid="1615" relation="include">
        </childnode>
      </node>
      <node id="1620">
        <label>DualDecomposition.h</label>
        <link refid="_dual_decomposition_8h_source"/>
        <childnode refid="1598" relation="include">
        </childnode>
        <childnode refid="1621" relation="include">
        </childnode>
      </node>
      <node id="1619">
        <label>HypergraphAlgorithms.h</label>
        <link refid="_hypergraph_algorithms_8h_source"/>
        <childnode refid="1601" relation="include">
        </childnode>
        <childnode refid="1609" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1617">
        <label>mrf.pb.h</label>
      </node>
      <node id="1616">
        <label>graph.pb.h</label>
      </node>
      <node id="1598">
        <label>iostream</label>
      </node>
      <node id="1600">
        <label>cy_svector.hpp</label>
      </node>
      <node id="1592">
        <label>tagger/TagSolvers.cpp</label>
        <link refid="TagSolvers.cpp"/>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1612" relation="include">
        </childnode>
        <childnode refid="1620" relation="include">
        </childnode>
        <childnode refid="1619" relation="include">
        </childnode>
        <childnode refid="1622" relation="include">
        </childnode>
      </node>
      <node id="1603">
        <label>set</label>
      </node>
      <node id="1622">
        <label>algorithm</label>
      </node>
      <node id="1607">
        <label>features.pb.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;TagSolvers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HypergraphAlgorithms.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TaggerDual::solve(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>primal,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dual,<sp/>wvector<sp/>&amp;<sp/>subgrad,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>round)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Round<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>round;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sent_num=0;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>dual<sp/>=0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>primal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tagger" kindref="compound">Tagger</ref><sp/>*<sp/>ptagger,<sp/>_taggers)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dirty_cache[sent_num]<sp/>||<sp/>round<sp/>==<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tagger" kindref="compound">Tagger</ref><sp/>&amp;<sp/>tagger<sp/>=<sp/>*ptagger;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_scarab_1_1_h_g_1_1_hypergraph_algorithms" kindref="compound">HypergraphAlgorithms</ref><sp/>ha(tagger);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">EdgeCache</ref><sp/>*<sp/>edge_weights<sp/>=<sp/>ha.cache_edge_weights(_base_weights);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">EdgeCache</ref><sp/>added<sp/>=<sp/>_tag_constraints.<ref refid="class_tag_constraints_1adec1a1de8fb49e79b52c4c93517414a0" kindref="member">build_tagger_constraint_vector</ref>(sent_num,<sp/>tagger,<sp/>*_cur_weights)<sp/>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">EdgeCache</ref><sp/>*<sp/>final_weights<sp/>=<sp/>ha.combine_edge_weights(*edge_weights,<sp/>added);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">NodeCache</ref><sp/><sp/>score_memo_table(tagger.num_nodes());<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">NodeBackCache</ref><sp/><sp/>back_memo_table(tagger.num_nodes());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dual_cache[sent_num]<sp/>=<sp/>ha.best_path(*final_weights,<sp/>score_memo_table,<sp/>back_memo_table);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wvector<sp/>feature_vec<sp/>=<sp/>ha.construct_best_feature_vector(back_memo_table);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_primal_cache[sent_num]<sp/>=<sp/>feature_vec.dot(_base_weights);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>HEdges<sp/>best_edges<sp/>=<sp/>ha.construct_best_edges(back_memo_table);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(round<sp/>==<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>&lt;Tag&gt;<sp/>res;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_scarab_1_1_h_g_1_1_hyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>best_edges)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagger.edge_has_tag(*edge))<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_tag" kindref="compound">Tag</ref><sp/>d<sp/>=<sp/>tagger.edge_to_tag(*edge);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(d);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort(res.begin(),<sp/>res.end());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SENT:<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="struct_tag" kindref="compound">Tag</ref><sp/>d,<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>d<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_subgrad_cache[sent_num]<sp/>=<sp/>_tag_constraints.build_tagger_subgradient(sent_num,<sp/>tagger,<sp/>best_edges);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dirty_cache[sent_num]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>subgrad<sp/>+=<sp/>_subgrad_cache[sent_num];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>dual<sp/>+=<sp/>_dual_cache[sent_num];</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>primal<sp/>+=<sp/>_primal_cache[sent_num];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>sent_num++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConstrainerDual::solve(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>primal,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dual,<sp/>wvector<sp/>&amp;<sp/>subgrad,<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>round)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>wvector<sp/>weights<sp/>=<sp/><sp/>(*_cur_weights);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>subgrad<sp/>=<sp/>_tag_constraints.solve_hard(weights);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>dual<sp/>=<sp/>subgrad.dot(<sp/>(*_cur_weights));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>primal<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/tagger/TagSolvers.cpp"/>
  </compounddef>
</doxygen>
