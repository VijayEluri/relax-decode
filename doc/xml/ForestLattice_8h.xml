<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="ForestLattice_8h" kind="file">
    <compoundname>ForestLattice.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="lattice_8pb_8h" local="yes">lattice.pb.h</includes>
    <includes local="no">vector</includes>
    <includes refid="Graph_8h" local="yes">Graph.h</includes>
    <includedby refid="BigramRescore_8cpp" local="yes">lattice/BigramRescore.cpp</includedby>
    <includedby refid="BigramRescore_8h" local="yes">lattice/BigramRescore.h</includedby>
    <includedby refid="ForestLattice_8cpp" local="yes">lattice/ForestLattice.cpp</includedby>
    <includedby refid="GraphDecompose_8cpp" local="yes">lattice/GraphDecompose.cpp</includedby>
    <includedby refid="GraphDecompose_8h" local="yes">lattice/GraphDecompose.h</includedby>
    <includedby refid="lattice_2Test_8cpp" local="yes">lattice/Test.cpp</includedby>
    <includedby refid="LPBuilder_8cpp" local="yes">lp/LPBuilder.cpp</includedby>
    <includedby refid="LPBuilder_8h" local="yes">lp/LPBuilder.h</includedby>
    <includedby refid="Run_8cpp" local="yes">Run.cpp</includedby>
    <includedby refid="Decode_8cpp" local="no">trans_decode/Decode.cpp</includedby>
    <includedby refid="Decode_8h" local="no">trans_decode/Decode.h</includedby>
    <includedby refid="dual__subproblem_8h" local="yes">trans_decode/dual_subproblem.h</includedby>
    <incdepgraph>
      <node id="1007">
        <label>string</label>
      </node>
      <node id="1015">
        <label>Graph.h</label>
        <link refid="Graph_8h_source"/>
        <childnode refid="1014" relation="include">
        </childnode>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1016" relation="include">
        </childnode>
      </node>
      <node id="1010">
        <label>google/protobuf/generated_message_util.h</label>
      </node>
      <node id="1016">
        <label>../common.h</label>
      </node>
      <node id="1008">
        <label>lattice.pb.h</label>
        <link refid="lattice_8pb_8h_source"/>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="1013" relation="include">
        </childnode>
      </node>
      <node id="1009">
        <label>google/protobuf/stubs/common.h</label>
      </node>
      <node id="1014">
        <label>vector</label>
      </node>
      <node id="1006">
        <label>lattice/ForestLattice.h</label>
        <link refid="ForestLattice.h"/>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1014" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
      </node>
      <node id="1012">
        <label>google/protobuf/extension_set.h</label>
      </node>
      <node id="1011">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="1013">
        <label>google/protobuf/generated_message_reflection.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1021">
        <label>lattice/GraphDecompose.h</label>
        <link refid="GraphDecompose_8h_source"/>
        <childnode refid="1018" relation="include">
        </childnode>
        <childnode refid="1022" relation="include">
        </childnode>
        <childnode refid="1019" relation="include">
        </childnode>
      </node>
      <node id="1022">
        <label>lp/LPBuilder.h</label>
        <link refid="LPBuilder_8h_source"/>
      </node>
      <node id="1020">
        <label>trans_decode/Decode.h</label>
        <link refid="Decode_8h_source"/>
      </node>
      <node id="1018">
        <label>lattice/BigramRescore.h</label>
        <link refid="BigramRescore_8h_source"/>
        <childnode refid="1019" relation="include">
        </childnode>
      </node>
      <node id="1019">
        <label>trans_decode/dual_subproblem.h</label>
        <link refid="dual__subproblem_8h_source"/>
        <childnode refid="1020" relation="include">
        </childnode>
      </node>
      <node id="1017">
        <label>lattice/ForestLattice.h</label>
        <link refid="ForestLattice.h"/>
        <childnode refid="1018" relation="include">
        </childnode>
        <childnode refid="1021" relation="include">
        </childnode>
        <childnode refid="1022" relation="include">
        </childnode>
        <childnode refid="1020" relation="include">
        </childnode>
        <childnode refid="1019" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structBigram" prot="public">Bigram</innerclass>
    <innerclass refid="classForestLattice" prot="public">ForestLattice</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>FORESTLATTICE_H_</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FORESTLATTICE_H_</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lattice.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Graph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">lattice;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Scarab::Graph;</highlight></codeline>
<codeline lineno="14" refid="structBigram" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structBigram" kindref="compound">Bigram</ref>{<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w1;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w2;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="structBigram" kindref="compound">Bigram</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>word1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>word2):<sp/>w1(word1),<sp/>w2(word2)<sp/>{}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="structBigram" kindref="compound">Bigram</ref>(){}</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*class<sp/>LatNode<sp/>:<sp/>public<sp/>Graphnode<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>public:</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>LatNode(int<sp/>id,<sp/>vector<sp/>&lt;const<sp/>Graphedge<sp/>*&gt;<sp/>edges):_id(id),<sp/>_edges(edges){}</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>uint<sp/>id()<sp/>const<sp/><sp/>{return<sp/>_id;}</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>unsigned<sp/>int<sp/>num_edges()<sp/>const<sp/>{return<sp/>_edges.size();}</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>const<sp/>Edges<sp/>&amp;<sp/>edges()<sp/>const<sp/><sp/>{return<sp/>_edges;}</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>private:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>int<sp/>_id;</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>const<sp/>Edges<sp/>&amp;<sp/>_edges;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>};*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classForestLattice" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classForestLattice" kindref="compound">ForestLattice</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>is_node_word(int<sp/>node_num)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>word_node[node_num]<sp/>!=<sp/>-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>get_word(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>word_num)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(is_word(word_num));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_words[word_num];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classScarab_1_1Graph_1_1Graph" kindref="compound">Graph</ref><sp/>&amp;<sp/>get_graph()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_proper_graph;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref><sp/>&amp;<sp/>node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assert<sp/>(i<sp/>&lt;<sp/>num_nodes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_proper_graph-&gt;node(i);</highlight><highlight class="comment">//*_nodes[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_phrase_node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word_node[n]<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_word(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(w<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>w<sp/>&lt;<sp/>num_word_nodes);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_is_word[w];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Graph<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_nodes;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_word_nodes;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classForestLattice" kindref="compound">ForestLattice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlattice_1_1Lattice" kindref="compound">Lattice</ref><sp/>&amp;<sp/>lattice);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;vector<sp/>&lt;int&gt;<sp/>&gt;<sp/>original_edges;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;vector<sp/>&lt;int&gt;<sp/>&gt;<sp/>edges_original;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_edge(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_num)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(edge_num<sp/>&lt;<sp/>node_edges[n1]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(n1<sp/>&lt;<sp/>num_nodes);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>graph[n1][edge_num];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_edges(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assert<sp/>(n<sp/>&lt;<sp/>num_nodes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_edges[n];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lookup_word(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assert<sp/>(n<sp/>&lt;<sp/>num_nodes);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_words_lookup[w];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_edge_label(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_edge_by_nodes[n1][n2];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><sp/><ref refid="structBigram" kindref="compound">Bigram</ref><sp/>get_nodes_by_labels(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>orig_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_original_id_to_edge[orig_id];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_first_words(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(is_phrase_node(n));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_first_words[n].size();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_last_words(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(is_phrase_node(n));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_last_words[n].size();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_last_bigrams(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(is_phrase_node(n));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_last_bigrams[n].size();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_words(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(is_phrase_node(n));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_first_words[n][i];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_words(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(is_phrase_node(n));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_last_words[n][i];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structBigram" kindref="compound">Bigram</ref><sp/>last_bigrams(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(is_phrase_node(n));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_last_bigrams[n][i];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_same(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_last_same[w];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_hypergraph_node_from_word(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(is_word(w));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_lat_word_to_hyp_node[w];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_word_from_hypergraph_node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_hyp_node_to_lat_word[n];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_proper_graph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classlattice_1_1Lattice" kindref="compound">Lattice</ref><sp/>&amp;<sp/>lat);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;Bigram&gt;<sp/>&gt;<sp/>bigrams_at_node;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;string&gt;<sp/><sp/>_edge_label_by_nodes;<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classScarab_1_1Graph_1_1Graph" kindref="compound">Graph</ref><sp/>*<sp/>_proper_graph;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>word_node;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>node_edges;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>_words;<sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>_is_word;<sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>_words_lookup;<sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//vector<sp/>&lt;LatNode<sp/>*&gt;<sp/>_nodes;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;int&gt;<sp/>&gt;<sp/>graph;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;int&gt;<sp/>&gt;<sp/>_edge_by_nodes;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;int&gt;<sp/>&gt;<sp/>_first_words;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;int&gt;<sp/>&gt;<sp/>_last_words;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>vector&lt;vector&lt;Bigram&gt;<sp/>&gt;<sp/>_last_bigrams;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>_last_same;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>edge_node;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>ignore_nodes;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;Bigram&gt;<sp/><sp/>_original_id_to_edge;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;int&gt;<sp/><sp/>_lat_word_to_hyp_node;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;int&gt;<sp/><sp/>_hyp_node_to_lat_word;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/lattice/ForestLattice.h"/>
  </compounddef>
</doxygen>
