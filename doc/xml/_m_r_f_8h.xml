<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_m_r_f_8h" kind="file">
    <compoundname>MRF.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">string</includes>
    <includes refid="_graph_8h" local="no">Graph.h</includes>
    <includes local="no">graph.pb.h</includes>
    <includes local="no">mrf.pb.h</includes>
    <includes refid="_hypergraph_impl_8h" local="yes">HypergraphImpl.h</includes>
    <includes refid="_graph_proto_interface_8h" local="no">GraphProtoInterface.h</includes>
    <includes refid="_edge_cache_8h" local="yes">EdgeCache.h</includes>
    <includedby refid="_m_r_f_l_p_8cpp" local="yes">lp/MRFLP.cpp</includedby>
    <includedby refid="_m_r_f_l_p_8h" local="yes">lp/MRFLP.h</includedby>
    <includedby refid="_m_r_f_solver_8cpp" local="yes">MRFSolver.cpp</includedby>
    <includedby refid="_m_r_f_hypergraph_8cpp" local="yes">optimization/MRFHypergraph.cpp</includedby>
    <includedby refid="_m_r_f_hypergraph_8h" local="yes">optimization/MRFHypergraph.h</includedby>
    <includedby refid="_tag_constraints_8cpp" local="yes">tagger/TagConstraints.cpp</includedby>
    <includedby refid="_tag_constraints_8h" local="yes">tagger/TagConstraints.h</includedby>
    <incdepgraph>
      <node id="1136">
        <label>assert.h</label>
      </node>
      <node id="1115">
        <label>optimization/MRF.h</label>
        <link refid="MRF.h"/>
        <childnode refid="1116" relation="include">
        </childnode>
        <childnode refid="1117" relation="include">
        </childnode>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1122" relation="include">
        </childnode>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1133" relation="include">
        </childnode>
        <childnode refid="1134" relation="include">
        </childnode>
      </node>
      <node id="1116">
        <label>cassert</label>
      </node>
      <node id="1117">
        <label>string</label>
      </node>
      <node id="1131">
        <label>hypergraph.pb.h</label>
      </node>
      <node id="1134">
        <label>EdgeCache.h</label>
        <link refid="_edge_cache_8h_source"/>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1135" relation="include">
        </childnode>
        <childnode refid="1136" relation="include">
        </childnode>
      </node>
      <node id="1123">
        <label>HypergraphImpl.h</label>
        <link refid="_hypergraph_impl_8h_source"/>
        <childnode refid="1124" relation="include">
        </childnode>
        <childnode refid="1131" relation="include">
        </childnode>
        <childnode refid="1132" relation="include">
        </childnode>
        <childnode refid="1125" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1130" relation="include">
        </childnode>
      </node>
      <node id="1124">
        <label>Hypergraph.h</label>
        <link refid="_hypergraph_8h_source"/>
        <childnode refid="1125" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1130" relation="include">
        </childnode>
        <childnode refid="1117" relation="include">
        </childnode>
      </node>
      <node id="1127">
        <label>fstream</label>
      </node>
      <node id="1118">
        <label>Graph.h</label>
        <link refid="_graph_8h_source"/>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1117" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
      </node>
      <node id="1129">
        <label>svector.hpp</label>
      </node>
      <node id="1125">
        <label>Weights.h</label>
        <link refid="_weights_8h_source"/>
        <childnode refid="1126" relation="include">
        </childnode>
        <childnode refid="1127" relation="include">
        </childnode>
        <childnode refid="1128" relation="include">
        </childnode>
        <childnode refid="1129" relation="include">
        </childnode>
      </node>
      <node id="1120">
        <label>../common.h</label>
      </node>
      <node id="1135">
        <label>bitset</label>
      </node>
      <node id="1119">
        <label>vector</label>
      </node>
      <node id="1133">
        <label>GraphProtoInterface.h</label>
        <link refid="_graph_proto_interface_8h_source"/>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1118" relation="include">
        </childnode>
      </node>
      <node id="1122">
        <label>mrf.pb.h</label>
      </node>
      <node id="1121">
        <label>graph.pb.h</label>
      </node>
      <node id="1126">
        <label>iostream</label>
      </node>
      <node id="1128">
        <label>cy_svector.hpp</label>
      </node>
      <node id="1130">
        <label>set</label>
      </node>
      <node id="1132">
        <label>features.pb.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1142">
        <label>lp/HardPosConstraints.h</label>
        <link refid="_hard_pos_constraints_8h_source"/>
        <childnode refid="1142" relation="include">
        </childnode>
      </node>
      <node id="1140">
        <label>optimization/MRFHypergraph.h</label>
        <link refid="_m_r_f_hypergraph_8h_source"/>
      </node>
      <node id="1139">
        <label>lp/TagMrfLP.h</label>
        <link refid="_tag_mrf_l_p_8h_source"/>
      </node>
      <node id="1137">
        <label>optimization/MRF.h</label>
        <link refid="MRF.h"/>
        <childnode refid="1138" relation="include">
        </childnode>
        <childnode refid="1140" relation="include">
        </childnode>
        <childnode refid="1141" relation="include">
        </childnode>
      </node>
      <node id="1138">
        <label>lp/MRFLP.h</label>
        <link refid="_m_r_f_l_p_8h_source"/>
        <childnode refid="1139" relation="include">
        </childnode>
      </node>
      <node id="1141">
        <label>tagger/TagConstraints.h</label>
        <link refid="_tag_constraints_8h_source"/>
        <childnode refid="1142" relation="include">
        </childnode>
        <childnode refid="1139" relation="include">
        </childnode>
        <childnode refid="1143" relation="include">
        </childnode>
      </node>
      <node id="1143">
        <label>tagger/TagSolvers.h</label>
        <link refid="_tag_solvers_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_state" prot="public">State</innerclass>
    <innerclass refid="struct_node_assignment" prot="public">NodeAssignment</innerclass>
    <innerclass refid="class_m_r_f" prot="public">MRF</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MRF_H</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MRF_H</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Graph.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;graph.pb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mrf.pb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HypergraphImpl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GraphProtoInterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;EdgeCache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Scarab::Graph;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="15" refid="struct_state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_state" kindref="compound">State</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><ref refid="struct_state" kindref="compound">State</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="struct_state" kindref="compound">State</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>label_):_id(id_),<sp/>_label(label_)<sp/>{}<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_id;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>label()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_label;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_id<sp/>==<sp/>other._id;<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_id;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>_label;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="struct_node_assignment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_node_assignment" kindref="compound">NodeAssignment</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="struct_node_assignment" kindref="compound">NodeAssignment</ref>(){}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="struct_node_assignment" kindref="compound">NodeAssignment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_id_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>state_,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length_):<sp/>node_id(node_id_),<sp/>s(state_)<sp/>,<sp/>length(length_)<sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node_id;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>s;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.id()*<sp/>length<sp/>+<sp/>node_id;<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="class_m_r_f" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_m_r_f" kindref="compound">MRF</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_graph_proto_interface" kindref="compound">GraphProtoInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_node(graph::Graph_Node,<sp/><ref refid="class_scarab_1_1_graph_1_1_graphnode" kindref="compound">Graphnode</ref><sp/>*)<sp/>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_edge(graph::Graph_Edge,<sp/><ref refid="class_scarab_1_1_graph_1_1_graphedge" kindref="compound">Graphedge</ref><sp/>*)<sp/>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>Hypergraph*<sp/>build_hypergraph();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//void<sp/>solve(vector<sp/>&lt;double&gt;<sp/>extra_node_potentials)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_m_r_f_1a928f19f948fa97796462fd9542a985fd" kindref="member">set_up</ref>(graph::Graph<sp/>graph,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes<sp/>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edges);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>node_pot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_scarab_1_1_graph_1_1_graphnode" kindref="compound">Graphnode</ref><sp/>&amp;<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>s1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_node_potentials-&gt;get(node)-&gt;get(s1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_edge_pot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_scarab_1_1_graph_1_1_graphedge" kindref="compound">Graphedge</ref><sp/>&amp;<sp/>edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>s2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_edge_potentials-&gt;get(edge).find(pair&lt;int,int&gt;(s1.id(),s2.id()))<sp/>!=<sp/>_edge_potentials-&gt;get(edge).end();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>edge_pot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_scarab_1_1_graph_1_1_graphedge" kindref="compound">Graphedge</ref><sp/>&amp;<sp/>edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>s2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_edge_pot(edge,<sp/>s1,<sp/>s2))<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>_edge_potentials-&gt;get(edge)[pair&lt;int,int&gt;(s1.id(),s2.id())];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>const<sp/>vector&lt;State&gt;<sp/><sp/>&amp;<sp/>states()<sp/>const<sp/>{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>return<sp/>_states;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>const<sp/>double<sp/>potential(int<sp/>node1,<sp/>const<sp/>State<sp/>&amp;<sp/>s1,<sp/>int<sp/>node2,<sp/>const<sp/>State<sp/>&amp;<sp/>s2<sp/>)<sp/>const<sp/>{<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>assert<sp/>(node1<sp/>!=<sp/>node2);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>if<sp/>(s1<sp/>==<sp/>s2)<sp/>{<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/>return<sp/>_weight;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/>return<sp/>0.0;<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector<sp/>&lt;State&gt;<sp/>&amp;<sp/>states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_scarab_1_1_graph_1_1_graphnode" kindref="compound">Graphnode</ref><sp/>&amp;<sp/>node)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_node_states-&gt;get(node);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>assignments()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_num_assignments;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="struct_node_assignment" kindref="compound">NodeAssignment</ref><sp/>make_assignment(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_scarab_1_1_graph_1_1_graphnode" kindref="compound">Graphnode</ref><sp/>&amp;<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_state" kindref="compound">State</ref><sp/>&amp;<sp/>my_s)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_node_assignment" kindref="compound">NodeAssignment</ref>(n.<ref refid="class_scarab_1_1_graph_1_1_graphnode_1a74eaaed5d31a0a2c0445f3de0859148f" kindref="member">id</ref>(),<sp/>my_s,<sp/>graph().num_nodes());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="class_cache" kindref="compound">Cache &lt;Graphnode, vector &lt;State&gt;</ref><sp/>&gt;<sp/>*<sp/>_node_states;<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="class_cache" kindref="compound">Cache &lt;Graphnode, Cache &lt;State, double&gt;</ref><sp/>*<sp/>&gt;<sp/>*<sp/>_node_potentials;<sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>zero<sp/>on<sp/>any<sp/>edge<sp/>with<sp/>no<sp/>potential<sp/>(makes<sp/>things<sp/>way<sp/>faster)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="class_cache" kindref="compound">Cache &lt;Graphedge, map &lt;pair&lt;int,int&gt;</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>&gt;<sp/>*<sp/>_edge_potentials;<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_num_assignments;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>vector<sp/>&lt;Graphnode<sp/>*&gt;<sp/>nodes;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>vector<sp/>&lt;Graphedge<sp/>*&gt;<sp/>edges;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>string<sp/>_label;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>int<sp/>_size;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>vector<sp/>&lt;State&gt;<sp/>_states;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>_weight;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Graph<sp/>*<sp/><sp/>_potts_graph;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/optimization/MRF.h"/>
  </compounddef>
</doxygen>
