<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_tag_solvers_8h" kind="file">
    <compoundname>TagSolvers.h</compoundname>
    <includes refid="_tagger_8h" local="yes">Tagger.h</includes>
    <includes refid="_tag_constraints_8h" local="yes">TagConstraints.h</includes>
    <includes refid="_dual_decomposition_8h" local="yes">DualDecomposition.h</includes>
    <includedby refid="_dual_decomp_tagger_8cpp" local="yes">DualDecompTagger.cpp</includedby>
    <incdepgraph>
      <node id="1653">
        <label>Subgradient.h</label>
        <link refid="_subgradient_8h_source"/>
        <childnode refid="1633" relation="include">
        </childnode>
        <childnode refid="1634" relation="include">
        </childnode>
      </node>
      <node id="1625">
        <label>Tagger.h</label>
        <link refid="_tagger_8h_source"/>
        <childnode refid="1626" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1637" relation="include">
        </childnode>
        <childnode refid="1641" relation="include">
        </childnode>
      </node>
      <node id="1643">
        <label>assert.h</label>
      </node>
      <node id="1645">
        <label>MRF.h</label>
        <link refid="_m_r_f_8h_source"/>
        <childnode refid="1646" relation="include">
        </childnode>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1647" relation="include">
        </childnode>
        <childnode refid="1648" relation="include">
        </childnode>
        <childnode refid="1649" relation="include">
        </childnode>
        <childnode refid="1637" relation="include">
        </childnode>
        <childnode refid="1650" relation="include">
        </childnode>
        <childnode refid="1641" relation="include">
        </childnode>
      </node>
      <node id="1646">
        <label>cassert</label>
      </node>
      <node id="1636">
        <label>string</label>
      </node>
      <node id="1638">
        <label>hypergraph.pb.h</label>
      </node>
      <node id="1641">
        <label>EdgeCache.h</label>
        <link refid="_edge_cache_8h_source"/>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1642" relation="include">
        </childnode>
        <childnode refid="1643" relation="include">
        </childnode>
      </node>
      <node id="1637">
        <label>HypergraphImpl.h</label>
        <link refid="_hypergraph_impl_8h_source"/>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1638" relation="include">
        </childnode>
        <childnode refid="1639" relation="include">
        </childnode>
        <childnode refid="1629" relation="include">
        </childnode>
        <childnode refid="1640" relation="include">
        </childnode>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1635" relation="include">
        </childnode>
      </node>
      <node id="1628">
        <label>Hypergraph.h</label>
        <link refid="_hypergraph_8h_source"/>
        <childnode refid="1629" relation="include">
        </childnode>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1635" relation="include">
        </childnode>
        <childnode refid="1636" relation="include">
        </childnode>
      </node>
      <node id="1631">
        <label>fstream</label>
      </node>
      <node id="1647">
        <label>Graph.h</label>
        <link refid="_graph_8h_source"/>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1640" relation="include">
        </childnode>
      </node>
      <node id="1633">
        <label>svector.hpp</label>
      </node>
      <node id="1629">
        <label>Weights.h</label>
        <link refid="_weights_8h_source"/>
        <childnode refid="1630" relation="include">
        </childnode>
        <childnode refid="1631" relation="include">
        </childnode>
        <childnode refid="1632" relation="include">
        </childnode>
        <childnode refid="1633" relation="include">
        </childnode>
      </node>
      <node id="1640">
        <label>../common.h</label>
      </node>
      <node id="1642">
        <label>bitset</label>
      </node>
      <node id="1626">
        <label>tag.pb.h</label>
      </node>
      <node id="1627">
        <label>dep.pb.h</label>
      </node>
      <node id="1644">
        <label>TagConstraints.h</label>
        <link refid="_tag_constraints_8h_source"/>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1631" relation="include">
        </childnode>
        <childnode refid="1634" relation="include">
        </childnode>
        <childnode refid="1636" relation="include">
        </childnode>
        <childnode refid="1635" relation="include">
        </childnode>
        <childnode refid="1629" relation="include">
        </childnode>
        <childnode refid="1641" relation="include">
        </childnode>
        <childnode refid="1645" relation="include">
        </childnode>
        <childnode refid="1651" relation="include">
        </childnode>
      </node>
      <node id="1634">
        <label>vector</label>
      </node>
      <node id="1650">
        <label>GraphProtoInterface.h</label>
        <link refid="_graph_proto_interface_8h_source"/>
        <childnode refid="1648" relation="include">
        </childnode>
        <childnode refid="1647" relation="include">
        </childnode>
      </node>
      <node id="1652">
        <label>DualDecomposition.h</label>
        <link refid="_dual_decomposition_8h_source"/>
        <childnode refid="1630" relation="include">
        </childnode>
        <childnode refid="1653" relation="include">
        </childnode>
      </node>
      <node id="1651">
        <label>HypergraphAlgorithms.h</label>
        <link refid="_hypergraph_algorithms_8h_source"/>
        <childnode refid="1633" relation="include">
        </childnode>
        <childnode refid="1641" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
      </node>
      <node id="1649">
        <label>mrf.pb.h</label>
      </node>
      <node id="1648">
        <label>graph.pb.h</label>
      </node>
      <node id="1630">
        <label>iostream</label>
      </node>
      <node id="1632">
        <label>cy_svector.hpp</label>
      </node>
      <node id="1635">
        <label>set</label>
      </node>
      <node id="1639">
        <label>features.pb.h</label>
      </node>
      <node id="1624">
        <label>tagger/TagSolvers.h</label>
        <link refid="TagSolvers.h"/>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1644" relation="include">
        </childnode>
        <childnode refid="1652" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_tagger_dual" prot="public">TaggerDual</innerclass>
    <innerclass refid="class_constrainer_dual" prot="public">ConstrainerDual</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TAGSOLVERS_H</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TAGSOLVERS_H</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;Tagger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TagConstraints.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DualDecomposition.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_tagger_dual" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_tagger_dual" kindref="compound">TaggerDual</ref>:</highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_dual_decomposition_subproblem" kindref="compound">DualDecompositionSubproblem</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><ref refid="class_tagger_dual" kindref="compound">TaggerDual</ref>(vector<sp/>&lt;const<sp/>Tagger*&gt;<sp/>&amp;<sp/>taggers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wvector<sp/>&amp;<sp/>base_weights,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tag_constraints" kindref="compound">TagConstraints</ref><sp/>&amp;<sp/>cons):<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>_taggers(taggers),<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_base_weights(base_weights),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_tag_constraints(cons){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_cur_weights<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wvector();</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dirty_cache.resize(_taggers.size());</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_subgrad_cache.resize(_taggers.size());</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_dual_cache.resize(_taggers.size());</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_primal_cache.resize(_taggers.size());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>taggers.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dirty_cache[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>solve(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>primal,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dual,<sp/>wvector<sp/>&amp;,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_weights(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wvector<sp/>&amp;<sp/>updates,<sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wvector<sp/>*<sp/>weights,<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mult)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>_cur_weights<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wvector();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(wvector::const_iterator<sp/>it<sp/>=<sp/>weights-&gt;begin();<sp/>it<sp/>!=<sp/>weights-&gt;end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*_cur_weights)[it-&gt;first]<sp/>=<sp/>mult<sp/>*<sp/>it-&gt;second;<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirtied<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(wvector::const_iterator<sp/>it<sp/>=<sp/>updates.begin();<sp/>it<sp/>!=<sp/>updates.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sent=<sp/>_tag_constraints._all_constraints[it-&gt;first<sp/>/<sp/>Tag::MAX_TAG].sent_num;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dirty_cache[sent]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtied<sp/>++;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dirtied:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dirtied<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector<sp/>&lt;const<sp/>Tagger*&gt;<sp/>&amp;<sp/>_taggers;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wvector<sp/>&amp;<sp/>_base_weights;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tag_constraints" kindref="compound">TagConstraints</ref><sp/>&amp;<sp/>_tag_constraints;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>wvector<sp/>*<sp/>_cur_weights;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;wvector&gt;<sp/>_subgrad_cache;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;double&gt;<sp/>_primal_cache;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;double&gt;<sp/>_dual_cache;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;bool&gt;<sp/>_dirty_cache;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="class_constrainer_dual" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_constrainer_dual" kindref="compound">ConstrainerDual</ref>:</highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_dual_decomposition_subproblem" kindref="compound">DualDecompositionSubproblem</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="class_constrainer_dual" kindref="compound">ConstrainerDual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tag_constraints" kindref="compound">TagConstraints</ref><sp/>&amp;<sp/>cons):<sp/>_tag_constraints(cons){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>_cur_weights<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wvector();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>solve(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>primal,<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dual,<sp/>wvector<sp/>&amp;,<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update_weights(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wvector<sp/>&amp;<sp/>updates,<sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wvector<sp/>*<sp/>weights,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mult)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>_cur_weights<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wvector();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(wvector::const_iterator<sp/>it<sp/>=<sp/>weights-&gt;begin();<sp/>it<sp/>!=<sp/>weights-&gt;end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*_cur_weights)[it-&gt;first]<sp/>=<sp/>mult*it-&gt;second;<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_tag_constraints" kindref="compound">TagConstraints</ref><sp/>&amp;<sp/>_tag_constraints;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>wvector<sp/>*<sp/>_cur_weights;<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/tagger/TagSolvers.h"/>
  </compounddef>
</doxygen>
