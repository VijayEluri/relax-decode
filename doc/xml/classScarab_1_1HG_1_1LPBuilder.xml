<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classScarab_1_1HG_1_1LPBuilder" kind="class" prot="public">
    <compoundname>Scarab::HG::LPBuilder</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classScarab_1_1HG_1_1LPBuilder_1a68630566ebae8ce1290d776c516af921" prot="private" static="no" mutable="no">
        <type>const <ref refid="classScarab_1_1HG_1_1HGraph" kindref="compound">HGraph</ref> &amp;</type>
        <definition>const HGraph&amp; Scarab::HG::LPBuilder::_forest</definition>
        <argsstring></argsstring>
        <name>_forest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="31" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classScarab_1_1HG_1_1LPBuilder_1aa20707efb33f700f132bd3b95c2628de" prot="private" static="no" mutable="no">
        <type>const <ref refid="classForestLattice" kindref="compound">ForestLattice</ref> &amp;</type>
        <definition>const ForestLattice&amp; Scarab::HG::LPBuilder::_lattice</definition>
        <argsstring></argsstring>
        <name>_lattice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="42" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classScarab_1_1HG_1_1LPBuilder_1ab70efc367cb2c3d849adf4211f8fdc69" prot="private" static="no" mutable="no">
        <type>GRBModel *</type>
        <definition>GRBModel* Scarab::HG::LPBuilder::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="43" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1aba798e4d3faf87e8411607f9d974fc7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Scarab::HG::LPBuilder::LPBuilder</definition>
        <argsstring>(const HGraph &amp;forest, const ForestLattice &amp;lat)</argsstring>
        <name>LPBuilder</name>
        <param>
          <type>const <ref refid="classScarab_1_1HG_1_1HGraph" kindref="compound">HGraph</ref> &amp;</type>
          <declname>forest</declname>
        </param>
        <param>
          <type>const <ref refid="classForestLattice" kindref="compound">ForestLattice</ref> &amp;</type>
          <declname>lat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="22" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1abfa755f4c94dc432c022be35861a8200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Scarab::HG::LPBuilder::solve_hypergraph</definition>
        <argsstring>(const Cache&lt; Hyperedge, double &gt; &amp;)</argsstring>
        <name>solve_hypergraph</name>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1HG_1_1Hyperedge" kindref="compound">Hyperedge</ref>, double &gt; &amp;</type>
          <defname>_weights</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="26" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="680" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1a963bdf9c956b4a08d52be06e1cb6a05a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Scarab::HG::LPBuilder::solve_full</definition>
        <argsstring>(int run_num, const Cache&lt; Hyperedge, double &gt; &amp;_weights, Ngram &amp;lm, const Cache&lt; Graphnode, int &gt; &amp;word_cache)</argsstring>
        <name>solve_full</name>
        <param>
          <type>int</type>
          <declname>run_num</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1HG_1_1Hyperedge" kindref="compound">Hyperedge</ref>, double &gt; &amp;</type>
          <declname>_weights</declname>
        </param>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="28" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="718" bodyend="869"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1a841a904ccea6c2f47378c40282ede6aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Scarab::HG::LPBuilder::build_hypergraph_lp</definition>
        <argsstring>(vector&lt; GRBVar &gt; &amp;node_vars, vector&lt; GRBVar &gt; &amp;edge_vars, const Cache&lt; Hyperedge, double &gt; &amp;_weights)</argsstring>
        <name>build_hypergraph_lp</name>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>node_vars</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>edge_vars</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1HG_1_1Hyperedge" kindref="compound">Hyperedge</ref>, double &gt; &amp;</type>
          <declname>_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="32" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="610" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1a916878e956c20d5e0825eab7c2fb9fee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Scarab::HG::LPBuilder::build_all_pairs_lp</definition>
        <argsstring>(Ngram &amp;lm, const Cache&lt; Graphnode, int &gt; &amp;word_cache, vector&lt; GRBVar &gt; &amp;word_used_vars, vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;word_tri_vars, LatticeVars &amp;lv, const GraphDecompose &amp;gd)</argsstring>
        <name>build_all_pairs_lp</name>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>word_used_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <param>
          <type><ref refid="structScarab_1_1HG_1_1LatticeVars" kindref="compound">LatticeVars</ref> &amp;</type>
          <declname>lv</declname>
        </param>
        <param>
          <type>const <ref refid="classGraphDecompose" kindref="compound">GraphDecompose</ref> &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="40" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="203" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1afbd378a6325405e0b58d4915433e85ef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Scarab::HG::LPBuilder::initialize_word_pairs</definition>
        <argsstring>(Ngram &amp;lm, const Cache&lt; Graphnode, int &gt; &amp;word_cache, const GraphDecompose &amp;gd, vector&lt; GRBVar &gt; &amp;word_used_vars, vector&lt; vector&lt; GRBVar &gt; &gt; &amp;word_tri_vars, vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;)</argsstring>
        <name>initialize_word_pairs</name>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <param>
          <type>const <ref refid="classGraphDecompose" kindref="compound">GraphDecompose</ref> &amp;</type>
          <declname>gd</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>word_used_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; GRBVar &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;</type>
          <defname>word_tri_vars</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="49" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="151" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classScarab_1_1HG_1_1LPBuilder_1a7dbaeac7b1c30959c8942ab63f435f14" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Scarab::HG::LPBuilder::build_all_tri_pairs_lp</definition>
        <argsstring>(Ngram &amp;lm, const Cache&lt; Graphnode, int &gt; &amp;word_cache, vector&lt; GRBVar &gt; &amp;word_used_vars, vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;word_tri_vars, LatticeVars &amp;lv, LatticeVars &amp;lv2, const GraphDecompose &amp;gd)</argsstring>
        <name>build_all_tri_pairs_lp</name>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classScarab_1_1Graph_1_1Graphnode" kindref="compound">Graphnode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>word_used_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <param>
          <type><ref refid="structScarab_1_1HG_1_1LatticeVars" kindref="compound">LatticeVars</ref> &amp;</type>
          <declname>lv</declname>
        </param>
        <param>
          <type><ref refid="structScarab_1_1HG_1_1LatticeVars" kindref="compound">LatticeVars</ref> &amp;</type>
          <declname>lv2</declname>
        </param>
        <param>
          <type>const <ref refid="classGraphDecompose" kindref="compound">GraphDecompose</ref> &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="56" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="368" bodyend="607"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="944">
        <label>T</label>
      </node>
      <node id="939">
        <label>Scarab::Graph::Graphedge</label>
        <link refid="classScarab_1_1Graph_1_1Graphedge"/>
        <childnode refid="940" relation="usage">
          <edgelabel>_to_node</edgelabel>
          <edgelabel>_from_node</edgelabel>
        </childnode>
      </node>
      <node id="934">
        <label>std::vector&lt; Bigram &gt;</label>
        <childnode refid="935" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="943">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="944" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="932">
        <label>ForestLattice</label>
        <link refid="classForestLattice"/>
        <childnode refid="933" relation="usage">
          <edgelabel>bigrams_at_node</edgelabel>
          <edgelabel>_last_bigrams</edgelabel>
        </childnode>
        <childnode refid="936" relation="usage">
          <edgelabel>_last_words</edgelabel>
          <edgelabel>graph</edgelabel>
          <edgelabel>_first_words</edgelabel>
          <edgelabel>edges_original</edgelabel>
          <edgelabel>_edge_by_nodes</edgelabel>
          <edgelabel>original_edges</edgelabel>
        </childnode>
        <childnode refid="937" relation="usage">
          <edgelabel>_proper_graph</edgelabel>
        </childnode>
        <childnode refid="945" relation="usage">
          <edgelabel>_words</edgelabel>
          <edgelabel>_edge_label_by_nodes</edgelabel>
        </childnode>
        <childnode refid="946" relation="usage">
          <edgelabel>_last_same</edgelabel>
          <edgelabel>_hyp_node_to_lat_word</edgelabel>
          <edgelabel>_words_lookup</edgelabel>
          <edgelabel>word_node</edgelabel>
          <edgelabel>ignore_nodes</edgelabel>
          <edgelabel>edge_node</edgelabel>
          <edgelabel>_is_word</edgelabel>
          <edgelabel>node_edges</edgelabel>
          <edgelabel>_lat_word_to_hyp_node</edgelabel>
          <edgelabel>final</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="934" relation="usage">
          <edgelabel>_original_id_to_edge</edgelabel>
        </childnode>
      </node>
      <node id="945">
        <label>std::vector&lt; string &gt;</label>
        <childnode refid="941" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="935">
        <label>Bigram</label>
        <link refid="structBigram"/>
      </node>
      <node id="940">
        <label>Scarab::Graph::Graphnode</label>
        <link refid="classScarab_1_1Graph_1_1Graphnode"/>
        <childnode refid="938" relation="usage">
          <edgelabel>_in_edges</edgelabel>
          <edgelabel>_edges</edgelabel>
        </childnode>
        <childnode refid="941" relation="usage">
          <edgelabel>_label</edgelabel>
        </childnode>
      </node>
      <node id="942">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="933">
        <label>std::vector&lt; vector&lt; Bigram &gt; &gt;</label>
        <childnode refid="934" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="936">
        <label>std::vector&lt; vector&lt; int &gt; &gt;</label>
      </node>
      <node id="947">
        <label>Scarab::HG::HGraph</label>
        <link refid="classScarab_1_1HG_1_1HGraph"/>
      </node>
      <node id="938">
        <label>std::vector&lt; const Graphedge * &gt;</label>
        <childnode refid="939" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="937">
        <label>Scarab::Graph::Graph</label>
        <link refid="classScarab_1_1Graph_1_1Graph"/>
        <childnode refid="938" relation="usage">
          <edgelabel>_edges</edgelabel>
        </childnode>
        <childnode refid="943" relation="usage">
          <edgelabel>_nodes</edgelabel>
        </childnode>
      </node>
      <node id="931">
        <label>Scarab::HG::LPBuilder</label>
        <link refid="classScarab_1_1HG_1_1LPBuilder"/>
        <childnode refid="932" relation="usage">
          <edgelabel>_lattice</edgelabel>
        </childnode>
        <childnode refid="947" relation="usage">
          <edgelabel>_forest</edgelabel>
        </childnode>
      </node>
      <node id="946">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="941">
        <label>std::string</label>
        <childnode refid="942" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="18" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="18" bodyend="58"/>
    <listofallmembers>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1a68630566ebae8ce1290d776c516af921" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>_forest</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1aa20707efb33f700f132bd3b95c2628de" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>_lattice</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1a916878e956c20d5e0825eab7c2fb9fee" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>build_all_pairs_lp</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1a7dbaeac7b1c30959c8942ab63f435f14" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>build_all_tri_pairs_lp</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1a841a904ccea6c2f47378c40282ede6aa" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>build_hypergraph_lp</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1afbd378a6325405e0b58d4915433e85ef" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>initialize_word_pairs</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1aba798e4d3faf87e8411607f9d974fc7f" prot="public" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>LPBuilder</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1ab70efc367cb2c3d849adf4211f8fdc69" prot="private" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>model</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1a963bdf9c956b4a08d52be06e1cb6a05a" prot="public" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>solve_full</name></member>
      <member refid="classScarab_1_1HG_1_1LPBuilder_1abfa755f4c94dc432c022be35861a8200" prot="public" virt="non-virtual"><scope>Scarab::HG::LPBuilder</scope><name>solve_hypergraph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
