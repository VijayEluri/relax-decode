<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classLPBuilder" kind="class" prot="public">
    <compoundname>LPBuilder</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLPBuilder_1a385cdf0fefa6e21a95fd68af10f43935" prot="private" static="no" mutable="no">
        <type>const <ref refid="classForest" kindref="compound">Forest</ref> &amp;</type>
        <definition>const Forest&amp; LPBuilder::_forest</definition>
        <argsstring></argsstring>
        <name>_forest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="28" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLPBuilder_1acbe1fe3d6a16da11fab622087a308b37" prot="private" static="no" mutable="no">
        <type>const <ref refid="classForestLattice" kindref="compound">ForestLattice</ref> &amp;</type>
        <definition>const ForestLattice&amp; LPBuilder::_lattice</definition>
        <argsstring></argsstring>
        <name>_lattice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="39" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLPBuilder_1a8545d4df56b4fa4ac3f1198f80398c76" prot="private" static="no" mutable="no">
        <type>GRBModel *</type>
        <definition>GRBModel* LPBuilder::model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="40" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classLPBuilder_1a6fc749a0e23ad5ebe94e23d12b2888e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LPBuilder::LPBuilder</definition>
        <argsstring>(const Forest &amp;forest, const ForestLattice &amp;lat)</argsstring>
        <name>LPBuilder</name>
        <param>
          <type>const <ref refid="classForest" kindref="compound">Forest</ref> &amp;</type>
          <declname>forest</declname>
        </param>
        <param>
          <type>const <ref refid="classForestLattice" kindref="compound">ForestLattice</ref> &amp;</type>
          <declname>lat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="19" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classLPBuilder_1a35d81f0ae30bcb7b28c3ff134052f146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LPBuilder::solve_hypergraph</definition>
        <argsstring>(const Cache&lt; ForestEdge, double &gt; &amp;)</argsstring>
        <name>solve_hypergraph</name>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classForestEdge" kindref="compound">ForestEdge</ref>, double &gt; &amp;</type>
          <defname>_weights</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="23" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="679" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classLPBuilder_1a4d3daca6b7e154293be44d0f5f514832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LPBuilder::solve_full</definition>
        <argsstring>(int run_num, const Cache&lt; ForestEdge, double &gt; &amp;_weights, Ngram &amp;lm, const Cache&lt; LatNode, int &gt; &amp;word_cache)</argsstring>
        <name>solve_full</name>
        <param>
          <type>int</type>
          <declname>run_num</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classForestEdge" kindref="compound">ForestEdge</ref>, double &gt; &amp;</type>
          <declname>_weights</declname>
        </param>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classLatNode" kindref="compound">LatNode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="25" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="717" bodyend="868"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classLPBuilder_1a7d4011ad30ce2d471f0dd4fceed8e5a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LPBuilder::build_hypergraph_lp</definition>
        <argsstring>(vector&lt; GRBVar &gt; &amp;node_vars, vector&lt; GRBVar &gt; &amp;edge_vars, const Cache&lt; ForestEdge, double &gt; &amp;_weights)</argsstring>
        <name>build_hypergraph_lp</name>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>node_vars</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>edge_vars</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classForestEdge" kindref="compound">ForestEdge</ref>, double &gt; &amp;</type>
          <declname>_weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="29" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="609" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classLPBuilder_1a14c5081a6cf533585fa0583653b8aa24" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LPBuilder::build_all_pairs_lp</definition>
        <argsstring>(Ngram &amp;lm, const Cache&lt; LatNode, int &gt; &amp;word_cache, vector&lt; GRBVar &gt; &amp;word_used_vars, vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;word_tri_vars, LatticeVars &amp;lv, const GraphDecompose &amp;gd)</argsstring>
        <name>build_all_pairs_lp</name>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classLatNode" kindref="compound">LatNode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>word_used_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <param>
          <type><ref refid="structLatticeVars" kindref="compound">LatticeVars</ref> &amp;</type>
          <declname>lv</declname>
        </param>
        <param>
          <type>const <ref refid="classGraphDecompose" kindref="compound">GraphDecompose</ref> &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="37" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="202" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classLPBuilder_1a37f159606b4d5088c5ba52d9bdf61002" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LPBuilder::initialize_word_pairs</definition>
        <argsstring>(Ngram &amp;lm, const Cache&lt; LatNode, int &gt; &amp;word_cache, const GraphDecompose &amp;gd, vector&lt; GRBVar &gt; &amp;word_used_vars, vector&lt; vector&lt; GRBVar &gt; &gt; &amp;word_tri_vars, vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;word_tri_vars)</argsstring>
        <name>initialize_word_pairs</name>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classLatNode" kindref="compound">LatNode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <param>
          <type>const <ref refid="classGraphDecompose" kindref="compound">GraphDecompose</ref> &amp;</type>
          <declname>gd</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>word_used_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; GRBVar &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="46" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="150" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classLPBuilder_1a821f0f98608ff5f23d1f65d063e05def" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LPBuilder::build_all_tri_pairs_lp</definition>
        <argsstring>(Ngram &amp;lm, const Cache&lt; LatNode, int &gt; &amp;word_cache, vector&lt; GRBVar &gt; &amp;word_used_vars, vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;word_tri_vars, LatticeVars &amp;lv, LatticeVars &amp;lv2, const GraphDecompose &amp;gd)</argsstring>
        <name>build_all_tri_pairs_lp</name>
        <param>
          <type>Ngram &amp;</type>
          <declname>lm</declname>
        </param>
        <param>
          <type>const <ref refid="classCache" kindref="compound">Cache</ref>&lt; <ref refid="classLatNode" kindref="compound">LatNode</ref>, int &gt; &amp;</type>
          <declname>word_cache</declname>
        </param>
        <param>
          <type>vector&lt; GRBVar &gt; &amp;</type>
          <declname>word_used_vars</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; vector&lt; GRBVar &gt; &gt; &gt; &amp;</type>
          <declname>word_tri_vars</declname>
        </param>
        <param>
          <type><ref refid="structLatticeVars" kindref="compound">LatticeVars</ref> &amp;</type>
          <declname>lv</declname>
        </param>
        <param>
          <type><ref refid="structLatticeVars" kindref="compound">LatticeVars</ref> &amp;</type>
          <declname>lv2</declname>
        </param>
        <param>
          <type>const <ref refid="classGraphDecompose" kindref="compound">GraphDecompose</ref> &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="53" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.cpp" bodystart="367" bodyend="606"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="749">
        <label>std::vector&lt; LatNode * &gt;</label>
        <childnode refid="750" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="762">
        <label>std::map&lt; int, double &gt;</label>
      </node>
      <node id="757">
        <label>std::vector&lt; Scarab::HG::Hyperedge * &gt;</label>
        <childnode refid="758" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="743">
        <label>LPBuilder</label>
        <link refid="classLPBuilder"/>
        <childnode refid="744" relation="usage">
          <edgelabel>_lattice</edgelabel>
        </childnode>
        <childnode refid="755" relation="usage">
          <edgelabel>_forest</edgelabel>
        </childnode>
      </node>
      <node id="758">
        <label>Scarab::HG::Hyperedge</label>
        <link refid="classScarab_1_1HG_1_1Hyperedge"/>
      </node>
      <node id="746">
        <label>std::vector&lt; Bigram &gt;</label>
        <childnode refid="747" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="744">
        <label>ForestLattice</label>
        <link refid="classForestLattice"/>
        <childnode refid="745" relation="usage">
          <edgelabel>bigrams_at_node</edgelabel>
          <edgelabel>_last_bigrams</edgelabel>
        </childnode>
        <childnode refid="748" relation="usage">
          <edgelabel>_last_words</edgelabel>
          <edgelabel>graph</edgelabel>
          <edgelabel>_first_words</edgelabel>
          <edgelabel>edges_original</edgelabel>
          <edgelabel>_edge_by_nodes</edgelabel>
          <edgelabel>original_edges</edgelabel>
        </childnode>
        <childnode refid="749" relation="usage">
          <edgelabel>_nodes</edgelabel>
        </childnode>
        <childnode refid="751" relation="usage">
          <edgelabel>_words</edgelabel>
          <edgelabel>_edge_label_by_nodes</edgelabel>
        </childnode>
        <childnode refid="754" relation="usage">
          <edgelabel>_last_same</edgelabel>
          <edgelabel>_hyp_node_to_lat_word</edgelabel>
          <edgelabel>_words_lookup</edgelabel>
          <edgelabel>word_node</edgelabel>
          <edgelabel>ignore_nodes</edgelabel>
          <edgelabel>edge_node</edgelabel>
          <edgelabel>_is_word</edgelabel>
          <edgelabel>node_edges</edgelabel>
          <edgelabel>_lat_word_to_hyp_node</edgelabel>
          <edgelabel>final</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="746" relation="usage">
          <edgelabel>_original_id_to_edge</edgelabel>
        </childnode>
      </node>
      <node id="760">
        <label>Scarab::HG::Hypernode</label>
        <link refid="classScarab_1_1HG_1_1Hypernode"/>
      </node>
      <node id="751">
        <label>std::vector&lt; string &gt;</label>
        <childnode refid="752" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="750">
        <label>LatNode</label>
        <link refid="classLatNode"/>
      </node>
      <node id="747">
        <label>Bigram</label>
        <link refid="structBigram"/>
      </node>
      <node id="761">
        <label>svector&lt; int, double &gt;</label>
        <link refid="classsvector"/>
        <childnode refid="762" relation="usage">
          <edgelabel>m</edgelabel>
        </childnode>
      </node>
      <node id="753">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="756">
        <label>Scarab::HG::Hypergraph</label>
        <link refid="classScarab_1_1HG_1_1Hypergraph"/>
      </node>
      <node id="745">
        <label>std::vector&lt; vector&lt; Bigram &gt; &gt;</label>
        <childnode refid="746" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="748">
        <label>std::vector&lt; vector&lt; int &gt; &gt;</label>
      </node>
      <node id="755">
        <label>Forest</label>
        <link refid="classForest"/>
        <childnode refid="756" relation="public-inheritance">
        </childnode>
        <childnode refid="757" relation="usage">
          <edgelabel>_edges</edgelabel>
        </childnode>
        <childnode refid="759" relation="usage">
          <edgelabel>_root</edgelabel>
        </childnode>
        <childnode refid="763" relation="usage">
          <edgelabel>_nodes</edgelabel>
        </childnode>
      </node>
      <node id="759">
        <label>ForestNode</label>
        <link refid="classForestNode"/>
        <childnode refid="760" relation="public-inheritance">
        </childnode>
        <childnode refid="757" relation="usage">
          <edgelabel>_in_edges</edgelabel>
          <edgelabel>_edges</edgelabel>
        </childnode>
        <childnode refid="752" relation="usage">
          <edgelabel>_label</edgelabel>
          <edgelabel>_word</edgelabel>
        </childnode>
        <childnode refid="761" relation="usage">
          <edgelabel>_features</edgelabel>
        </childnode>
      </node>
      <node id="763">
        <label>std::vector&lt; Scarab::HG::Hypernode * &gt;</label>
        <childnode refid="760" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="754">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="752">
        <label>std::string</label>
        <childnode refid="753" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/srush/Projects/relax_decode/lp/LPBuilder.h" line="15" bodyfile="/home/srush/Projects/relax_decode/lp/LPBuilder.h" bodystart="15" bodyend="55"/>
    <listofallmembers>
      <member refid="classLPBuilder_1a385cdf0fefa6e21a95fd68af10f43935" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>_forest</name></member>
      <member refid="classLPBuilder_1acbe1fe3d6a16da11fab622087a308b37" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>_lattice</name></member>
      <member refid="classLPBuilder_1a14c5081a6cf533585fa0583653b8aa24" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>build_all_pairs_lp</name></member>
      <member refid="classLPBuilder_1a821f0f98608ff5f23d1f65d063e05def" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>build_all_tri_pairs_lp</name></member>
      <member refid="classLPBuilder_1a7d4011ad30ce2d471f0dd4fceed8e5a7" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>build_hypergraph_lp</name></member>
      <member refid="classLPBuilder_1a37f159606b4d5088c5ba52d9bdf61002" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>initialize_word_pairs</name></member>
      <member refid="classLPBuilder_1a6fc749a0e23ad5ebe94e23d12b2888e3" prot="public" virt="non-virtual"><scope>LPBuilder</scope><name>LPBuilder</name></member>
      <member refid="classLPBuilder_1a8545d4df56b4fa4ac3f1198f80398c76" prot="private" virt="non-virtual"><scope>LPBuilder</scope><name>model</name></member>
      <member refid="classLPBuilder_1a4d3daca6b7e154293be44d0f5f514832" prot="public" virt="non-virtual"><scope>LPBuilder</scope><name>solve_full</name></member>
      <member refid="classLPBuilder_1a35d81f0ae30bcb7b28c3ff134052f146" prot="public" virt="non-virtual"><scope>LPBuilder</scope><name>solve_hypergraph</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
