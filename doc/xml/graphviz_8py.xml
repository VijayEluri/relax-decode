<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="graphviz_8py" kind="file">
    <compoundname>graphviz.py</compoundname>
    <innernamespace refid="namespacegraphviz">graphviz</innernamespace>
    <innernamespace refid="namespacepygraphviz">pygraphviz</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys,os</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pygraphviz<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="normal">sys.path.append(</highlight><highlight class="stringliteral">&quot;../gen-py/&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>graph_pb2<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>mrf_pb2<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">make_graph(lattice):</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>G=AGraph(strict=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,directed=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#G.graph_attr[&apos;rankdir&apos;]=&apos;LR&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>G.graph_attr[</highlight><highlight class="stringliteral">&apos;label&apos;</highlight><highlight class="normal">]=lattice.label.encode(</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>total<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>edge_count<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lattice.node:</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>G.add_node(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n.id))</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>G.get_node(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n.id))</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>node.attr[</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Red&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>np<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>n.Extensions[mrf_node].node_potentials:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>n.Extensions[has_phrases]:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>node.attr[&quot;color&quot;]<sp/>=<sp/>&quot;Green&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>print<sp/>n.id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>for<sp/>p<sp/>in<sp/>n.Extensions[phraselets].phraselet:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>for<sp/>w<sp/>in<sp/>p.word:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>print<sp/>w.word,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>print<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>node.attr[</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">]<sp/>=<sp/>n.label.encode(</highlight><highlight class="stringliteral">&quot;UTF-8&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>n.edge:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>G.add_edge(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n.id),<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(e.to_node))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>G.get_edge(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(n.id),<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(e.to_node))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge.attr[</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">]<sp/>=<sp/>str(unicode(e.label.encode(</highlight><highlight class="stringliteral">&apos;UTF-8&apos;</highlight><highlight class="normal">),<sp/>errors=</highlight><highlight class="stringliteral">&quot;ignore&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_count<sp/>+=1<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ep<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>e.Extensions[mrf_edge].edge_potentials:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>ep</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Num<sp/>Nodes&quot;</highlight><highlight class="normal">,<sp/>len(lattice.node)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Num<sp/>Edges&quot;</highlight><highlight class="normal">,<sp/>edge_count</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>total</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>G.draw(</highlight><highlight class="stringliteral">&quot;/tmp/mrf.ps&quot;</highlight><highlight class="normal">,<sp/>prog=</highlight><highlight class="stringliteral">&quot;dot&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>lat<sp/>=<sp/>Graph()<sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>open(sys.argv[1],<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>lat.ParseFromString(f.read())</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>make_graph(lat)</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/interfaces/graph/util/graphviz.py"/>
  </compounddef>
</doxygen>
