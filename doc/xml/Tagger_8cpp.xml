<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="Tagger_8cpp" kind="file">
    <compoundname>Tagger.cpp</compoundname>
    <includes refid="Tagger_8cpp" local="yes">Tagger.h</includes>
    <includes refid="gen__cpp_2tag_8pb_8h" local="yes">tag.pb.h</includes>
    <includes refid="gen__cpp_2dep_8pb_8h" local="yes">dep.pb.h</includes>
    <includes refid="Hypergraph_8h" local="yes">Hypergraph.h</includes>
    <includes refid="HypergraphImpl_8h" local="yes">HypergraphImpl.h</includes>
    <includes refid="EdgeCache_8h" local="yes">EdgeCache.h</includes>
    <includedby refid="Tagger_8cpp" local="yes">tagger/Tagger.cpp</includedby>
    <incdepgraph>
      <node id="2065">
        <label>assert.h</label>
      </node>
      <node id="2061">
        <label>features.pb.h</label>
        <link refid="gen__cpp_2features_8pb_8h_source"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2050" relation="include">
        </childnode>
      </node>
      <node id="2044">
        <label>string</label>
      </node>
      <node id="2063">
        <label>EdgeCache.h</label>
        <link refid="EdgeCache_8h_source"/>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2064" relation="include">
        </childnode>
        <childnode refid="2065" relation="include">
        </childnode>
      </node>
      <node id="2060">
        <label>HypergraphImpl.h</label>
        <link refid="HypergraphImpl_8h_source"/>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2050" relation="include">
        </childnode>
        <childnode refid="2061" relation="include">
        </childnode>
        <childnode refid="2053" relation="include">
        </childnode>
        <childnode refid="2062" relation="include">
        </childnode>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
      </node>
      <node id="2052">
        <label>Hypergraph.h</label>
        <link refid="Hypergraph_8h_source"/>
        <childnode refid="2053" relation="include">
        </childnode>
        <childnode refid="2058" relation="include">
        </childnode>
        <childnode refid="2059" relation="include">
        </childnode>
        <childnode refid="2044" relation="include">
        </childnode>
      </node>
      <node id="2055">
        <label>fstream</label>
      </node>
      <node id="2050">
        <label>hypergraph.pb.h</label>
        <link refid="gen__cpp_2hypergraph_8pb_8h_source"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
      </node>
      <node id="2057">
        <label>svector.hpp</label>
      </node>
      <node id="2053">
        <label>Weights.h</label>
        <link refid="Weights_8h_source"/>
        <childnode refid="2054" relation="include">
        </childnode>
        <childnode refid="2055" relation="include">
        </childnode>
        <childnode refid="2056" relation="include">
        </childnode>
        <childnode refid="2057" relation="include">
        </childnode>
      </node>
      <node id="2046">
        <label>google/protobuf/generated_message_util.h</label>
      </node>
      <node id="2062">
        <label>../common.h</label>
      </node>
      <node id="2064">
        <label>bitset</label>
      </node>
      <node id="2045">
        <label>google/protobuf/stubs/common.h</label>
      </node>
      <node id="2058">
        <label>vector</label>
      </node>
      <node id="2048">
        <label>google/protobuf/extension_set.h</label>
      </node>
      <node id="2047">
        <label>google/protobuf/repeated_field.h</label>
      </node>
      <node id="2054">
        <label>iostream</label>
      </node>
      <node id="2056">
        <label>cy_svector.hpp</label>
      </node>
      <node id="2042">
        <label>tagger/Tagger.cpp</label>
        <link refid="Tagger.cpp"/>
        <childnode refid="2043" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
        <childnode refid="2052" relation="include">
        </childnode>
        <childnode refid="2060" relation="include">
        </childnode>
        <childnode refid="2063" relation="include">
        </childnode>
      </node>
      <node id="2059">
        <label>set</label>
      </node>
      <node id="2051">
        <label>dep.pb.h</label>
        <link refid="gen__cpp_2dep_8pb_8h_source"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2051" relation="include">
        </childnode>
      </node>
      <node id="2043">
        <label>tag.pb.h</label>
        <link refid="gen__cpp_2tag_8pb_8h_source"/>
        <childnode refid="2044" relation="include">
        </childnode>
        <childnode refid="2045" relation="include">
        </childnode>
        <childnode refid="2046" relation="include">
        </childnode>
        <childnode refid="2047" relation="include">
        </childnode>
        <childnode refid="2048" relation="include">
        </childnode>
        <childnode refid="2049" relation="include">
        </childnode>
        <childnode refid="2050" relation="include">
        </childnode>
      </node>
      <node id="2049">
        <label>google/protobuf/generated_message_reflection.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="Tagger_8cpp_1ac8d7a94cec49acc520abce7cc51f01c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;output, const Tag &amp;h)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="structTag" kindref="compound">Tag</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/tagger/Tagger.cpp" line="3" bodyfile="/home/srush/Projects/relax_decode/tagger/Tagger.cpp" bodystart="3" bodyend="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Tagger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">ostream&amp;<sp/>operator&lt;&lt;(ostream&amp;<sp/>output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structTag" kindref="compound">Tag</ref>&amp;<sp/>h)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/>output<sp/>&lt;&lt;<sp/>h.ind<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>h.tag;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="6"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tagger::set_up(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph" kindref="compound">Hypergraph</ref><sp/>&amp;<sp/>hgraph)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_sent_length<sp/>=<sp/>hgraph.GetExtension(len)<sp/>+<sp/>1;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>_sent_length<sp/>=<sp/>150;<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;len<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/><sp/>_sent_length<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>_sent_length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t=0;<sp/>t<sp/>&lt;<sp/>num_tag;<sp/>t++)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTag" kindref="compound">Tag</ref><sp/>tag<sp/>=<sp/>make_tag(i,<sp/>t);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_tags.push_back(tag);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_size<sp/>=<sp/>max(tag.id(),<sp/>id_size<sp/>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>edge_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>hgraph.node_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph__Node" kindref="compound">Hypergraph_Node</ref><sp/>&amp;<sp/>node<sp/>=<sp/>hgraph.node(i);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>node.edge_size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph__Edge" kindref="compound">Hypergraph_Edge</ref>&amp;<sp/>edge<sp/>=<sp/>node.edge(j);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_count++;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>_tag_length<sp/>=<sp/>id_size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>_tag_map<sp/>=<sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCache" kindref="compound">Cache &lt;Hyperedge, Tag&gt;</ref>(edge_count);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>_edge_map<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCache" kindref="compound">Cache &lt;Tag, vector&lt;const Hyperedge *&gt;</ref><sp/>&gt;(_tag_length);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Tagger::make_edge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHypergraph__Edge" kindref="compound">Hypergraph_Edge</ref><sp/>&amp;<sp/>edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classScarab_1_1HG_1_1Hyperedge" kindref="compound">Scarab::HG::Hyperedge</ref><sp/>*<sp/>our_edge)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;Make<sp/>Edge&quot;<sp/>&lt;&lt;<sp/>edge.HasExtension(has_dep)<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>edge.GetExtension(has_tagging))<sp/>{<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTagging" kindref="compound">Tagging</ref><sp/>&amp;<sp/>ret_tag<sp/>=<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge.GetExtension(tagging);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTag" kindref="compound">Tag</ref><sp/>our_tag<sp/>=<sp/>make_tag(ret_tag.ind(),<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret_tag.tag_id());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>our_tag<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>_tag_map-&gt;set_value(*our_edge,<sp/>our_tag);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>_edge_map-&gt;get_no_check(our_tag).push_back(our_edge);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/tagger/Tagger.cpp"/>
  </compounddef>
</doxygen>
