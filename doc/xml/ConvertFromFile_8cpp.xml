<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="ConvertFromFile_8cpp" kind="file">
    <compoundname>ConvertFromFile.cpp</compoundname>
    <includes refid="Weights_8h" local="yes">Weights.h</includes>
    <includes refid="Tagger_8h" local="yes">Tagger.h</includes>
    <includes refid="HypergraphAlgorithms_8h" local="no">HypergraphAlgorithms.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includes local="yes">hypergraph.pb.h</includes>
    <includes local="yes">features.pb.h</includes>
    <includes local="yes">tag.pb.h</includes>
    <includes local="yes">dep.pb.h</includes>
    <includes local="no">google/protobuf/io/coded_stream.h</includes>
    <incdepgraph>
      <node id="316">
        <label>iomanip</label>
      </node>
      <node id="301">
        <label>Tagger.h</label>
        <link refid="Tagger_8h_source"/>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>assert.h</label>
      </node>
      <node id="307">
        <label>string</label>
      </node>
      <node id="318">
        <label>google/protobuf/io/coded_stream.h</label>
      </node>
      <node id="309">
        <label>hypergraph.pb.h</label>
      </node>
      <node id="312">
        <label>EdgeCache.h</label>
        <link refid="EdgeCache_8h_source"/>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>HypergraphImpl.h</label>
        <link refid="HypergraphImpl_8h_source"/>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="304">
        <label>Hypergraph.h</label>
        <link refid="Hypergraph_8h_source"/>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>fstream</label>
      </node>
      <node id="300">
        <label>svector.hpp</label>
      </node>
      <node id="296">
        <label>Weights.h</label>
        <link refid="Weights_8h_source"/>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>../common.h</label>
      </node>
      <node id="313">
        <label>bitset</label>
      </node>
      <node id="302">
        <label>tag.pb.h</label>
      </node>
      <node id="295">
        <label>hypergraph/ConvertFromFile.cpp</label>
        <link refid="ConvertFromFile.cpp"/>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="303">
        <label>dep.pb.h</label>
      </node>
      <node id="305">
        <label>vector</label>
      </node>
      <node id="315">
        <label>HypergraphAlgorithms.h</label>
        <link refid="HypergraphAlgorithms_8h_source"/>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>iostream</label>
      </node>
      <node id="299">
        <label>cy_svector.hpp</label>
      </node>
      <node id="306">
        <label>set</label>
      </node>
      <node id="317">
        <label>algorithm</label>
      </node>
      <node id="310">
        <label>features.pb.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacegoogle_1_1protobuf_1_1io">google::protobuf::io</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="ConvertFromFile_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/hypergraph/ConvertFromFile.cpp" line="19" bodyfile="/home/srush/Projects/relax_decode/hypergraph/ConvertFromFile.cpp" bodystart="19" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Weights.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Tagger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;HypergraphAlgorithms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hypergraph.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;features.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tag.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dep.pb.h&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;google/protobuf/io/coded_stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">google::protobuf::io;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>GOOGLE_PROTOBUF_VERIFY_VERSION;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>root<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/home/srush/Projects/relax_decode/data_management/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sent<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_node<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>argv[1];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//open(<sp/>name<sp/>,<sp/>&quot;w&quot;).close()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>Hypergraph<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>vector<sp/>&lt;Hypergraph_Node<sp/>*&gt;<sp/>nodes(10);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur_edge_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>fstream<sp/>in(argv[2],<sp/>ios::in<sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>Hypergraph_Node<sp/>*<sp/>node;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>Hypergraph_Edge<sp/>*<sp/>edge;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//CodedOutputStream::SetTotalBytesLimit(5000000000,<sp/>5000000000);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(in)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>blank;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>blank<sp/>&gt;&gt;<sp/>t1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//t<sp/>=<sp/>l.strip().split();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;START&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Hypergraph();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_edge_id<sp/>=<sp/>0<sp/>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sent<sp/>+=1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes.clear();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;END&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;set_root(<sp/>last_node);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//print<sp/>&quot;ROOT<sp/>NODE&quot;,<sp/>last_node;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>file_name;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>sent;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fstream<sp/>output(file_name.str().c_str(),<sp/>ios::out<sp/>|<sp/>ios::binary);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;writing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;SerializeToOstream(&amp;output);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.close();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t1<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;EDGE&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to_id,<sp/>from_id;<sp/></highlight><highlight class="comment">//<sp/>=<sp/>int(t[4]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cost;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>label;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>label<sp/>&gt;&gt;<sp/>from_id<sp/>&gt;&gt;<sp/>to_id<sp/>&gt;&gt;<sp/>cost;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;edge<sp/>&quot;<sp/>&lt;&lt;label<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>from_id<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>to_id<sp/>&lt;&lt;<sp/>endl;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge<sp/>=<sp/>nodes[from_id]-&gt;add_edge();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>fv;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fv<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cost;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge-&gt;SetExtension(edge_fv,<sp/><sp/>fv.str());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge-&gt;add_tail_node_ids(<sp/>to_id);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge-&gt;set_label(label);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge-&gt;set_id(<sp/>cur_edge_id);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_edge_id<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NODE&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>h-&gt;add_node();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>t3;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>t2<sp/>&gt;&gt;<sp/>t3;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;node<sp/>&quot;<sp/>&lt;&lt;t2<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>t3<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;set_id(t2);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;set_label(t3);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodes.size()&lt;=node-&gt;id())<sp/>{<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes.resize(node-&gt;id()+1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nodes[t2]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_node<sp/>=<sp/>node-&gt;id();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>google::protobuf::ShutdownProtobufLibrary();</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/hypergraph/ConvertFromFile.cpp"/>
  </compounddef>
</doxygen>
