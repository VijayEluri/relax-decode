<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="_tag_8cpp" kind="file">
    <compoundname>Tag.cpp</compoundname>
    <includes refid="_weights_8h" local="yes">Weights.h</includes>
    <includes refid="_tagger_8h" local="yes">Tagger.h</includes>
    <includes refid="_hypergraph_algorithms_8h" local="no">HypergraphAlgorithms.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">algorithm</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes local="no">boost/program_options.hpp</includes>
    <incdepgraph>
      <node id="1482">
        <label>iomanip</label>
      </node>
      <node id="1467">
        <label>Tagger.h</label>
        <link refid="_tagger_8h_source"/>
        <childnode refid="1468" relation="include">
        </childnode>
        <childnode refid="1469" relation="include">
        </childnode>
        <childnode refid="1470" relation="include">
        </childnode>
        <childnode refid="1474" relation="include">
        </childnode>
        <childnode refid="1478" relation="include">
        </childnode>
      </node>
      <node id="1480">
        <label>assert.h</label>
      </node>
      <node id="1484">
        <label>common.h</label>
        <link refid="common_8h_source"/>
        <childnode refid="1485" relation="include">
        </childnode>
      </node>
      <node id="1485">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="1473">
        <label>string</label>
      </node>
      <node id="1475">
        <label>hypergraph.pb.h</label>
      </node>
      <node id="1478">
        <label>EdgeCache.h</label>
        <link refid="_edge_cache_8h_source"/>
        <childnode refid="1471" relation="include">
        </childnode>
        <childnode refid="1479" relation="include">
        </childnode>
        <childnode refid="1480" relation="include">
        </childnode>
      </node>
      <node id="1474">
        <label>HypergraphImpl.h</label>
        <link refid="_hypergraph_impl_8h_source"/>
        <childnode refid="1470" relation="include">
        </childnode>
        <childnode refid="1475" relation="include">
        </childnode>
        <childnode refid="1476" relation="include">
        </childnode>
        <childnode refid="1462" relation="include">
        </childnode>
        <childnode refid="1477" relation="include">
        </childnode>
        <childnode refid="1471" relation="include">
        </childnode>
        <childnode refid="1472" relation="include">
        </childnode>
      </node>
      <node id="1470">
        <label>Hypergraph.h</label>
        <link refid="_hypergraph_8h_source"/>
        <childnode refid="1462" relation="include">
        </childnode>
        <childnode refid="1471" relation="include">
        </childnode>
        <childnode refid="1472" relation="include">
        </childnode>
        <childnode refid="1473" relation="include">
        </childnode>
      </node>
      <node id="1464">
        <label>fstream</label>
      </node>
      <node id="1486">
        <label>boost/program_options.hpp</label>
      </node>
      <node id="1466">
        <label>svector.hpp</label>
      </node>
      <node id="1462">
        <label>Weights.h</label>
        <link refid="_weights_8h_source"/>
        <childnode refid="1463" relation="include">
        </childnode>
        <childnode refid="1464" relation="include">
        </childnode>
        <childnode refid="1465" relation="include">
        </childnode>
        <childnode refid="1466" relation="include">
        </childnode>
      </node>
      <node id="1477">
        <label>../common.h</label>
      </node>
      <node id="1479">
        <label>bitset</label>
      </node>
      <node id="1468">
        <label>tag.pb.h</label>
      </node>
      <node id="1469">
        <label>dep.pb.h</label>
      </node>
      <node id="1471">
        <label>vector</label>
      </node>
      <node id="1481">
        <label>HypergraphAlgorithms.h</label>
        <link refid="_hypergraph_algorithms_8h_source"/>
        <childnode refid="1466" relation="include">
        </childnode>
        <childnode refid="1478" relation="include">
        </childnode>
        <childnode refid="1470" relation="include">
        </childnode>
      </node>
      <node id="1463">
        <label>iostream</label>
      </node>
      <node id="1465">
        <label>cy_svector.hpp</label>
      </node>
      <node id="1472">
        <label>set</label>
      </node>
      <node id="1483">
        <label>algorithm</label>
      </node>
      <node id="1476">
        <label>features.pb.h</label>
      </node>
      <node id="1461">
        <label>Tag.cpp</label>
        <link refid="Tag.cpp"/>
        <childnode refid="1462" relation="include">
        </childnode>
        <childnode refid="1467" relation="include">
        </childnode>
        <childnode refid="1481" relation="include">
        </childnode>
        <childnode refid="1463" relation="include">
        </childnode>
        <childnode refid="1482" relation="include">
        </childnode>
        <childnode refid="1483" relation="include">
        </childnode>
        <childnode refid="1484" relation="include">
        </childnode>
        <childnode refid="1486" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_tag_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srush/Projects/relax_decode/Tag.cpp" line="17" bodyfile="/home/srush/Projects/relax_decode/Tag.cpp" bodystart="17" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Weights.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Tagger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;HypergraphAlgorithms.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/program_options.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Scarab::HG;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">po<sp/>=<sp/>boost::program_options;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>GOOGLE_PROTOBUF_VERIFY_VERSION;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>wvector<sp/>*<sp/>weight<sp/>=<sp/>load_weights_from_file(<sp/>argv[1]);<sp/></highlight><highlight class="comment">//vm[&quot;weights&quot;].as&lt;<sp/>string<sp/>&gt;().c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_score<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=atoi(argv[3]);<sp/>i<sp/>&lt;=<sp/>atoi(argv[4]);<sp/>i++)<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>fname;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>fname<sp/>&lt;&lt;<sp/>argv[2]<sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_tagger" kindref="compound">Tagger</ref><sp/>f(150);</highlight><highlight class="comment">//<sp/>=<sp/>new<sp/>DepParser();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>f.build_from_file(fname.str().c_str());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>lp<sp/>=<sp/>(int)atoi(argv[3]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_scarab_1_1_h_g_1_1_hypergraph_algorithms" kindref="compound">HypergraphAlgorithms</ref><sp/>ha(f);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">EdgeCache</ref><sp/>*<sp/>edge_weights<sp/>=<sp/>ha.cache_edge_weights(*weight);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;START!!!!&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">NodeCache</ref><sp/><sp/>score_memo_table(f.num_nodes());<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_cache" kindref="compound">NodeBackCache</ref><sp/><sp/>back_memo_table(f.num_nodes());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>score<sp/>=<sp/>ha.best_path(<sp/>*edge_weights,<sp/>score_memo_table,<sp/>back_memo_table);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>HNodes<sp/>best_nodes<sp/>=<sp/>ha.construct_best_node_order(back_memo_table);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>HEdges<sp/>best_edges<sp/>=<sp/>ha.construct_best_edges(back_memo_table);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>vector<sp/>&lt;Tag&gt;<sp/>res;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="class_scarab_1_1_h_g_1_1_hyperedge" kindref="compound">HEdge</ref><sp/>edge,<sp/>best_edges)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f.edge_has_tag(*edge))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_tag" kindref="compound">Tag</ref><sp/>d<sp/>=<sp/>f.edge_to_tag(*edge);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.push_back(d);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(res.begin(),<sp/>res.end());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SENT:<sp/>&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(<ref refid="struct_tag" kindref="compound">Tag</ref><sp/>d,<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>d<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//foreach<sp/>(HNode<sp/>node,<sp/>best_nodes)<sp/>{<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>((ForestNode<sp/>*)node)-&gt;_label<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//b}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Score<sp/>is<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>-score<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>total_score<sp/>+=<sp/>score;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>Score<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>-total_score<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>google::protobuf::ShutdownProtobufLibrary();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srush/Projects/relax_decode/Tag.cpp"/>
  </compounddef>
</doxygen>
