// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace graph {

namespace {

const ::google::protobuf::Descriptor* Graph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Graph_Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Graph_Edge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_graph_2eproto() {
  protobuf_AddDesc_graph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graph.proto");
  GOOGLE_CHECK(file != NULL);
  Graph_descriptor_ = file->message_type(0);
  static const int Graph_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, node_),
  };
  Graph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Graph_descriptor_,
      Graph::default_instance_,
      Graph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Graph));
  Graph_Node_descriptor_ = Graph_descriptor_->nested_type(0);
  static const int Graph_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Node, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Node, edge_),
  };
  Graph_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Graph_Node_descriptor_,
      Graph_Node::default_instance_,
      Graph_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Node, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Node, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Graph_Node));
  Graph_Edge_descriptor_ = Graph_descriptor_->nested_type(1);
  static const int Graph_Edge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Edge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Edge, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Edge, to_node_),
  };
  Graph_Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Graph_Edge_descriptor_,
      Graph_Edge::default_instance_,
      Graph_Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Edge, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Graph_Edge, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Graph_Edge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Graph_descriptor_, &Graph::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Graph_Node_descriptor_, &Graph_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Graph_Edge_descriptor_, &Graph_Edge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graph_2eproto() {
  delete Graph::default_instance_;
  delete Graph_reflection_;
  delete Graph_Node::default_instance_;
  delete Graph_Node_reflection_;
  delete Graph_Edge::default_instance_;
  delete Graph_Edge_reflection_;
}

void protobuf_AddDesc_graph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013graph.proto\022\005graph\"\312\001\n\005Graph\022\r\n\005label\030"
    "\005 \001(\t\022\037\n\004node\030\006 \003(\0132\021.graph.Graph.Node\032I"
    "\n\004Node\022\n\n\002id\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\022\037\n\004edg"
    "e\030\003 \003(\0132\021.graph.Graph.Edge*\005\010d\020\310\001\0329\n\004Edg"
    "e\022\n\n\002id\030\001 \001(\005\022\r\n\005label\030\002 \001(\t\022\017\n\007to_node\030"
    "\003 \002(\005*\005\010d\020\310\001*\004\010\001\020\005*\005\010d\020\310\001", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graph.proto", &protobuf_RegisterTypes);
  Graph::default_instance_ = new Graph();
  Graph_Node::default_instance_ = new Graph_Node();
  Graph_Edge::default_instance_ = new Graph_Edge();
  Graph::default_instance_->InitAsDefaultInstance();
  Graph_Node::default_instance_->InitAsDefaultInstance();
  Graph_Edge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graph_2eproto {
  StaticDescriptorInitializer_graph_2eproto() {
    protobuf_AddDesc_graph_2eproto();
  }
} static_descriptor_initializer_graph_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Graph_Node::kIdFieldNumber;
const int Graph_Node::kLabelFieldNumber;
const int Graph_Node::kEdgeFieldNumber;
#endif  // !_MSC_VER

Graph_Node::Graph_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Graph_Node::InitAsDefaultInstance() {
}

Graph_Node::Graph_Node(const Graph_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Graph_Node::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Graph_Node::~Graph_Node() {
  SharedDtor();
}

void Graph_Node::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Graph_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_Node_descriptor_;
}

const Graph_Node& Graph_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2eproto();  return *default_instance_;
}

Graph_Node* Graph_Node::default_instance_ = NULL;

Graph_Node* Graph_Node::New() const {
  return new Graph_Node;
}

void Graph_Node::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Graph_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        break;
      }
      
      // repeated .graph.Graph.Edge edge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Graph_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated .graph.Graph.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Graph_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated .graph.Graph.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edge(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Graph_Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated .graph.Graph.Edge edge = 3;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Graph_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Graph_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph_Node::MergeFrom(const Graph_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  edge_.MergeFrom(from.edge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Graph_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph_Node::CopyFrom(const Graph_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Graph_Node::Swap(Graph_Node* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    edge_.Swap(&other->edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Graph_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_Node_descriptor_;
  metadata.reflection = Graph_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Graph_Edge::kIdFieldNumber;
const int Graph_Edge::kLabelFieldNumber;
const int Graph_Edge::kToNodeFieldNumber;
#endif  // !_MSC_VER

Graph_Edge::Graph_Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Graph_Edge::InitAsDefaultInstance() {
}

Graph_Edge::Graph_Edge(const Graph_Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Graph_Edge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_node_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Graph_Edge::~Graph_Edge() {
  SharedDtor();
}

void Graph_Edge::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Graph_Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph_Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_Edge_descriptor_;
}

const Graph_Edge& Graph_Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2eproto();  return *default_instance_;
}

Graph_Edge* Graph_Edge::default_instance_ = NULL;

Graph_Edge* Graph_Edge::New() const {
  return new Graph_Edge;
}

void Graph_Edge::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    to_node_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Graph_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_node;
        break;
      }
      
      // required int32 to_node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_node_)));
          set_has_to_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Graph_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // required int32 to_node = 3;
  if (has_to_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to_node(), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Graph_Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // required int32 to_node = 3;
  if (has_to_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to_node(), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Graph_Edge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required int32 to_node = 3;
    if (has_to_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_node());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph_Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Graph_Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Graph_Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph_Edge::MergeFrom(const Graph_Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_to_node()) {
      set_to_node(from.to_node());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Graph_Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph_Edge::CopyFrom(const Graph_Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph_Edge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Graph_Edge::Swap(Graph_Edge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(to_node_, other->to_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Graph_Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_Edge_descriptor_;
  metadata.reflection = Graph_Edge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Graph::kLabelFieldNumber;
const int Graph::kNodeFieldNumber;
#endif  // !_MSC_VER

Graph::Graph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Graph::InitAsDefaultInstance() {
}

Graph::Graph(const Graph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Graph::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Graph::~Graph() {
  SharedDtor();
}

void Graph::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Graph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Graph_descriptor_;
}

const Graph& Graph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_graph_2eproto();  return *default_instance_;
}

Graph* Graph::default_instance_ = NULL;

Graph* Graph::New() const {
  return new Graph;
}

void Graph::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_node;
        break;
      }
      
      // repeated .graph.Graph.Node node = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8u <= tag && tag < 40u) ||
            (800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 5)
  _extensions_.SerializeWithCachedSizes(
      1, 5, output);
  
  // optional string label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->label(), output);
  }
  
  // repeated .graph.Graph.Node node = 6;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->node(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Graph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [1, 5)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 5, target);
  
  // optional string label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->label(), target);
  }
  
  // repeated .graph.Graph.Node node = 6;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->node(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Graph::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated .graph.Graph.Node node = 6;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Graph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Graph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Graph::Swap(Graph* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Graph_descriptor_;
  metadata.reflection = Graph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

// @@protoc_insertion_point(global_scope)
