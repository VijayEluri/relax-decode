// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef PROTOBUF_graph_2eproto__INCLUDED
#define PROTOBUF_graph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace graph {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_graph_2eproto();
void protobuf_AssignDesc_graph_2eproto();
void protobuf_ShutdownFile_graph_2eproto();

class Graph;
class Graph_Node;
class Graph_Edge;

// ===================================================================

class Graph_Node : public ::google::protobuf::Message {
 public:
  Graph_Node();
  virtual ~Graph_Node();
  
  Graph_Node(const Graph_Node& from);
  
  inline Graph_Node& operator=(const Graph_Node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Graph_Node& default_instance();
  
  void Swap(Graph_Node* other);
  
  // implements Message ----------------------------------------------
  
  Graph_Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graph_Node& from);
  void MergeFrom(const Graph_Node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  
  // repeated .graph.Graph.Edge edge = 3;
  inline int edge_size() const;
  inline void clear_edge();
  static const int kEdgeFieldNumber = 3;
  inline const ::graph::Graph_Edge& edge(int index) const;
  inline ::graph::Graph_Edge* mutable_edge(int index);
  inline ::graph::Graph_Edge* add_edge();
  inline const ::google::protobuf::RepeatedPtrField< ::graph::Graph_Edge >&
      edge() const;
  inline ::google::protobuf::RepeatedPtrField< ::graph::Graph_Edge >*
      mutable_edge();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Graph_Node)
  // @@protoc_insertion_point(class_scope:graph.Graph.Node)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_label();
  inline void clear_has_label();
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* label_;
  ::google::protobuf::RepeatedPtrField< ::graph::Graph_Edge > edge_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_graph_2eproto();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();
  
  void InitAsDefaultInstance();
  static Graph_Node* default_instance_;
};
// -------------------------------------------------------------------

class Graph_Edge : public ::google::protobuf::Message {
 public:
  Graph_Edge();
  virtual ~Graph_Edge();
  
  Graph_Edge(const Graph_Edge& from);
  
  inline Graph_Edge& operator=(const Graph_Edge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Graph_Edge& default_instance();
  
  void Swap(Graph_Edge* other);
  
  // implements Message ----------------------------------------------
  
  Graph_Edge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graph_Edge& from);
  void MergeFrom(const Graph_Edge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  
  // required int32 to_node = 3;
  inline bool has_to_node() const;
  inline void clear_to_node();
  static const int kToNodeFieldNumber = 3;
  inline ::google::protobuf::int32 to_node() const;
  inline void set_to_node(::google::protobuf::int32 value);
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Graph_Edge)
  // @@protoc_insertion_point(class_scope:graph.Graph.Edge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_to_node();
  inline void clear_has_to_node();
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* label_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 to_node_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_graph_2eproto();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();
  
  void InitAsDefaultInstance();
  static Graph_Edge* default_instance_;
};
// -------------------------------------------------------------------

class Graph : public ::google::protobuf::Message {
 public:
  Graph();
  virtual ~Graph();
  
  Graph(const Graph& from);
  
  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Graph& default_instance();
  
  void Swap(Graph* other);
  
  // implements Message ----------------------------------------------
  
  Graph* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Graph_Node Node;
  typedef Graph_Edge Edge;
  
  // accessors -------------------------------------------------------
  
  // optional string label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  
  // repeated .graph.Graph.Node node = 6;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 6;
  inline const ::graph::Graph_Node& node(int index) const;
  inline ::graph::Graph_Node* mutable_node(int index);
  inline ::graph::Graph_Node* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::graph::Graph_Node >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::graph::Graph_Node >*
      mutable_node();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Graph)
  // @@protoc_insertion_point(class_scope:graph.Graph)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* label_;
  ::google::protobuf::RepeatedPtrField< ::graph::Graph_Node > node_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_graph_2eproto();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();
  
  void InitAsDefaultInstance();
  static Graph* default_instance_;
};
// ===================================================================


// ===================================================================

// Graph_Node

// required int32 id = 1;
inline bool Graph_Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Graph_Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Graph_Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Graph_Node::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Graph_Node::id() const {
  return id_;
}
inline void Graph_Node::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string label = 2;
inline bool Graph_Node::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Graph_Node::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Graph_Node::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Graph_Node::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Graph_Node::label() const {
  return *label_;
}
inline void Graph_Node::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Graph_Node::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Graph_Node::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Graph_Node::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Graph_Node::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .graph.Graph.Edge edge = 3;
inline int Graph_Node::edge_size() const {
  return edge_.size();
}
inline void Graph_Node::clear_edge() {
  edge_.Clear();
}
inline const ::graph::Graph_Edge& Graph_Node::edge(int index) const {
  return edge_.Get(index);
}
inline ::graph::Graph_Edge* Graph_Node::mutable_edge(int index) {
  return edge_.Mutable(index);
}
inline ::graph::Graph_Edge* Graph_Node::add_edge() {
  return edge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::graph::Graph_Edge >&
Graph_Node::edge() const {
  return edge_;
}
inline ::google::protobuf::RepeatedPtrField< ::graph::Graph_Edge >*
Graph_Node::mutable_edge() {
  return &edge_;
}

// -------------------------------------------------------------------

// Graph_Edge

// optional int32 id = 1;
inline bool Graph_Edge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Graph_Edge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Graph_Edge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Graph_Edge::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Graph_Edge::id() const {
  return id_;
}
inline void Graph_Edge::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string label = 2;
inline bool Graph_Edge::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Graph_Edge::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Graph_Edge::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Graph_Edge::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Graph_Edge::label() const {
  return *label_;
}
inline void Graph_Edge::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Graph_Edge::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Graph_Edge::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Graph_Edge::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Graph_Edge::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 to_node = 3;
inline bool Graph_Edge::has_to_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Graph_Edge::set_has_to_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Graph_Edge::clear_has_to_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Graph_Edge::clear_to_node() {
  to_node_ = 0;
  clear_has_to_node();
}
inline ::google::protobuf::int32 Graph_Edge::to_node() const {
  return to_node_;
}
inline void Graph_Edge::set_to_node(::google::protobuf::int32 value) {
  set_has_to_node();
  to_node_ = value;
}

// -------------------------------------------------------------------

// Graph

// optional string label = 5;
inline bool Graph::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Graph::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Graph::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Graph::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Graph::label() const {
  return *label_;
}
inline void Graph::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Graph::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Graph::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Graph::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Graph::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .graph.Graph.Node node = 6;
inline int Graph::node_size() const {
  return node_.size();
}
inline void Graph::clear_node() {
  node_.Clear();
}
inline const ::graph::Graph_Node& Graph::node(int index) const {
  return node_.Get(index);
}
inline ::graph::Graph_Node* Graph::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::graph::Graph_Node* Graph::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::graph::Graph_Node >&
Graph::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::graph::Graph_Node >*
Graph::mutable_node() {
  return &node_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graph_2eproto__INCLUDED
