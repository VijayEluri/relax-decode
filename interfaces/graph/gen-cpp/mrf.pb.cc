// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mrf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace graph {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStatePotential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStatePotential_reflection_ = NULL;
const ::google::protobuf::Descriptor* EdgeStatePotential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeStatePotential_reflection_ = NULL;
const ::google::protobuf::Descriptor* MRFNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRFNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* MRFEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MRFEdge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mrf_2eproto() {
  protobuf_AddDesc_mrf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mrf.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, label_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
  NodeStatePotential_descriptor_ = file->message_type(1);
  static const int NodeStatePotential_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatePotential, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatePotential, node_potential_),
  };
  NodeStatePotential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStatePotential_descriptor_,
      NodeStatePotential::default_instance_,
      NodeStatePotential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatePotential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatePotential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStatePotential));
  EdgeStatePotential_descriptor_ = file->message_type(2);
  static const int EdgeStatePotential_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeStatePotential, from_state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeStatePotential, to_state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeStatePotential, edge_potential_),
  };
  EdgeStatePotential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeStatePotential_descriptor_,
      EdgeStatePotential::default_instance_,
      EdgeStatePotential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeStatePotential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeStatePotential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeStatePotential));
  MRFNode_descriptor_ = file->message_type(3);
  static const int MRFNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRFNode, node_potentials_),
  };
  MRFNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MRFNode_descriptor_,
      MRFNode::default_instance_,
      MRFNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRFNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRFNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MRFNode));
  MRFEdge_descriptor_ = file->message_type(4);
  static const int MRFEdge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRFEdge, edge_potentials_),
  };
  MRFEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MRFEdge_descriptor_,
      MRFEdge::default_instance_,
      MRFEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRFEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MRFEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MRFEdge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mrf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStatePotential_descriptor_, &NodeStatePotential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeStatePotential_descriptor_, &EdgeStatePotential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MRFNode_descriptor_, &MRFNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MRFEdge_descriptor_, &MRFEdge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mrf_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
  delete NodeStatePotential::default_instance_;
  delete NodeStatePotential_reflection_;
  delete EdgeStatePotential::default_instance_;
  delete EdgeStatePotential_reflection_;
  delete MRFNode::default_instance_;
  delete MRFNode_reflection_;
  delete MRFEdge::default_instance_;
  delete MRFEdge_reflection_;
}

void protobuf_AddDesc_mrf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::graph::protobuf_AddDesc_graph_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmrf.proto\022\005graph\032\013graph.proto\"\"\n\005State"
    "\022\n\n\002id\030\001 \002(\005\022\r\n\005label\030\002 \001(\t\"I\n\022NodeState"
    "Potential\022\033\n\005state\030\001 \002(\0132\014.graph.State\022\026"
    "\n\016node_potential\030\002 \002(\002\"X\n\022EdgeStatePoten"
    "tial\022\025\n\rfrom_state_id\030\001 \002(\005\022\023\n\013to_state_"
    "id\030\002 \002(\005\022\026\n\016edge_potential\030\003 \002(\002\"=\n\007MRFN"
    "ode\0222\n\017node_potentials\030\001 \003(\0132\031.graph.Nod"
    "eStatePotential\"=\n\007MRFEdge\0222\n\017edge_poten"
    "tials\030\001 \003(\0132\031.graph.EdgeStatePotential:4"
    "\n\010mrf_node\022\021.graph.Graph.Node\030\226\001 \001(\0132\016.g"
    "raph.MRFNode:4\n\010mrf_edge\022\021.graph.Graph.E"
    "dge\030\226\001 \001(\0132\016.graph.MRFEdge", 466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mrf.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  NodeStatePotential::default_instance_ = new NodeStatePotential();
  EdgeStatePotential::default_instance_ = new EdgeStatePotential();
  MRFNode::default_instance_ = new MRFNode();
  MRFEdge::default_instance_ = new MRFEdge();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::graph::Graph_Node::default_instance(),
    150, 11, false, false,
    &::graph::MRFNode::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::graph::Graph_Edge::default_instance(),
    150, 11, false, false,
    &::graph::MRFEdge::default_instance());
  State::default_instance_->InitAsDefaultInstance();
  NodeStatePotential::default_instance_->InitAsDefaultInstance();
  EdgeStatePotential::default_instance_->InitAsDefaultInstance();
  MRFNode::default_instance_->InitAsDefaultInstance();
  MRFEdge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mrf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mrf_2eproto {
  StaticDescriptorInitializer_mrf_2eproto() {
    protobuf_AddDesc_mrf_2eproto();
  }
} static_descriptor_initializer_mrf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int State::kIdFieldNumber;
const int State::kLabelFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrf_2eproto();  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStatePotential::kStateFieldNumber;
const int NodeStatePotential::kNodePotentialFieldNumber;
#endif  // !_MSC_VER

NodeStatePotential::NodeStatePotential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeStatePotential::InitAsDefaultInstance() {
  state_ = const_cast< ::graph::State*>(&::graph::State::default_instance());
}

NodeStatePotential::NodeStatePotential(const NodeStatePotential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeStatePotential::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  node_potential_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStatePotential::~NodeStatePotential() {
  SharedDtor();
}

void NodeStatePotential::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void NodeStatePotential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStatePotential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatePotential_descriptor_;
}

const NodeStatePotential& NodeStatePotential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrf_2eproto();  return *default_instance_;
}

NodeStatePotential* NodeStatePotential::default_instance_ = NULL;

NodeStatePotential* NodeStatePotential::New() const {
  return new NodeStatePotential;
}

void NodeStatePotential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_state()) {
      if (state_ != NULL) state_->::graph::State::Clear();
    }
    node_potential_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStatePotential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .graph.State state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_node_potential;
        break;
      }
      
      // required float node_potential = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_node_potential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &node_potential_)));
          set_has_node_potential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeStatePotential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .graph.State state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }
  
  // required float node_potential = 2;
  if (has_node_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->node_potential(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeStatePotential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .graph.State state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }
  
  // required float node_potential = 2;
  if (has_node_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->node_potential(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeStatePotential::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .graph.State state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // required float node_potential = 2;
    if (has_node_potential()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStatePotential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStatePotential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStatePotential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStatePotential::MergeFrom(const NodeStatePotential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::graph::State::MergeFrom(from.state());
    }
    if (from.has_node_potential()) {
      set_node_potential(from.node_potential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStatePotential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatePotential::CopyFrom(const NodeStatePotential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatePotential::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void NodeStatePotential::Swap(NodeStatePotential* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(node_potential_, other->node_potential_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStatePotential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStatePotential_descriptor_;
  metadata.reflection = NodeStatePotential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EdgeStatePotential::kFromStateIdFieldNumber;
const int EdgeStatePotential::kToStateIdFieldNumber;
const int EdgeStatePotential::kEdgePotentialFieldNumber;
#endif  // !_MSC_VER

EdgeStatePotential::EdgeStatePotential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeStatePotential::InitAsDefaultInstance() {
}

EdgeStatePotential::EdgeStatePotential(const EdgeStatePotential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeStatePotential::SharedCtor() {
  _cached_size_ = 0;
  from_state_id_ = 0;
  to_state_id_ = 0;
  edge_potential_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeStatePotential::~EdgeStatePotential() {
  SharedDtor();
}

void EdgeStatePotential::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EdgeStatePotential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeStatePotential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeStatePotential_descriptor_;
}

const EdgeStatePotential& EdgeStatePotential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrf_2eproto();  return *default_instance_;
}

EdgeStatePotential* EdgeStatePotential::default_instance_ = NULL;

EdgeStatePotential* EdgeStatePotential::New() const {
  return new EdgeStatePotential;
}

void EdgeStatePotential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_state_id_ = 0;
    to_state_id_ = 0;
    edge_potential_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeStatePotential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 from_state_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_state_id_)));
          set_has_from_state_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_state_id;
        break;
      }
      
      // required int32 to_state_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_state_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_state_id_)));
          set_has_to_state_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_edge_potential;
        break;
      }
      
      // required float edge_potential = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_edge_potential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edge_potential_)));
          set_has_edge_potential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeStatePotential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 from_state_id = 1;
  if (has_from_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_state_id(), output);
  }
  
  // required int32 to_state_id = 2;
  if (has_to_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_state_id(), output);
  }
  
  // required float edge_potential = 3;
  if (has_edge_potential()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->edge_potential(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeStatePotential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 from_state_id = 1;
  if (has_from_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_state_id(), target);
  }
  
  // required int32 to_state_id = 2;
  if (has_to_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_state_id(), target);
  }
  
  // required float edge_potential = 3;
  if (has_edge_potential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->edge_potential(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeStatePotential::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 from_state_id = 1;
    if (has_from_state_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_state_id());
    }
    
    // required int32 to_state_id = 2;
    if (has_to_state_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_state_id());
    }
    
    // required float edge_potential = 3;
    if (has_edge_potential()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeStatePotential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeStatePotential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeStatePotential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeStatePotential::MergeFrom(const EdgeStatePotential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_state_id()) {
      set_from_state_id(from.from_state_id());
    }
    if (from.has_to_state_id()) {
      set_to_state_id(from.to_state_id());
    }
    if (from.has_edge_potential()) {
      set_edge_potential(from.edge_potential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeStatePotential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeStatePotential::CopyFrom(const EdgeStatePotential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeStatePotential::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void EdgeStatePotential::Swap(EdgeStatePotential* other) {
  if (other != this) {
    std::swap(from_state_id_, other->from_state_id_);
    std::swap(to_state_id_, other->to_state_id_);
    std::swap(edge_potential_, other->edge_potential_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeStatePotential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeStatePotential_descriptor_;
  metadata.reflection = EdgeStatePotential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MRFNode::kNodePotentialsFieldNumber;
#endif  // !_MSC_VER

MRFNode::MRFNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MRFNode::InitAsDefaultInstance() {
}

MRFNode::MRFNode(const MRFNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MRFNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MRFNode::~MRFNode() {
  SharedDtor();
}

void MRFNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MRFNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRFNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRFNode_descriptor_;
}

const MRFNode& MRFNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrf_2eproto();  return *default_instance_;
}

MRFNode* MRFNode::default_instance_ = NULL;

MRFNode* MRFNode::New() const {
  return new MRFNode;
}

void MRFNode::Clear() {
  node_potentials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MRFNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .graph.NodeStatePotential node_potentials = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_potentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_potentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_node_potentials;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MRFNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .graph.NodeStatePotential node_potentials = 1;
  for (int i = 0; i < this->node_potentials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_potentials(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MRFNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .graph.NodeStatePotential node_potentials = 1;
  for (int i = 0; i < this->node_potentials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_potentials(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MRFNode::ByteSize() const {
  int total_size = 0;
  
  // repeated .graph.NodeStatePotential node_potentials = 1;
  total_size += 1 * this->node_potentials_size();
  for (int i = 0; i < this->node_potentials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_potentials(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRFNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MRFNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MRFNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MRFNode::MergeFrom(const MRFNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_potentials_.MergeFrom(from.node_potentials_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MRFNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRFNode::CopyFrom(const MRFNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MRFNode::IsInitialized() const {
  
  for (int i = 0; i < node_potentials_size(); i++) {
    if (!this->node_potentials(i).IsInitialized()) return false;
  }
  return true;
}

void MRFNode::Swap(MRFNode* other) {
  if (other != this) {
    node_potentials_.Swap(&other->node_potentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MRFNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRFNode_descriptor_;
  metadata.reflection = MRFNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MRFEdge::kEdgePotentialsFieldNumber;
#endif  // !_MSC_VER

MRFEdge::MRFEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MRFEdge::InitAsDefaultInstance() {
}

MRFEdge::MRFEdge(const MRFEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MRFEdge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MRFEdge::~MRFEdge() {
  SharedDtor();
}

void MRFEdge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MRFEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MRFEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MRFEdge_descriptor_;
}

const MRFEdge& MRFEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrf_2eproto();  return *default_instance_;
}

MRFEdge* MRFEdge::default_instance_ = NULL;

MRFEdge* MRFEdge::New() const {
  return new MRFEdge;
}

void MRFEdge::Clear() {
  edge_potentials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MRFEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .graph.EdgeStatePotential edge_potentials = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge_potentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge_potentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_edge_potentials;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MRFEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .graph.EdgeStatePotential edge_potentials = 1;
  for (int i = 0; i < this->edge_potentials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edge_potentials(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MRFEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .graph.EdgeStatePotential edge_potentials = 1;
  for (int i = 0; i < this->edge_potentials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->edge_potentials(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MRFEdge::ByteSize() const {
  int total_size = 0;
  
  // repeated .graph.EdgeStatePotential edge_potentials = 1;
  total_size += 1 * this->edge_potentials_size();
  for (int i = 0; i < this->edge_potentials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge_potentials(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MRFEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MRFEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MRFEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MRFEdge::MergeFrom(const MRFEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  edge_potentials_.MergeFrom(from.edge_potentials_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MRFEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MRFEdge::CopyFrom(const MRFEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MRFEdge::IsInitialized() const {
  
  for (int i = 0; i < edge_potentials_size(); i++) {
    if (!this->edge_potentials(i).IsInitialized()) return false;
  }
  return true;
}

void MRFEdge::Swap(MRFEdge* other) {
  if (other != this) {
    edge_potentials_.Swap(&other->edge_potentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MRFEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MRFEdge_descriptor_;
  metadata.reflection = MRFEdge_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::graph::Graph_Node,
    ::google::protobuf::internal::MessageTypeTraits< ::graph::MRFNode >, 11, false >
  mrf_node(kMrfNodeFieldNumber, ::graph::MRFNode::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::graph::Graph_Edge,
    ::google::protobuf::internal::MessageTypeTraits< ::graph::MRFEdge >, 11, false >
  mrf_edge(kMrfEdgeFieldNumber, ::graph::MRFEdge::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

// @@protoc_insertion_point(global_scope)
