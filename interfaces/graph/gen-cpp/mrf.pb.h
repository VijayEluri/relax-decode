// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrf.proto

#ifndef PROTOBUF_mrf_2eproto__INCLUDED
#define PROTOBUF_mrf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)

namespace graph {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mrf_2eproto();
void protobuf_AssignDesc_mrf_2eproto();
void protobuf_ShutdownFile_mrf_2eproto();

class State;
class NodeStatePotential;
class EdgeStatePotential;
class MRFNode;
class MRFEdge;

// ===================================================================

class State : public ::google::protobuf::Message {
 public:
  State();
  virtual ~State();
  
  State(const State& from);
  
  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();
  
  void Swap(State* other);
  
  // implements Message ----------------------------------------------
  
  State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  
  // @@protoc_insertion_point(class_scope:graph.State)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_label();
  inline void clear_has_label();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* label_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_mrf_2eproto();
  friend void protobuf_AssignDesc_mrf_2eproto();
  friend void protobuf_ShutdownFile_mrf_2eproto();
  
  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class NodeStatePotential : public ::google::protobuf::Message {
 public:
  NodeStatePotential();
  virtual ~NodeStatePotential();
  
  NodeStatePotential(const NodeStatePotential& from);
  
  inline NodeStatePotential& operator=(const NodeStatePotential& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeStatePotential& default_instance();
  
  void Swap(NodeStatePotential* other);
  
  // implements Message ----------------------------------------------
  
  NodeStatePotential* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeStatePotential& from);
  void MergeFrom(const NodeStatePotential& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .graph.State state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline const ::graph::State& state() const;
  inline ::graph::State* mutable_state();
  inline ::graph::State* release_state();
  
  // required float node_potential = 2;
  inline bool has_node_potential() const;
  inline void clear_node_potential();
  static const int kNodePotentialFieldNumber = 2;
  inline float node_potential() const;
  inline void set_node_potential(float value);
  
  // @@protoc_insertion_point(class_scope:graph.NodeStatePotential)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_node_potential();
  inline void clear_has_node_potential();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::graph::State* state_;
  float node_potential_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_mrf_2eproto();
  friend void protobuf_AssignDesc_mrf_2eproto();
  friend void protobuf_ShutdownFile_mrf_2eproto();
  
  void InitAsDefaultInstance();
  static NodeStatePotential* default_instance_;
};
// -------------------------------------------------------------------

class EdgeStatePotential : public ::google::protobuf::Message {
 public:
  EdgeStatePotential();
  virtual ~EdgeStatePotential();
  
  EdgeStatePotential(const EdgeStatePotential& from);
  
  inline EdgeStatePotential& operator=(const EdgeStatePotential& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeStatePotential& default_instance();
  
  void Swap(EdgeStatePotential* other);
  
  // implements Message ----------------------------------------------
  
  EdgeStatePotential* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdgeStatePotential& from);
  void MergeFrom(const EdgeStatePotential& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 from_state_id = 1;
  inline bool has_from_state_id() const;
  inline void clear_from_state_id();
  static const int kFromStateIdFieldNumber = 1;
  inline ::google::protobuf::int32 from_state_id() const;
  inline void set_from_state_id(::google::protobuf::int32 value);
  
  // required int32 to_state_id = 2;
  inline bool has_to_state_id() const;
  inline void clear_to_state_id();
  static const int kToStateIdFieldNumber = 2;
  inline ::google::protobuf::int32 to_state_id() const;
  inline void set_to_state_id(::google::protobuf::int32 value);
  
  // required float edge_potential = 3;
  inline bool has_edge_potential() const;
  inline void clear_edge_potential();
  static const int kEdgePotentialFieldNumber = 3;
  inline float edge_potential() const;
  inline void set_edge_potential(float value);
  
  // @@protoc_insertion_point(class_scope:graph.EdgeStatePotential)
 private:
  inline void set_has_from_state_id();
  inline void clear_has_from_state_id();
  inline void set_has_to_state_id();
  inline void clear_has_to_state_id();
  inline void set_has_edge_potential();
  inline void clear_has_edge_potential();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 from_state_id_;
  ::google::protobuf::int32 to_state_id_;
  float edge_potential_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_mrf_2eproto();
  friend void protobuf_AssignDesc_mrf_2eproto();
  friend void protobuf_ShutdownFile_mrf_2eproto();
  
  void InitAsDefaultInstance();
  static EdgeStatePotential* default_instance_;
};
// -------------------------------------------------------------------

class MRFNode : public ::google::protobuf::Message {
 public:
  MRFNode();
  virtual ~MRFNode();
  
  MRFNode(const MRFNode& from);
  
  inline MRFNode& operator=(const MRFNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MRFNode& default_instance();
  
  void Swap(MRFNode* other);
  
  // implements Message ----------------------------------------------
  
  MRFNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MRFNode& from);
  void MergeFrom(const MRFNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .graph.NodeStatePotential node_potentials = 1;
  inline int node_potentials_size() const;
  inline void clear_node_potentials();
  static const int kNodePotentialsFieldNumber = 1;
  inline const ::graph::NodeStatePotential& node_potentials(int index) const;
  inline ::graph::NodeStatePotential* mutable_node_potentials(int index);
  inline ::graph::NodeStatePotential* add_node_potentials();
  inline const ::google::protobuf::RepeatedPtrField< ::graph::NodeStatePotential >&
      node_potentials() const;
  inline ::google::protobuf::RepeatedPtrField< ::graph::NodeStatePotential >*
      mutable_node_potentials();
  
  // @@protoc_insertion_point(class_scope:graph.MRFNode)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::graph::NodeStatePotential > node_potentials_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_mrf_2eproto();
  friend void protobuf_AssignDesc_mrf_2eproto();
  friend void protobuf_ShutdownFile_mrf_2eproto();
  
  void InitAsDefaultInstance();
  static MRFNode* default_instance_;
};
// -------------------------------------------------------------------

class MRFEdge : public ::google::protobuf::Message {
 public:
  MRFEdge();
  virtual ~MRFEdge();
  
  MRFEdge(const MRFEdge& from);
  
  inline MRFEdge& operator=(const MRFEdge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MRFEdge& default_instance();
  
  void Swap(MRFEdge* other);
  
  // implements Message ----------------------------------------------
  
  MRFEdge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MRFEdge& from);
  void MergeFrom(const MRFEdge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .graph.EdgeStatePotential edge_potentials = 1;
  inline int edge_potentials_size() const;
  inline void clear_edge_potentials();
  static const int kEdgePotentialsFieldNumber = 1;
  inline const ::graph::EdgeStatePotential& edge_potentials(int index) const;
  inline ::graph::EdgeStatePotential* mutable_edge_potentials(int index);
  inline ::graph::EdgeStatePotential* add_edge_potentials();
  inline const ::google::protobuf::RepeatedPtrField< ::graph::EdgeStatePotential >&
      edge_potentials() const;
  inline ::google::protobuf::RepeatedPtrField< ::graph::EdgeStatePotential >*
      mutable_edge_potentials();
  
  // @@protoc_insertion_point(class_scope:graph.MRFEdge)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::graph::EdgeStatePotential > edge_potentials_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_mrf_2eproto();
  friend void protobuf_AssignDesc_mrf_2eproto();
  friend void protobuf_ShutdownFile_mrf_2eproto();
  
  void InitAsDefaultInstance();
  static MRFEdge* default_instance_;
};
// ===================================================================

static const int kMrfNodeFieldNumber = 150;
extern ::google::protobuf::internal::ExtensionIdentifier< ::graph::Graph_Node,
    ::google::protobuf::internal::MessageTypeTraits< ::graph::MRFNode >, 11, false >
  mrf_node;
static const int kMrfEdgeFieldNumber = 150;
extern ::google::protobuf::internal::ExtensionIdentifier< ::graph::Graph_Edge,
    ::google::protobuf::internal::MessageTypeTraits< ::graph::MRFEdge >, 11, false >
  mrf_edge;

// ===================================================================

// State

// required int32 id = 1;
inline bool State::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void State::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void State::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void State::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 State::id() const {
  return id_;
}
inline void State::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string label = 2;
inline bool State::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void State::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void State::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void State::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& State::label() const {
  return *label_;
}
inline void State::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void State::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void State::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* State::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* State::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NodeStatePotential

// required .graph.State state = 1;
inline bool NodeStatePotential::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeStatePotential::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeStatePotential::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeStatePotential::clear_state() {
  if (state_ != NULL) state_->::graph::State::Clear();
  clear_has_state();
}
inline const ::graph::State& NodeStatePotential::state() const {
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::graph::State* NodeStatePotential::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::graph::State;
  return state_;
}
inline ::graph::State* NodeStatePotential::release_state() {
  clear_has_state();
  ::graph::State* temp = state_;
  state_ = NULL;
  return temp;
}

// required float node_potential = 2;
inline bool NodeStatePotential::has_node_potential() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeStatePotential::set_has_node_potential() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeStatePotential::clear_has_node_potential() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeStatePotential::clear_node_potential() {
  node_potential_ = 0;
  clear_has_node_potential();
}
inline float NodeStatePotential::node_potential() const {
  return node_potential_;
}
inline void NodeStatePotential::set_node_potential(float value) {
  set_has_node_potential();
  node_potential_ = value;
}

// -------------------------------------------------------------------

// EdgeStatePotential

// required int32 from_state_id = 1;
inline bool EdgeStatePotential::has_from_state_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdgeStatePotential::set_has_from_state_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdgeStatePotential::clear_has_from_state_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdgeStatePotential::clear_from_state_id() {
  from_state_id_ = 0;
  clear_has_from_state_id();
}
inline ::google::protobuf::int32 EdgeStatePotential::from_state_id() const {
  return from_state_id_;
}
inline void EdgeStatePotential::set_from_state_id(::google::protobuf::int32 value) {
  set_has_from_state_id();
  from_state_id_ = value;
}

// required int32 to_state_id = 2;
inline bool EdgeStatePotential::has_to_state_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdgeStatePotential::set_has_to_state_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdgeStatePotential::clear_has_to_state_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdgeStatePotential::clear_to_state_id() {
  to_state_id_ = 0;
  clear_has_to_state_id();
}
inline ::google::protobuf::int32 EdgeStatePotential::to_state_id() const {
  return to_state_id_;
}
inline void EdgeStatePotential::set_to_state_id(::google::protobuf::int32 value) {
  set_has_to_state_id();
  to_state_id_ = value;
}

// required float edge_potential = 3;
inline bool EdgeStatePotential::has_edge_potential() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EdgeStatePotential::set_has_edge_potential() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EdgeStatePotential::clear_has_edge_potential() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EdgeStatePotential::clear_edge_potential() {
  edge_potential_ = 0;
  clear_has_edge_potential();
}
inline float EdgeStatePotential::edge_potential() const {
  return edge_potential_;
}
inline void EdgeStatePotential::set_edge_potential(float value) {
  set_has_edge_potential();
  edge_potential_ = value;
}

// -------------------------------------------------------------------

// MRFNode

// repeated .graph.NodeStatePotential node_potentials = 1;
inline int MRFNode::node_potentials_size() const {
  return node_potentials_.size();
}
inline void MRFNode::clear_node_potentials() {
  node_potentials_.Clear();
}
inline const ::graph::NodeStatePotential& MRFNode::node_potentials(int index) const {
  return node_potentials_.Get(index);
}
inline ::graph::NodeStatePotential* MRFNode::mutable_node_potentials(int index) {
  return node_potentials_.Mutable(index);
}
inline ::graph::NodeStatePotential* MRFNode::add_node_potentials() {
  return node_potentials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::graph::NodeStatePotential >&
MRFNode::node_potentials() const {
  return node_potentials_;
}
inline ::google::protobuf::RepeatedPtrField< ::graph::NodeStatePotential >*
MRFNode::mutable_node_potentials() {
  return &node_potentials_;
}

// -------------------------------------------------------------------

// MRFEdge

// repeated .graph.EdgeStatePotential edge_potentials = 1;
inline int MRFEdge::edge_potentials_size() const {
  return edge_potentials_.size();
}
inline void MRFEdge::clear_edge_potentials() {
  edge_potentials_.Clear();
}
inline const ::graph::EdgeStatePotential& MRFEdge::edge_potentials(int index) const {
  return edge_potentials_.Get(index);
}
inline ::graph::EdgeStatePotential* MRFEdge::mutable_edge_potentials(int index) {
  return edge_potentials_.Mutable(index);
}
inline ::graph::EdgeStatePotential* MRFEdge::add_edge_potentials() {
  return edge_potentials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::graph::EdgeStatePotential >&
MRFEdge::edge_potentials() const {
  return edge_potentials_;
}
inline ::google::protobuf::RepeatedPtrField< ::graph::EdgeStatePotential >*
MRFEdge::mutable_edge_potentials() {
  return &edge_potentials_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mrf_2eproto__INCLUDED
