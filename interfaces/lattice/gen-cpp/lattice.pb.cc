// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lattice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lattice {

namespace {

const ::google::protobuf::Descriptor* Lattice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lattice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lattice_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lattice_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lattice_Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lattice_Edge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subword_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phraselet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phraselet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phraselets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phraselets_reflection_ = NULL;
const ::google::protobuf::Descriptor* Origin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Origin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lattice_2eproto() {
  protobuf_AddDesc_lattice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lattice.proto");
  GOOGLE_CHECK(file != NULL);
  Lattice_descriptor_ = file->message_type(0);
  static const int Lattice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice, final_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice, node_),
  };
  Lattice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lattice_descriptor_,
      Lattice::default_instance_,
      Lattice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lattice));
  Lattice_Node_descriptor_ = Lattice_descriptor_->nested_type(0);
  static const int Lattice_Node_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Node, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Node, edge_),
  };
  Lattice_Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lattice_Node_descriptor_,
      Lattice_Node::default_instance_,
      Lattice_Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Node, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Node, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lattice_Node));
  Lattice_Edge_descriptor_ = Lattice_descriptor_->nested_type(1);
  static const int Lattice_Edge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Edge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Edge, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Edge, to_id_),
  };
  Lattice_Edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lattice_Edge_descriptor_,
      Lattice_Edge::default_instance_,
      Lattice_Edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Edge, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lattice_Edge, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lattice_Edge));
  Subword_descriptor_ = file->message_type(1);
  static const int Subword_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subword, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subword, subword_original_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subword, subword_hypergraph_node_id_),
  };
  Subword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subword_descriptor_,
      Subword::default_instance_,
      Subword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subword));
  Phraselet_descriptor_ = file->message_type(2);
  static const int Phraselet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselet, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselet, phraselet_hypergraph_edge_),
  };
  Phraselet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Phraselet_descriptor_,
      Phraselet::default_instance_,
      Phraselet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Phraselet));
  Phraselets_descriptor_ = file->message_type(3);
  static const int Phraselets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselets, phraselet_),
  };
  Phraselets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Phraselets_descriptor_,
      Phraselets::default_instance_,
      Phraselets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phraselets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Phraselets));
  Origin_descriptor_ = file->message_type(4);
  static const int Origin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Origin, hypergraph_edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Origin, original_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Origin, has_origin_),
  };
  Origin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Origin_descriptor_,
      Origin::default_instance_,
      Origin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Origin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Origin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Origin));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lattice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lattice_descriptor_, &Lattice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lattice_Node_descriptor_, &Lattice_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lattice_Edge_descriptor_, &Lattice_Edge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subword_descriptor_, &Subword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Phraselet_descriptor_, &Phraselet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Phraselets_descriptor_, &Phraselets::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Origin_descriptor_, &Origin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lattice_2eproto() {
  delete Lattice::default_instance_;
  delete Lattice_reflection_;
  delete Lattice_Node::default_instance_;
  delete Lattice_Node_reflection_;
  delete Lattice_Edge::default_instance_;
  delete Lattice_Edge_reflection_;
  delete Subword::default_instance_;
  delete Subword_reflection_;
  delete Phraselet::default_instance_;
  delete Phraselet_reflection_;
  delete Phraselets::default_instance_;
  delete Phraselets_reflection_;
  delete Origin::default_instance_;
  delete Origin_reflection_;
}

void protobuf_AddDesc_lattice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rlattice.proto\022\007lattice\"\341\001\n\007Lattice\022\r\n\005"
    "start\030\005 \002(\005\022\r\n\005final\030\006 \003(\005\022#\n\004node\030\007 \003(\013"
    "2\025.lattice.Lattice.Node\032M\n\004Node\022\n\n\002id\030\001 "
    "\002(\005\022\r\n\005label\030\002 \001(\t\022#\n\004edge\030\003 \003(\0132\025.latti"
    "ce.Lattice.Edge*\005\010d\020\310\001\0327\n\004Edge\022\n\n\002id\030\001 \001"
    "(\005\022\r\n\005label\030\002 \001(\t\022\r\n\005to_id\030\003 \002(\005*\005\010d\020\310\001*"
    "\004\010\001\020\005*\005\010d\020\310\001\"X\n\007Subword\022\014\n\004word\030\001 \001(\t\022\033\n"
    "\023subword_original_id\030\002 \001(\005\022\"\n\032subword_hy"
    "pergraph_node_id\030\003 \001(\005\"N\n\tPhraselet\022\036\n\004w"
    "ord\030\001 \003(\0132\020.lattice.Subword\022!\n\031phraselet"
    "_hypergraph_edge\030\002 \001(\005\"3\n\nPhraselets\022%\n\t"
    "phraselet\030\001 \003(\0132\022.lattice.Phraselet\"J\n\006O"
    "rigin\022\027\n\017hypergraph_edge\030\001 \003(\005\022\023\n\013origin"
    "al_id\030\002 \001(\005\022\022\n\nhas_origin\030\003 \001(\010:>\n\nphras"
    "elets\022\025.lattice.Lattice.Node\030d \001(\0132\023.lat"
    "tice.Phraselets:*\n\013has_phrases\022\025.lattice"
    ".Lattice.Node\030e \001(\010:6\n\006origin\022\025.lattice."
    "Lattice.Edge\030n \001(\0132\017.lattice.Origin:.\n\024n"
    "um_hypergraph_edges\022\020.lattice.Lattice\030y "
    "\001(\005:*\n\020num_original_ids\022\020.lattice.Lattic"
    "e\030z \001(\005", 807);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lattice.proto", &protobuf_RegisterTypes);
  Lattice::default_instance_ = new Lattice();
  Lattice_Node::default_instance_ = new Lattice_Node();
  Lattice_Edge::default_instance_ = new Lattice_Edge();
  Subword::default_instance_ = new Subword();
  Phraselet::default_instance_ = new Phraselet();
  Phraselets::default_instance_ = new Phraselets();
  Origin::default_instance_ = new Origin();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::lattice::Lattice_Node::default_instance(),
    100, 11, false, false,
    &::lattice::Phraselets::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::lattice::Lattice_Node::default_instance(),
    101, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::lattice::Lattice_Edge::default_instance(),
    110, 11, false, false,
    &::lattice::Origin::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::lattice::Lattice::default_instance(),
    121, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::lattice::Lattice::default_instance(),
    122, 5, false, false);
  Lattice::default_instance_->InitAsDefaultInstance();
  Lattice_Node::default_instance_->InitAsDefaultInstance();
  Lattice_Edge::default_instance_->InitAsDefaultInstance();
  Subword::default_instance_->InitAsDefaultInstance();
  Phraselet::default_instance_->InitAsDefaultInstance();
  Phraselets::default_instance_->InitAsDefaultInstance();
  Origin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lattice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lattice_2eproto {
  StaticDescriptorInitializer_lattice_2eproto() {
    protobuf_AddDesc_lattice_2eproto();
  }
} static_descriptor_initializer_lattice_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Lattice_Node::kIdFieldNumber;
const int Lattice_Node::kLabelFieldNumber;
const int Lattice_Node::kEdgeFieldNumber;
#endif  // !_MSC_VER

Lattice_Node::Lattice_Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lattice_Node::InitAsDefaultInstance() {
}

Lattice_Node::Lattice_Node(const Lattice_Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lattice_Node::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lattice_Node::~Lattice_Node() {
  SharedDtor();
}

void Lattice_Node::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Lattice_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lattice_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lattice_Node_descriptor_;
}

const Lattice_Node& Lattice_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Lattice_Node* Lattice_Node::default_instance_ = NULL;

Lattice_Node* Lattice_Node::New() const {
  return new Lattice_Node;
}

void Lattice_Node::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lattice_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        break;
      }
      
      // repeated .lattice.Lattice.Edge edge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_edge;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lattice_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // repeated .lattice.Lattice.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lattice_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // repeated .lattice.Lattice.Edge edge = 3;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->edge(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lattice_Node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  // repeated .lattice.Lattice.Edge edge = 3;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lattice_Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lattice_Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lattice_Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lattice_Node::MergeFrom(const Lattice_Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  edge_.MergeFrom(from.edge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lattice_Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lattice_Node::CopyFrom(const Lattice_Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lattice_Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Lattice_Node::Swap(Lattice_Node* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    edge_.Swap(&other->edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Lattice_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lattice_Node_descriptor_;
  metadata.reflection = Lattice_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Lattice_Edge::kIdFieldNumber;
const int Lattice_Edge::kLabelFieldNumber;
const int Lattice_Edge::kToIdFieldNumber;
#endif  // !_MSC_VER

Lattice_Edge::Lattice_Edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lattice_Edge::InitAsDefaultInstance() {
}

Lattice_Edge::Lattice_Edge(const Lattice_Edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lattice_Edge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lattice_Edge::~Lattice_Edge() {
  SharedDtor();
}

void Lattice_Edge::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Lattice_Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lattice_Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lattice_Edge_descriptor_;
}

const Lattice_Edge& Lattice_Edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Lattice_Edge* Lattice_Edge::default_instance_ = NULL;

Lattice_Edge* Lattice_Edge::New() const {
  return new Lattice_Edge;
}

void Lattice_Edge::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    to_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lattice_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_id;
        break;
      }
      
      // required int32 to_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lattice_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  // required int32 to_id = 3;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to_id(), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lattice_Edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  // required int32 to_id = 3;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to_id(), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lattice_Edge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // required int32 to_id = 3;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lattice_Edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lattice_Edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lattice_Edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lattice_Edge::MergeFrom(const Lattice_Edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lattice_Edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lattice_Edge::CopyFrom(const Lattice_Edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lattice_Edge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Lattice_Edge::Swap(Lattice_Edge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(to_id_, other->to_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Lattice_Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lattice_Edge_descriptor_;
  metadata.reflection = Lattice_Edge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Lattice::kStartFieldNumber;
const int Lattice::kFinalFieldNumber;
const int Lattice::kNodeFieldNumber;
#endif  // !_MSC_VER

Lattice::Lattice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lattice::InitAsDefaultInstance() {
}

Lattice::Lattice(const Lattice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lattice::SharedCtor() {
  _cached_size_ = 0;
  start_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lattice::~Lattice() {
  SharedDtor();
}

void Lattice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lattice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lattice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lattice_descriptor_;
}

const Lattice& Lattice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Lattice* Lattice::default_instance_ = NULL;

Lattice* Lattice::New() const {
  return new Lattice;
}

void Lattice::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = 0;
  }
  final_.Clear();
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lattice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_final;
        break;
      }
      
      // repeated int32 final = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_final())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_final())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_final;
        if (input->ExpectTag(58)) goto parse_node;
        break;
      }
      
      // repeated .lattice.Lattice.Node node = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8u <= tag && tag < 40u) ||
            (800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lattice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1, 5)
  _extensions_.SerializeWithCachedSizes(
      1, 5, output);
  
  // required int32 start = 5;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->start(), output);
  }
  
  // repeated int32 final = 6;
  for (int i = 0; i < this->final_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->final(i), output);
  }
  
  // repeated .lattice.Lattice.Node node = 7;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->node(i), output);
  }
  
  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lattice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [1, 5)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 5, target);
  
  // required int32 start = 5;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->start(), target);
  }
  
  // repeated int32 final = 6;
  for (int i = 0; i < this->final_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->final(i), target);
  }
  
  // repeated .lattice.Lattice.Node node = 7;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->node(i), target);
  }
  
  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lattice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 start = 5;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }
    
  }
  // repeated int32 final = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->final_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->final(i));
    }
    total_size += 1 * this->final_size() + data_size;
  }
  
  // repeated .lattice.Lattice.Node node = 7;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lattice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lattice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lattice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lattice::MergeFrom(const Lattice& from) {
  GOOGLE_CHECK_NE(&from, this);
  final_.MergeFrom(from.final_);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lattice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lattice::CopyFrom(const Lattice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lattice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Lattice::Swap(Lattice* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    final_.Swap(&other->final_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Lattice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lattice_descriptor_;
  metadata.reflection = Lattice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subword::kWordFieldNumber;
const int Subword::kSubwordOriginalIdFieldNumber;
const int Subword::kSubwordHypergraphNodeIdFieldNumber;
#endif  // !_MSC_VER

Subword::Subword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Subword::InitAsDefaultInstance() {
}

Subword::Subword(const Subword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Subword::SharedCtor() {
  _cached_size_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subword_original_id_ = 0;
  subword_hypergraph_node_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subword::~Subword() {
  SharedDtor();
}

void Subword::SharedDtor() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void Subword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subword_descriptor_;
}

const Subword& Subword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Subword* Subword::default_instance_ = NULL;

Subword* Subword::New() const {
  return new Subword;
}

void Subword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    subword_original_id_ = 0;
    subword_hypergraph_node_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Subword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string word = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subword_original_id;
        break;
      }
      
      // optional int32 subword_original_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subword_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subword_original_id_)));
          set_has_subword_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subword_hypergraph_node_id;
        break;
      }
      
      // optional int32 subword_hypergraph_node_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subword_hypergraph_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subword_hypergraph_node_id_)));
          set_has_subword_hypergraph_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Subword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->word(), output);
  }
  
  // optional int32 subword_original_id = 2;
  if (has_subword_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->subword_original_id(), output);
  }
  
  // optional int32 subword_hypergraph_node_id = 3;
  if (has_subword_hypergraph_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subword_hypergraph_node_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Subword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }
  
  // optional int32 subword_original_id = 2;
  if (has_subword_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->subword_original_id(), target);
  }
  
  // optional int32 subword_hypergraph_node_id = 3;
  if (has_subword_hypergraph_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subword_hypergraph_node_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Subword::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }
    
    // optional int32 subword_original_id = 2;
    if (has_subword_original_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subword_original_id());
    }
    
    // optional int32 subword_hypergraph_node_id = 3;
    if (has_subword_hypergraph_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subword_hypergraph_node_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Subword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Subword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subword::MergeFrom(const Subword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_subword_original_id()) {
      set_subword_original_id(from.subword_original_id());
    }
    if (from.has_subword_hypergraph_node_id()) {
      set_subword_hypergraph_node_id(from.subword_hypergraph_node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Subword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subword::CopyFrom(const Subword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subword::IsInitialized() const {
  
  return true;
}

void Subword::Swap(Subword* other) {
  if (other != this) {
    std::swap(word_, other->word_);
    std::swap(subword_original_id_, other->subword_original_id_);
    std::swap(subword_hypergraph_node_id_, other->subword_hypergraph_node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Subword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subword_descriptor_;
  metadata.reflection = Subword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Phraselet::kWordFieldNumber;
const int Phraselet::kPhraseletHypergraphEdgeFieldNumber;
#endif  // !_MSC_VER

Phraselet::Phraselet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Phraselet::InitAsDefaultInstance() {
}

Phraselet::Phraselet(const Phraselet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Phraselet::SharedCtor() {
  _cached_size_ = 0;
  phraselet_hypergraph_edge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Phraselet::~Phraselet() {
  SharedDtor();
}

void Phraselet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Phraselet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phraselet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phraselet_descriptor_;
}

const Phraselet& Phraselet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Phraselet* Phraselet::default_instance_ = NULL;

Phraselet* Phraselet::New() const {
  return new Phraselet;
}

void Phraselet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    phraselet_hypergraph_edge_ = 0;
  }
  word_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Phraselet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lattice.Subword word = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_word;
        if (input->ExpectTag(16)) goto parse_phraselet_hypergraph_edge;
        break;
      }
      
      // optional int32 phraselet_hypergraph_edge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phraselet_hypergraph_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phraselet_hypergraph_edge_)));
          set_has_phraselet_hypergraph_edge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Phraselet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lattice.Subword word = 1;
  for (int i = 0; i < this->word_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->word(i), output);
  }
  
  // optional int32 phraselet_hypergraph_edge = 2;
  if (has_phraselet_hypergraph_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phraselet_hypergraph_edge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Phraselet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lattice.Subword word = 1;
  for (int i = 0; i < this->word_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->word(i), target);
  }
  
  // optional int32 phraselet_hypergraph_edge = 2;
  if (has_phraselet_hypergraph_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phraselet_hypergraph_edge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Phraselet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 phraselet_hypergraph_edge = 2;
    if (has_phraselet_hypergraph_edge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phraselet_hypergraph_edge());
    }
    
  }
  // repeated .lattice.Subword word = 1;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phraselet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Phraselet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Phraselet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Phraselet::MergeFrom(const Phraselet& from) {
  GOOGLE_CHECK_NE(&from, this);
  word_.MergeFrom(from.word_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_phraselet_hypergraph_edge()) {
      set_phraselet_hypergraph_edge(from.phraselet_hypergraph_edge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Phraselet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phraselet::CopyFrom(const Phraselet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phraselet::IsInitialized() const {
  
  return true;
}

void Phraselet::Swap(Phraselet* other) {
  if (other != this) {
    word_.Swap(&other->word_);
    std::swap(phraselet_hypergraph_edge_, other->phraselet_hypergraph_edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Phraselet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phraselet_descriptor_;
  metadata.reflection = Phraselet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Phraselets::kPhraseletFieldNumber;
#endif  // !_MSC_VER

Phraselets::Phraselets()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Phraselets::InitAsDefaultInstance() {
}

Phraselets::Phraselets(const Phraselets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Phraselets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Phraselets::~Phraselets() {
  SharedDtor();
}

void Phraselets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Phraselets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phraselets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phraselets_descriptor_;
}

const Phraselets& Phraselets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Phraselets* Phraselets::default_instance_ = NULL;

Phraselets* Phraselets::New() const {
  return new Phraselets;
}

void Phraselets::Clear() {
  phraselet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Phraselets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lattice.Phraselet phraselet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phraselet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phraselet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_phraselet;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Phraselets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lattice.Phraselet phraselet = 1;
  for (int i = 0; i < this->phraselet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->phraselet(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Phraselets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lattice.Phraselet phraselet = 1;
  for (int i = 0; i < this->phraselet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->phraselet(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Phraselets::ByteSize() const {
  int total_size = 0;
  
  // repeated .lattice.Phraselet phraselet = 1;
  total_size += 1 * this->phraselet_size();
  for (int i = 0; i < this->phraselet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phraselet(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phraselets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Phraselets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Phraselets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Phraselets::MergeFrom(const Phraselets& from) {
  GOOGLE_CHECK_NE(&from, this);
  phraselet_.MergeFrom(from.phraselet_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Phraselets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phraselets::CopyFrom(const Phraselets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phraselets::IsInitialized() const {
  
  return true;
}

void Phraselets::Swap(Phraselets* other) {
  if (other != this) {
    phraselet_.Swap(&other->phraselet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Phraselets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phraselets_descriptor_;
  metadata.reflection = Phraselets_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Origin::kHypergraphEdgeFieldNumber;
const int Origin::kOriginalIdFieldNumber;
const int Origin::kHasOriginFieldNumber;
#endif  // !_MSC_VER

Origin::Origin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Origin::InitAsDefaultInstance() {
}

Origin::Origin(const Origin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Origin::SharedCtor() {
  _cached_size_ = 0;
  original_id_ = 0;
  has_origin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Origin::~Origin() {
  SharedDtor();
}

void Origin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Origin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Origin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Origin_descriptor_;
}

const Origin& Origin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lattice_2eproto();  return *default_instance_;
}

Origin* Origin::default_instance_ = NULL;

Origin* Origin::New() const {
  return new Origin;
}

void Origin::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    original_id_ = 0;
    has_origin_ = false;
  }
  hypergraph_edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Origin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 hypergraph_edge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hypergraph_edge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_hypergraph_edge())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hypergraph_edge())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hypergraph_edge;
        if (input->ExpectTag(16)) goto parse_original_id;
        break;
      }
      
      // optional int32 original_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_id_)));
          set_has_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_origin;
        break;
      }
      
      // optional bool has_origin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_origin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_origin_)));
          set_has_has_origin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Origin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 hypergraph_edge = 1;
  for (int i = 0; i < this->hypergraph_edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->hypergraph_edge(i), output);
  }
  
  // optional int32 original_id = 2;
  if (has_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->original_id(), output);
  }
  
  // optional bool has_origin = 3;
  if (has_has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_origin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Origin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 hypergraph_edge = 1;
  for (int i = 0; i < this->hypergraph_edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->hypergraph_edge(i), target);
  }
  
  // optional int32 original_id = 2;
  if (has_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->original_id(), target);
  }
  
  // optional bool has_origin = 3;
  if (has_has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_origin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Origin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 original_id = 2;
    if (has_original_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_id());
    }
    
    // optional bool has_origin = 3;
    if (has_has_origin()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 hypergraph_edge = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hypergraph_edge_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hypergraph_edge(i));
    }
    total_size += 1 * this->hypergraph_edge_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Origin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Origin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Origin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Origin::MergeFrom(const Origin& from) {
  GOOGLE_CHECK_NE(&from, this);
  hypergraph_edge_.MergeFrom(from.hypergraph_edge_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_original_id()) {
      set_original_id(from.original_id());
    }
    if (from.has_has_origin()) {
      set_has_origin(from.has_origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Origin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Origin::CopyFrom(const Origin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Origin::IsInitialized() const {
  
  return true;
}

void Origin::Swap(Origin* other) {
  if (other != this) {
    hypergraph_edge_.Swap(&other->hypergraph_edge_);
    std::swap(original_id_, other->original_id_);
    std::swap(has_origin_, other->has_origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Origin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Origin_descriptor_;
  metadata.reflection = Origin_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::lattice::Lattice_Node,
    ::google::protobuf::internal::MessageTypeTraits< ::lattice::Phraselets >, 11, false >
  phraselets(kPhraseletsFieldNumber, ::lattice::Phraselets::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::lattice::Lattice_Node,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  has_phrases(kHasPhrasesFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::lattice::Lattice_Edge,
    ::google::protobuf::internal::MessageTypeTraits< ::lattice::Origin >, 11, false >
  origin(kOriginFieldNumber, ::lattice::Origin::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::lattice::Lattice,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  num_hypergraph_edges(kNumHypergraphEdgesFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::lattice::Lattice,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  num_original_ids(kNumOriginalIdsFieldNumber, 0);

// @@protoc_insertion_point(namespace_scope)

}  // namespace lattice

// @@protoc_insertion_point(global_scope)
