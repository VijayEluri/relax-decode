import os
from formatting import *
from experiment import *
from parse_experiments import *
root = os.environ["SCARAB_ROOT"]

# Arguments are unkmap, test, outmapping, bigdata
def build_experiment(source, target, env, for_signature=False):
     """ 1) .unkmap for corpus
         2) original test file
         out -> new test file (with extra sentences)
     """
     return "python $SCARAB_PY/build_experiment.py %s %s %s > %s;wc -l %s | awk '{print $1-1}' > %s" %(source[0], source[1], source[2],
                                                                               target[0],target[0],  target[1])

def build_experiment_emit(source, target, env, for_signature=False):
     source.append('$SCARAB_PY/build_experiment.py')
     #target.append(target[0] + "_desc")
     return target, source

def unknown_list(source, target, env, for_signature=False):
     return "awk '{print $2}' %s | grep -v '^$' > %s " %(source[0], target[0])

def train_unknown(source, target, env, for_signature=False):
     return "python $SCARAB_PY/unknown_words.py $UNK_THRES %s < %s"%(target[0], source[0])

def train_unknown_emit(source, target, env):
     source.append('$SCARAB_PY/unknown_words.py')
     return target, source

def viterbi(source, target, env, for_signature=False):
     """
     hypergraph test prefix
     sent description
     """
     return '$SCARAB_ROOT/run_tagger $SCARAB_ROOT/parse/config.ini %s 0 `cat %s`| tee %s' \
                           % (source[0], source[1], target[0])

def viterbi_emit(source, target, env):
     source.append('$SCARAB_PY/run_tagger')
     return target, source

     
def ctag_convert(source, target, env, for_signature=False):
     return 'grep SENT %s | python $SCARAB_PY/map/unmap_pos.py %s $SCARAB_PY/map/POS.map > %s' % (source[0], source[1],  target[0])


def crf_run(source, target, env, for_signature=False):
     return 'java -Xmx1g -cp $SCARAB_ROOT/third-party/CRFTagger/crftagger.jar crf.tagger.CRFTagger -modeldir ../../CRFTagger/model -inputfile %s  -unknownwords %s > %s' % (source[0], source[1], target[0])


def crf_run_emit(source, target, env):
     source.append('$SCARAB_ROOT/third-party/CRFTagger/crftagger.jar')
     return target, source

def stanford_tagger_run(source, target, env, for_signature=False):
     return 'cd $SCARAB_ROOT/third-party/stanford-postagger-2009-12-24/; ./stanford-postagger.sh %s %s > %s'%(source[0], source[1],  target[0])

#return 'java -Xmx1g -cp $SCARAB_ROOT/third-party/CRFTagger/crftagger.jar crf.tagger.CRFTagger -modeldir ../../CRFTagger/model -inputfile %s  -unknownwords %s > %s' % (source[0], source[1], target[0])





def hypergraph_run(source, target, env, for_signature=False):
     return 'grep LATTICE %s > /tmp/lat;  $SCARAB_ROOT/hypergraph/convert %s /tmp/lat; touch %s' % ( source[0], target[0], target[0])

def hypergraph_run_emit(source, target, env):
     source.append('$SCARAB_ROOT/hypergraph/convert')
     return target, source



def eval_run(source, target, env, for_signature=False):
     return "python $SCARAB_PY/eval/pos_accuracy.py %s %s | tee %s"%(source[0], source[1], target[0])

def eval_run_emit(source, target, env):
     source.append('$SCARAB_PY/eval/pos_accuracy.py')
     return target, source

def full_lp(source, target, env, for_signature=False):

     return '$SCARAB_ROOT/run_potts_tagger $SCARAB_ROOT/parse/config.ini %s %s 0 `cat %s` 0 `cat %s` $PENALTY %s | tee %s' % (source[0], source[2], source[1], source[4], source[3], target[0]) 

def full_lp_emit(source, target, env):
     source.append('$SCARAB_ROOT/run_potts_tagger')
     return target, source


def marginals(source, target, env, for_signature=False):
     return '$SCARAB_ROOT/marginals $SCARAB_ROOT/parse/config.neg.ini %s 0 $END_INDEX > %s' % (source[0], target[0]) 

def marginals_emit(source, target, env):
     source.append('$SCARAB_ROOT/marginals')
     return target, source


def decomp(source, target, env, for_signature=False):
     return '$SCARAB_ROOT/run_decomp_tagger $SCARAB_ROOT/parse/config.ini %s  0 `cat %s` %s 0 `awk \'{print $1-1}\' %s` %s | tee %s' \
            % (source[0],  source[1], source[2], source[4], source[3], target[0])

# def decomp(source, target, env, for_signature=False):
#      return '$SCARAB_ROOT/run_decomp_tagger $SCARAB_ROOT/parse/config.ini %s 0 $END_INDEX %s $PENALTY | tee %s' % (source[0], source[1], target[0]) 


def decomp_emit(source, target, env):
     source.append('$SCARAB_ROOT/run_decomp_tagger')
     return target, source

def pos_cons_old_build(source, target, env, for_signature=False):
     return 'python $SCARAB_PY/pos_constraints.py %s %s > %s' % (source[0], source[1], target[0]) 

def pos_cons_old_emit(source, target, env):
     source.append('$SCARAB_PY/pos_constraints.py')
     return target, source


def pos_cons_build(source, target, env, for_signature=False):
     return 'grep BEAM %s > /tmp/beam;python $SCARAB_PY/pos_constraints_mrf.py %s %s %s $CONST_TYPE a $PENALTY %s /tmp/beam > %s' \
         % (source[2], source[0], source[1], target[0], target[2],  target[1]) 

def pos_cons_emit(source, target, env):
     source.append('$SCARAB_PY/pos_constraints_mrf.py')
     #target.append(target[1] + "_desc")
     return target, source


def full_diff(source, target, env, for_signature=False):
     return 'python triple_diff.py %s %s %s > %s' % (source[0], source[1], source[2], target[0]) 

def error_analysis(source, target, env, for_signature=False):
     return 'python $SCARAB_PY/error_analysis.py %s %s %s %s %s %s | tee %s' % tuple(source[:6] + [target[0]]) 

def error_analysis_emit(source, target, env):
     source.append('$SCARAB_PY/error_analysis.py')
     return target, source
     

builders = {
     "BuildExperiment":
     Builder(generator = build_experiment,
             emit = build_experiment_emit
             ),


     "Viterbi": Builder(generator = viterbi,
                      suffix='.ctagging',
                      emit = viterbi_emit
                      ),

     "FullLP": Builder(generator =full_lp, 
                      suffix= '.ctagging',
                       emit = full_lp_emit),

     "Marginals": Builder(generator =marginals, 
                       emit = marginals_emit),

     "DecompTag": Builder(generator =decomp, 
                      suffix= '.ctagging',
                          emit = decomp_emit),


     "ToTag": Builder(generator = ctag_convert,
                   suffix='.tagging'                      
                      ),

     "CRFTagger": Builder(generator = crf_run,
                          suffix='.crf',
                          emit = crf_run_emit),

     "StanfordTagger": Builder(generator = stanford_tagger_run,
                          suffix='.crf'),

     "CreateHypergraph": Builder(generator = hypergraph_run,
                                 emit = hypergraph_run_emit),

     "Eval": Builder(generator = eval_run,
                   suffix='.eval'),

     "Flatten":Builder(action =SimpleToFlat(), 
                       suffix= '.flattagging',
                       src_suffix='.tagging'),
     
     "BuildConstraint": Builder(generator = pos_cons_build, emitter= pos_cons_emit),

     "BuildConstraintOld": Builder(generator = pos_cons_old_build, emitter= pos_cons_old_emit),

     "UnknownList": Builder(generator = unknown_list, 
                            src_suffix=".constraints", suffix='.unknown'),

     "TrainUnknown": Builder(generator = train_unknown, suffix='.unkmap', emitter= train_unknown_emit),

     "FullDiff": Builder(generator = full_diff, suffix='.tagdiff'),
     
     "ErrorAnalysis": Builder(generator = error_analysis, suffix='.taganal', emitter=error_analysis_emit)
     }



env = Environment(ENV=os.environ)
env.Append(BUILDERS= builders)
root = os.environ["SCARAB_ROOT"]

env.Append(SCARAB_ROOT = root)
env.Append(SCARAB_PY = root + "/data_management/")
env.Append(SCARAB_RESULTS = root + "/experiments/results/")
env.Append(SCARAB_DATA = root + "/parse/data/")
env.Append(SCARAB_TMP = root + "/tmp/")

def register_experiment(env, exp):

     unk_map = env.TrainUnknown(exp.unknown_words(), exp.train_file(),
                                UNK_THRES = exp.unk_thres)

     test_sents, corpus_desc = env.BuildExperiment((exp.full_test_file(), exp.full_test_file_desc()
                                                    ),
                                 (unk_map,  exp.original_test_file(), exp.brown_clusters()))

     constraints = env.BuildConstraintOld(exp.constraint_old_prefix(),
                                          (unk_map, test_sents))
     
     unk_list = env.UnknownList(exp.unknown_prefix(), 
                                constraints)

     temp_tags = env.StanfordTagger(exp.temporary_tags(), 
                                    (exp.tagger_model(), test_sents))


     lattice_hypergraphs = env.CreateHypergraph(exp.lattice_prefix(),
                                                temp_tags)

     marginals =exp.temporary_margs()

     constraints_mrf, mrf_link, mrf_link_desc = \
         env.BuildConstraint( (exp.constraint_mrf_prefix(), 
                               exp.mrf_link_prefix(), exp.mrf_link_prefix_desc()),
                              (unk_map, test_sents, temp_tags), 
                              CONST_TYPE=exp.constraint_type(),
                              PENALTY = exp.penalty()
                              )

     decoders = {}
     decoders['viterbi'] =env.Viterbi( exp.result_prefix()+"_viterbi", 
                                       (lattice_hypergraphs, corpus_desc) 
                                       )

     decoders['lp']= env.FullLP( exp.result_prefix() + "_lp", 
                                 (lattice_hypergraphs, corpus_desc, constraints_mrf, mrf_link, mrf_link_desc),                                 
                                 PENALTY = exp.penalty())

     decoders['decomp']= env.DecompTag( exp.result_prefix() + "_decomp", 
                                      (lattice_hypergraphs, corpus_desc, constraints_mrf, mrf_link, mrf_link_desc),                                 
                                      PENALTY = exp.penalty())


     flats = {}
     for dec_type,result in decoders.iteritems():
          tagging_name = "%s_%s"%(exp.result_prefix(), dec_type)
          
          tagging = env.ToTag( tagging_name, 
                     (result,
                      test_sents))

          env.Eval( tagging_name, 
                    (tagging,
                     exp.gold_file()))

          flats[dec_type] = env.Flatten( tagging_name, tagging)

     flats['gold'] = env.Flatten( "%s_%s"%(exp.result_prefix(), "gold"), 
                                  exp.gold_file())
       
          
     env.FullDiff(exp.result_prefix(), 
          (flats["viterbi"], flats['lp'], flats["gold"])
                  )

     env.ErrorAnalysis(exp.result_prefix(), 
                       ( flats["gold"], unk_map, marginals, flats["viterbi"], flats['lp'], flats["gold"])
                       )

     env.ErrorAnalysis(exp.result_prefix()+"_d", 
                       ( flats["gold"], unk_map, marginals, flats["viterbi"], flats['decomp'], flats["gold"])
                       )


def parser_run(source, target, env, for_signature=False):
     """
     0 - the model
     1 - the test file
     target - parses
     """
     return "cd $SCARAB_ROOT/third-party/mstparser/;java -classpath \".:lib/trove.jar\" -Xmx1800m mstparser.DependencyParser test model-name:%s  test test-file:%s > %s"%(source[0], source[1], target[0])

def parser_run_emit(source, target, env, for_signature=False):
     #source.append('$SCARAB_ROOT/third-party/mstparser/mstparser.jar')
     return target, source


def parser_to_hypergraph(source, target, env, for_signature=False):
     return "cat %s | grep \"\\(PROB\\|DONE\\)\" > /tmp/parse; cat /tmp/parse | $SCARAB_ROOT/parse/convert %s | tee %s;touch %s"%(source[0], target[0], target[1], target[0])

def parser_to_hypergraph_emit(source, target, env, for_signature=False):
     source.append('$SCARAB_ROOT/parse/convert')
     return target, source


def viterbi_parse(source, target, env, for_signature=False):
     """
     hypergraph test prefix
     sent description
     """
     return '$SCARAB_ROOT/run_parser $SCARAB_ROOT/parse/config.ini %s 0 `cat %s`| tee %s' \
                           % (source[0], source[1], target[0])

def viterbi_parse_emit(source, target, env):
     source.append('$SCARAB_PY/run_parser')
     return target, source

def DualDecompParse(source, target, env, for_signature=False):
     return '$SCARAB_ROOT/run_decomp_parser $SCARAB_ROOT/parse/config.ini %s  0 `cat %s` %s 0 `cat %s` %s | tee %s' \
            % (source[0],  source[1], source[2], source[4], source[3], target[0])


def DualDecompParse_emit(source, target, env):
     source.append('$SCARAB_PY/run_decomp_parser')
     return target, source

def full_lp_parse(source, target, env, for_signature=False):
     """
     hypergraph test prefix
     sent description
     """
     return '$SCARAB_ROOT/run_full_parser $SCARAB_ROOT/parse/config.ini %s  0 `cat %s` %s 0 `cat %s` %s | tee %s' \
                           % (source[0],  source[1], source[2], source[4], source[3], target[0])

def full_lp_parse_emit(source, target, env):
     source.append('$SCARAB_PY/run_full_parser')
     return target, source

def to_parse(source, target, env, for_signature=False):
     """
     """
     return 'grep SENT %s | python $SCARAB_PY/map/unmap_sent.py %s $SCARAB_PY/map/STANFORD.map > %s' % (source[0], source[1],  target[0])


def to_parse_emit(source, target, env):
     return target, source

def build_parse_constraints(source, target, env, for_signature=False):
     """
     """
     return 'python $SCARAB_PY/parse_constraints_mrf.py %s $PENALTY %s %s %s %s | tee %s'%(source[0], source[1], source[2],  target[0], target[2], target[1])

def build_parse_constraints_emit(source, target, env):
     source.append('$SCARAB_PY/parse_constraints_mrf.py')
     return target, source


def ParseComparison(source, target, env, for_signature=False):
     return "sdiff -w 20 %s %s > /tmp/parse_diff; paste /tmp/parse_diff %s > %s"%(source[0], source[1], source[2], target[0])

def ParseComparison_emit(source, target, env, for_signature=False):
     return target, source

def PrettyComp(source, target, env, for_signature=False):
     return "grep CONSTRAINT %s > /tmp/constraints;python $SCARAB_PY/eval/dep_comp_eval.py %s %s %s /tmp/constraints > %s"%(source[0], source[1], source[2], source[3], target[0])

def PrettyComp_emit(source, target, env, for_signature=False):
     return target, source


builders = {
     "Parse":
     Builder(generator = parser_run,
             emit = parser_run_emit),
     "ParseToHypergraph":
     Builder(generator = parser_to_hypergraph,
             emit = parser_to_hypergraph_emit),
     "ViterbiParse":
     Builder(generator = viterbi_parse,
             emit = viterbi_parse_emit),
     "FullLPParse":
     Builder(generator = full_lp_parse,
             emit = full_lp_parse_emit),
     "DualDecompParse":
     Builder(generator = DualDecompParse,
             emit = DualDecompParse_emit),

     "ToParse":
     Builder(generator = to_parse,
             emit = to_parse_emit, suffix=".parse"),
     "BuildParseConstraints":
     Builder(generator = build_parse_constraints,
             emit = build_parse_constraints_emit),
     "ParseComparison":
     Builder(generator = ParseComparison,
             emit = ParseComparison_emit,
             suffix = ".comp"),
     "PrettyComparison":
     Builder(generator = PrettyComp,
             emit = PrettyComp_emit)

     }

env.Append(BUILDERS= builders)

def register_parse_experiment(env, exp):
     parse_out = env.Parse(exp.parse_out(), (exp.model(), exp.test_file()))

     hypergraphs, hypergraphs_desc = env.ParseToHypergraph(
          (exp.hypergraph_prefix(), exp.hypergraph_prefix()+"_desc"),
          parse_out)
     decoders = {}
     decoders['viterbi'] =env.ViterbiParse( exp.result_prefix()+"_viterbi", 
                                            (hypergraphs, hypergraphs_desc))

     targ = (exp.constraint_mrf_prefix()+"_desc",
             exp.constraint_mrf_prefix()+"_link",
             exp.constraint_mrf_prefix())
     
     src =  ( exp.test_file(), exp.mrf_spec(), exp.training_file() )
     
     constraints_desc, mrf_link, constraints = env.BuildParseConstraints( targ,src, PENALTY=exp.penalty())
           


     decoders['lp']= env.FullLPParse( exp.result_prefix() + "_lp", 
                                      (hypergraphs, hypergraphs_desc, constraints, mrf_link, constraints_desc),                                 
                                      PENALTY = exp.penalty())

     decoders['decomp']= env.DualDecompParse( exp.result_prefix() + "_decomp", 
                                      (hypergraphs, hypergraphs_desc, constraints, mrf_link, constraints_desc),                                 
                                      PENALTY = exp.penalty())


     print decoders['decomp']
     flats = {}
     for dec_type,result in decoders.iteritems():
          parse_name = "%s_%s"%(exp.result_prefix(), dec_type)
          
          flats[dec_type] = env.ToParse( parse_name, 
                     (result,
                      exp.test_file()))

          #env.Eval( tagging_name, 
          #          (tagging,
          #           exp.gold_file()))

          #flats[dec_type] = env.Flatten( tagging_name, tagging)

     #flats['gold'] = env.Flatten( "%s_%s"%(exp.result_prefix(), "gold"), 
     #                             exp.gold_file())
       
          
     env.ParseComparison(exp.result_prefix(), 
          (flats["viterbi"], flats['lp'], exp.test_file())
                         )

     env.ParseComparison(exp.result_prefix()+ "_d", 
                         (flats["viterbi"], flats['decomp'], exp.test_file())
                         )

     env.PrettyComparison(exp.result_prefix()+ "_d.pretty", 
          (decoders["decomp"], flats["viterbi"], flats['decomp'], exp.test_file()))

     #env.ErrorAnalysis(exp.result_prefix(), 
     #                  ( flats["gold"], unk_map, marginals, flats["viterbi"], flats['lp'], flats["gold"])
     #                  )


# register_experiment(env, small_brown_3)
# register_experiment(env, small_brown_10)
# register_experiment(env, small_brown_10_hard)
# register_experiment(env, small_brown_50)
# register_experiment(env, small_brown_100_hard)
# register_experiment(env, small_brown_100)
# register_experiment(env, small_brown_500)
# register_experiment(env, small_brown_500_potts)
# register_experiment(env, small_brown_200)
# register_experiment(env, small_brown_200_potts)
# #register_experiment(env, small_brown_extra_5)
# register_experiment(env, small_brown_extra20_5)
# register_experiment(env, small_brown_extra20_200)

# register_experiment(env, small_brown_extra10_5_05)
# register_experiment(env, small_brown_extra10_5_2)
# register_experiment(env, small_brown_extra10_5_5)

# register_experiment(env, small_brown_5_05)
# register_experiment(env, small_brown_5_2)
# register_experiment(env, small_brown_5_5)
# register_experiment(env, small_clust_5)
# register_experiment(env, big_clust_5)
# register_experiment(env, big_clust_4)
# register_experiment(env, big_clust_1)
# register_experiment(env, big_clust_05)
register_experiment(env, small_experiment)
register_experiment(env, small_experiment2)

#register_parse_experiment(env, small_parse_experiment)
register_parse_experiment(env, parse_experiment)
register_parse_experiment(env, parse_experiment2)
register_parse_experiment(env, parse_experiment_big)
register_parse_experiment(env, parse_experiment_gentle)
register_parse_experiment(env, parse_experiment_gentle2)
register_parse_experiment(env, parse_experiment_wide)
register_parse_experiment(env, parse_experiment_gentle_full)
register_parse_experiment(env, parse_experiment_gentle_size)

register_parse_experiment(env, parse_experiment_gentle_mi_full)
register_parse_experiment(env, parse_experiment_gentle_mi_bigger)
register_parse_experiment(env, parse_experiment_gentle_mi_bigger2)
register_parse_experiment(env, parse_experiment_gentle_mi_small)
register_parse_experiment(env, parse_experiment_gentle_mihard_bigger)
register_parse_experiment(env, parse_experiment_gentle_mi_asym_bigger)
register_parse_experiment(env, parse_experiment_gentle_mi_asym_full)
register_parse_experiment(env, parse_experiment_gentle_mi_asym2_full)
register_parse_experiment(env, parse_experiment_gentle_mi_asymroi_full)

register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_full)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger2)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger4)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger5)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger6)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger7)
register_parse_experiment(env, parse_experiment_gentle_mi_asymlow_bigger8)
register_parse_experiment(env, parse_experiment_strong_mi_asymlow_bigger_500)
register_parse_experiment(env, parse_experiment_strong_mi_asymlow_bigger_100)
register_parse_experiment(env, parse_experiment_strong_mi_asymlow_tiny)
register_parse_experiment(env, parse_experiment_strong_mi_asymlow_tiny2)
